import { E as Elysia, L as LifeCycleStore, S as SchemaValidator, H as Handler, C as ComposedHandler } from './dynamic-handle-CQy7PKh8.js';
import { TAnySchema } from '@sinclair/typebox';
import { Sucrose } from './sucrose.js';
import 'bun';
import 'memoirist';
import '@sinclair/typebox/compiler';
import 'openapi-types';
import 'eventemitter3';
import './error.js';
import 'undici-types';
import '@sinclair/typebox/system';

declare const hasReturn: (fnLiteral: string) => boolean;
declare const hasType: (type: string, schema: TAnySchema) => any;
declare const hasProperty: (expectedProperty: string, schema: TAnySchema) => boolean | undefined;
declare const hasTransform: (schema: TAnySchema) => any;
declare const isAsync: (fn: Function) => boolean;
declare const composeHandler: ({ app, path, method, localHook, hooks, validator, handler, allowMeta, appInference: { event: eventInference, trace: traceInference } }: {
    app: Elysia<any, any, any, any, any, any, any, any>;
    path: string;
    method: string;
    hooks: LifeCycleStore;
    localHook: LifeCycleStore;
    validator: SchemaValidator;
    handler: unknown | Handler<any, any>;
    allowMeta?: boolean | undefined;
    appInference: {
        event: Sucrose.Inference;
        trace: Sucrose.TraceInference;
    };
}) => ComposedHandler;
declare const composeGeneralHandler: (app: Elysia<any, any, any, any, any, any, any, any>) => any;
declare const composeErrorHandler: (app: Elysia<any, any, any, any, any, any, any, any>) => any;
declare const jitRoute: (index: number) => string;

export { composeErrorHandler, composeGeneralHandler, composeHandler, hasProperty, hasReturn, hasTransform, hasType, isAsync, jitRoute };
