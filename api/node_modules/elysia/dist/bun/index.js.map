{
  "version": 3,
  "sources": ["../../node_modules/eventemitter3/index.js", "../../node_modules/fast-decode-uri-component/index.js", "../../node_modules/fast-querystring/lib/parse.js", "../../node_modules/fast-querystring/lib/internals/querystring.js", "../../node_modules/fast-querystring/lib/stringify.js", "../../node_modules/fast-querystring/lib/index.js", "../../node_modules/memoirist/dist/index.js", "../../node_modules/eventemitter3/index.mjs", "../../node_modules/eventemitter3/index.mjs", "../../src/trace.ts", "../../src/sucrose.ts", "../../src/error.ts", "../../src/utils.ts", "../../node_modules/cookie/index.js", "../../src/cookies.ts", "../../src/cookies.ts", "../../src/handler.ts", "../../src/utils.ts", "../../src/error.ts", "../../src/ws/index.ts", "../../src/compose.ts", "../../src/compose.ts", "../../src/dynamic-handle.ts", "../../src/dynamic-handle.ts", "../../src/type-system.ts", "../../src/type-system.ts", "../../src/index.ts"],
  "sourcesContent": [
    "'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n",
  "'use strict'\n\nvar UTF8_ACCEPT = 12\nvar UTF8_REJECT = 0\nvar UTF8_DATA = [\n  // The first part of the table maps bytes to character to a transition.\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n  4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n  6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7,\n  10, 9, 9, 9, 11, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n\n  // The second part of the table maps a state to a new state when adding a\n  // transition.\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  12, 0, 0, 0, 0, 24, 36, 48, 60, 72, 84, 96,\n  0, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 48, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\n  // The third part maps the current transition to a mask that needs to apply\n  // to the byte.\n  0x7F, 0x3F, 0x3F, 0x3F, 0x00, 0x1F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07\n]\n\nfunction decodeURIComponent (uri) {\n  var percentPosition = uri.indexOf('%')\n  if (percentPosition === -1) return uri\n\n  var length = uri.length\n  var decoded = ''\n  var last = 0\n  var codepoint = 0\n  var startOfOctets = percentPosition\n  var state = UTF8_ACCEPT\n\n  while (percentPosition > -1 && percentPosition < length) {\n    var high = hexCodeToInt(uri[percentPosition + 1], 4)\n    var low = hexCodeToInt(uri[percentPosition + 2], 0)\n    var byte = high | low\n    var type = UTF8_DATA[byte]\n    state = UTF8_DATA[256 + state + type]\n    codepoint = (codepoint << 6) | (byte & UTF8_DATA[364 + type])\n\n    if (state === UTF8_ACCEPT) {\n      decoded += uri.slice(last, startOfOctets)\n\n      decoded += (codepoint <= 0xFFFF)\n        ? String.fromCharCode(codepoint)\n        : String.fromCharCode(\n          (0xD7C0 + (codepoint >> 10)),\n          (0xDC00 + (codepoint & 0x3FF))\n        )\n\n      codepoint = 0\n      last = percentPosition + 3\n      percentPosition = startOfOctets = uri.indexOf('%', last)\n    } else if (state === UTF8_REJECT) {\n      return null\n    } else {\n      percentPosition += 3\n      if (percentPosition < length && uri.charCodeAt(percentPosition) === 37) continue\n      return null\n    }\n  }\n\n  return decoded + uri.slice(last)\n}\n\nvar HEX = {\n  '0': 0,\n  '1': 1,\n  '2': 2,\n  '3': 3,\n  '4': 4,\n  '5': 5,\n  '6': 6,\n  '7': 7,\n  '8': 8,\n  '9': 9,\n  'a': 10,\n  'A': 10,\n  'b': 11,\n  'B': 11,\n  'c': 12,\n  'C': 12,\n  'd': 13,\n  'D': 13,\n  'e': 14,\n  'E': 14,\n  'f': 15,\n  'F': 15\n}\n\nfunction hexCodeToInt (c, shift) {\n  var i = HEX[c]\n  return i === undefined ? 255 : i << shift\n}\n\nmodule.exports = decodeURIComponent\n",
  "\"use strict\";\n\nconst fastDecode = require(\"fast-decode-uri-component\");\n\nconst plusRegex = /\\+/g;\nconst Empty = function () {};\nEmpty.prototype = Object.create(null);\n\n/**\n * @callback parse\n * @param {string} input\n */\nfunction parse(input) {\n  // Optimization: Use new Empty() instead of Object.create(null) for performance\n  // v8 has a better optimization for initializing functions compared to Object\n  const result = new Empty();\n\n  if (typeof input !== \"string\") {\n    return result;\n  }\n\n  let inputLength = input.length;\n  let key = \"\";\n  let value = \"\";\n  let startingIndex = -1;\n  let equalityIndex = -1;\n  let shouldDecodeKey = false;\n  let shouldDecodeValue = false;\n  let keyHasPlus = false;\n  let valueHasPlus = false;\n  let hasBothKeyValuePair = false;\n  let c = 0;\n\n  // Have a boundary of input.length + 1 to access last pair inside the loop.\n  for (let i = 0; i < inputLength + 1; i++) {\n    c = i !== inputLength ? input.charCodeAt(i) : 38;\n\n    // Handle '&' and end of line to pass the current values to result\n    if (c === 38) {\n      hasBothKeyValuePair = equalityIndex > startingIndex;\n\n      // Optimization: Reuse equality index to store the end of key\n      if (!hasBothKeyValuePair) {\n        equalityIndex = i;\n      }\n\n      key = input.slice(startingIndex + 1, equalityIndex);\n\n      // Add key/value pair only if the range size is greater than 1; a.k.a. contains at least \"=\"\n      if (hasBothKeyValuePair || key.length > 0) {\n        // Optimization: Replace '+' with space\n        if (keyHasPlus) {\n          key = key.replace(plusRegex, \" \");\n        }\n\n        // Optimization: Do not decode if it's not necessary.\n        if (shouldDecodeKey) {\n          key = fastDecode(key) || key;\n        }\n\n        if (hasBothKeyValuePair) {\n          value = input.slice(equalityIndex + 1, i);\n\n          if (valueHasPlus) {\n            value = value.replace(plusRegex, \" \");\n          }\n\n          if (shouldDecodeValue) {\n            value = fastDecode(value) || value;\n          }\n        }\n        const currentValue = result[key];\n\n        if (currentValue === undefined) {\n          result[key] = value;\n        } else {\n          // Optimization: value.pop is faster than Array.isArray(value)\n          if (currentValue.pop) {\n            currentValue.push(value);\n          } else {\n            result[key] = [currentValue, value];\n          }\n        }\n      }\n\n      // Reset reading key value pairs\n      value = \"\";\n      startingIndex = i;\n      equalityIndex = i;\n      shouldDecodeKey = false;\n      shouldDecodeValue = false;\n      keyHasPlus = false;\n      valueHasPlus = false;\n    }\n    // Check '='\n    else if (c === 61) {\n      if (equalityIndex <= startingIndex) {\n        equalityIndex = i;\n      }\n      // If '=' character occurs again, we should decode the input.\n      else {\n        shouldDecodeValue = true;\n      }\n    }\n    // Check '+', and remember to replace it with empty space.\n    else if (c === 43) {\n      if (equalityIndex > startingIndex) {\n        valueHasPlus = true;\n      } else {\n        keyHasPlus = true;\n      }\n    }\n    // Check '%' character for encoding\n    else if (c === 37) {\n      if (equalityIndex > startingIndex) {\n        shouldDecodeValue = true;\n      } else {\n        shouldDecodeKey = true;\n      }\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = parse;\n",
  "// This file is taken from Node.js project.\n// Full implementation can be found from https://github.com/nodejs/node/blob/main/lib/internal/querystring.js\n\nconst hexTable = Array.from(\n  { length: 256 },\n  (_, i) => \"%\" + ((i < 16 ? \"0\" : \"\") + i.toString(16)).toUpperCase(),\n);\n\n// These characters do not need escaping when generating query strings:\n// ! - . _ ~\n// ' ( ) *\n// digits\n// alpha (uppercase)\n// alpha (lowercase)\n// rome-ignore format: the array should not be formatted\nconst noEscape = new Int8Array([\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\n  0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, // 32 - 47\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, // 80 - 95\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, // 112 - 127\n]);\n\n/**\n * @param {string} str\n * @returns {string}\n */\nfunction encodeString(str) {\n  const len = str.length;\n  if (len === 0) return \"\";\n\n  let out = \"\";\n  let lastPos = 0;\n  let i = 0;\n\n  outer: for (; i < len; i++) {\n    let c = str.charCodeAt(i);\n\n    // ASCII\n    while (c < 0x80) {\n      if (noEscape[c] !== 1) {\n        if (lastPos < i) out += str.slice(lastPos, i);\n        lastPos = i + 1;\n        out += hexTable[c];\n      }\n\n      if (++i === len) break outer;\n\n      c = str.charCodeAt(i);\n    }\n\n    if (lastPos < i) out += str.slice(lastPos, i);\n\n    // Multi-byte characters ...\n    if (c < 0x800) {\n      lastPos = i + 1;\n      out += hexTable[0xc0 | (c >> 6)] + hexTable[0x80 | (c & 0x3f)];\n      continue;\n    }\n    if (c < 0xd800 || c >= 0xe000) {\n      lastPos = i + 1;\n      out +=\n        hexTable[0xe0 | (c >> 12)] +\n        hexTable[0x80 | ((c >> 6) & 0x3f)] +\n        hexTable[0x80 | (c & 0x3f)];\n      continue;\n    }\n    // Surrogate pair\n    ++i;\n\n    // This branch should never happen because all URLSearchParams entries\n    // should already be converted to USVString. But, included for\n    // completion's sake anyway.\n    if (i >= len) {\n      throw new Error(\"URI malformed\");\n    }\n\n    const c2 = str.charCodeAt(i) & 0x3ff;\n\n    lastPos = i + 1;\n    c = 0x10000 + (((c & 0x3ff) << 10) | c2);\n    out +=\n      hexTable[0xf0 | (c >> 18)] +\n      hexTable[0x80 | ((c >> 12) & 0x3f)] +\n      hexTable[0x80 | ((c >> 6) & 0x3f)] +\n      hexTable[0x80 | (c & 0x3f)];\n  }\n  if (lastPos === 0) return str;\n  if (lastPos < len) return out + str.slice(lastPos);\n  return out;\n}\n\nmodule.exports = { encodeString };\n",
  "\"use strict\";\n\nconst { encodeString } = require(\"./internals/querystring\");\n\nfunction getAsPrimitive(value) {\n  const type = typeof value;\n\n  if (type === \"string\") {\n    // Length check is handled inside encodeString function\n    return encodeString(value);\n  } else if (type === \"bigint\") {\n    return value.toString();\n  } else if (type === \"boolean\") {\n    return value ? \"true\" : \"false\";\n  } else if (type === \"number\" && Number.isFinite(value)) {\n    return value < 1e21 ? \"\" + value : encodeString(\"\" + value);\n  }\n\n  return \"\";\n}\n\n/**\n * @param {Record<string, string | number | boolean\n * | ReadonlyArray<string | number | boolean> | null>} input\n * @returns {string}\n */\nfunction stringify(input) {\n  let result = \"\";\n\n  if (input === null || typeof input !== \"object\") {\n    return result;\n  }\n\n  const separator = \"&\";\n  const keys = Object.keys(input);\n  const keyLength = keys.length;\n  let valueLength = 0;\n\n  for (let i = 0; i < keyLength; i++) {\n    const key = keys[i];\n    const value = input[key];\n    const encodedKey = encodeString(key) + \"=\";\n\n    if (i) {\n      result += separator;\n    }\n\n    if (Array.isArray(value)) {\n      valueLength = value.length;\n      for (let j = 0; j < valueLength; j++) {\n        if (j) {\n          result += separator;\n        }\n\n        // Optimization: Dividing into multiple lines improves the performance.\n        // Since v8 does not need to care about the '+' character if it was one-liner.\n        result += encodedKey;\n        result += getAsPrimitive(value[j]);\n      }\n    } else {\n      result += encodedKey;\n      result += getAsPrimitive(value);\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = stringify;\n",
  "\"use strict\";\n\nconst parse = require(\"./parse\");\nconst stringify = require(\"./stringify\");\n\nconst fastQuerystring = {\n  parse,\n  stringify,\n};\n\n/**\n * Enable TS and JS support\n *\n * - `const qs = require('fast-querystring')`\n * - `import qs from 'fast-querystring'`\n */\nmodule.exports = fastQuerystring;\nmodule.exports.default = fastQuerystring;\nmodule.exports.parse = parse;\nmodule.exports.stringify = stringify;\n",
  "let e=(e,t)=>({part:e,store:null,inert:void 0!==t?new Map(t.map(e=>[e.part.charCodeAt(0),e])):null,params:null,wildcardStore:null}),t=(e,t)=>({...e,part:t}),r=e=>({paramName:e,store:null,inert:null});export class Memoirist{root={};history=[];static regex={static:/:.+?(?=\\/|$)/,params:/:.+?(?=\\/|$)/g};add(a,l,i){let s;if(\"string\"!=typeof l)throw TypeError(\"Route path must be a string\");\"\"===l?l=\"/\":\"/\"!==l[0]&&(l=`/${l}`),this.history.push([a,l,i]);let n=\"*\"===l[l.length-1];n&&(l=l.slice(0,-1));let o=l.split(Memoirist.regex.static),u=l.match(Memoirist.regex.params)||[];\"\"===o[o.length-1]&&o.pop(),s=this.root[a]?this.root[a]:this.root[a]=e(\"/\");let p=0;for(let a=0;a<o.length;++a){let i=o[a];if(a>0){let t=u[p++].slice(1);if(null===s.params)s.params=r(t);else if(s.params.paramName!==t)throw Error(`Cannot create route \"${l}\" with parameter \"${t}\" because a route already exists with a different parameter name (\"${s.params.paramName}\") in the same location`);let a=s.params;if(null===a.inert){s=a.inert=e(i);continue}s=a.inert}for(let r=0;;){if(r===i.length){if(r<s.part.length){let a=t(s,s.part.slice(r));Object.assign(s,e(i,[a]))}break}if(r===s.part.length){if(null===s.inert)s.inert=new Map;else if(s.inert.has(i.charCodeAt(r))){s=s.inert.get(i.charCodeAt(r)),i=i.slice(r),r=0;continue}let t=e(i.slice(r));s.inert.set(i.charCodeAt(r),t),s=t;break}if(i[r]!==s.part[r]){let a=t(s,s.part.slice(r)),l=e(i.slice(r));Object.assign(s,e(s.part.slice(0,r),[a,l])),s=l;break}++r}}if(p<u.length){let e=u[p],t=e.slice(1);if(null===s.params)s.params=r(t);else if(s.params.paramName!==t)throw Error(`Cannot create route \"${l}\" with parameter \"${t}\" because a route already exists with a different parameter name (\"${s.params.paramName}\") in the same location`);return null===s.params.store&&(s.params.store=i),s.params.store}return n?(null===s.wildcardStore&&(s.wildcardStore=i),s.wildcardStore):(null===s.store&&(s.store=i),s.store)}find(e,t){let r=this.root[e];return r?a(t,t.length,r,0):null}}let a=(e,t,r,l)=>{let i=r?.part,s=l+i.length;if(i.length>1){if(s>t)return null;if(i.length<15){for(let t=1,r=l+1;t<i.length;++t,++r)if(i.charCodeAt(t)!==e.charCodeAt(r))return null}else if(e.substring(l,s)!==i)return null}if(s===t)return null!==r.store?{store:r.store,params:{}}:null!==r.wildcardStore?{store:r.wildcardStore,params:{\"*\":\"\"}}:null;if(null!==r.inert){let l=r.inert.get(e.charCodeAt(s));if(void 0!==l){let r=a(e,t,l,s);if(null!==r)return r}}if(null!==r.params){let l=r.params,i=e.indexOf(\"/\",s);if(i!==s){if(-1===i||i>=t){if(null!==l.store){let r={};return r[l.paramName]=e.substring(s,t),{store:l.store,params:r}}}else if(null!==l.inert){let r=a(e,t,l.inert,i);if(null!==r)return r.params[l.paramName]=e.substring(s,i),r}}}return null!==r.wildcardStore?{store:r.wildcardStore,params:{\"*\":e.substring(s,t)}}:null};export default Memoirist;",
  "import EventEmitter from './index.js'\n\nexport { EventEmitter }\nexport default EventEmitter\n",
  "import EventEmitter from './index.js'\n\nexport { EventEmitter }\nexport default EventEmitter\n",
  "import type {\n\tTraceHandler,\n\tTraceProcess,\n\tTraceReporter,\n\tTraceStream\n} from './types'\n\nconst resolver = <T>() => {\n\tlet resolve: (a: T) => any\n\tconst promise = new Promise<T>((r) => {\n\t\tresolve = r\n\t})\n\n\treturn [promise, resolve!] as const\n}\n\ntype TraceResolver = [\n\tstart: (value: TraceProcess<'begin'>) => any,\n\tend: (value: TraceProcess<'end'>) => any\n]\n\nconst createSignal = () => {\n\tconst [start, resolveStart] = resolver<TraceProcess<'begin'>>()\n\tconst [end, resolveEnd] = resolver<TraceProcess<'end'>>()\n\n\tconst children: Promise<TraceProcess<'begin'>>[] = []\n\tconst resolvers: TraceResolver[] = []\n\n\treturn {\n\t\tsignal: start,\n\t\tconsume: (trace: TraceStream) => {\n\t\t\tswitch (trace.type) {\n\t\t\t\tcase 'begin':\n\t\t\t\t\tif (trace.unit && children.length === 0)\n\t\t\t\t\t\tfor (let i = 0; i < trace.unit; i++) {\n\t\t\t\t\t\t\tconst [start, resolveStart] =\n\t\t\t\t\t\t\t\tresolver<TraceProcess<'begin'>>()\n\t\t\t\t\t\t\tconst [end, resolveEnd] =\n\t\t\t\t\t\t\t\tresolver<TraceProcess<'end'>>()\n\n\t\t\t\t\t\t\tchildren.push(start)\n\t\t\t\t\t\t\tresolvers.push([\n\t\t\t\t\t\t\t\t(trace) => {\n\t\t\t\t\t\t\t\t\tresolveStart({\n\t\t\t\t\t\t\t\t\t\tchildren: [],\n\t\t\t\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t\t\t\t\tname: trace.name ?? '',\n\t\t\t\t\t\t\t\t\t\tskip: false,\n\t\t\t\t\t\t\t\t\t\ttime: trace.time\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t(time) => {\n\t\t\t\t\t\t\t\t\tresolveEnd(time)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t}\n\n\t\t\t\t\tresolveStart({\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\tend,\n\t\t\t\t\t\tname: trace.name ?? '',\n\t\t\t\t\t\tskip: false,\n\t\t\t\t\t\ttime: trace.time\n\t\t\t\t\t})\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'end':\n\t\t\t\t\tresolveEnd(trace.time)\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t},\n\t\tconsumeChild(trace: TraceStream) {\n\t\t\tswitch (trace.type) {\n\t\t\t\tcase 'begin':\n\t\t\t\t\tif (!resolvers[0]) return\n\t\t\t\t\tconst [resolveStart] = resolvers[0]\n\n\t\t\t\t\tresolveStart({\n\t\t\t\t\t\tchildren: [],\n\t\t\t\t\t\tend,\n\t\t\t\t\t\tname: trace.name ?? '',\n\t\t\t\t\t\tskip: false,\n\t\t\t\t\t\ttime: trace.time\n\t\t\t\t\t})\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'end':\n\t\t\t\t\tconst child = resolvers.shift()\n\t\t\t\t\tif (!child) return\n\n\t\t\t\t\tchild[1](trace.time)\n\t\t\t}\n\t\t},\n\t\tresolve() {\n\t\t\tresolveStart({\n\t\t\t\tchildren: [],\n\t\t\t\tend: new Promise((resolve) => resolve(0)),\n\t\t\t\tname: '',\n\t\t\t\tskip: true,\n\t\t\t\ttime: 0\n\t\t\t})\n\n\t\t\tfor (const [resolveStart, resolveEnd] of resolvers) {\n\t\t\t\tresolveStart({\n\t\t\t\t\tchildren: [],\n\t\t\t\t\tend: new Promise((resolve) => resolve(0)),\n\t\t\t\t\tname: '',\n\t\t\t\t\tskip: true,\n\t\t\t\t\ttime: 0\n\t\t\t\t})\n\n\t\t\t\tresolveEnd(0)\n\t\t\t}\n\n\t\t\tresolveEnd(0)\n\t\t}\n\t}\n}\n\nexport const createTraceListener = (\n\tgetReporter: () => TraceReporter,\n\ttotalListener: number,\n\thandler: TraceHandler<any, any>\n) => {\n\treturn async function trace(trace: TraceStream) {\n\t\tif (trace.event !== 'request' || trace.type !== 'begin') return\n\n\t\tconst id = trace.id\n\t\tconst reporter = getReporter()\n\n\t\tconst request = createSignal()\n\t\tconst parse = createSignal()\n\t\tconst transform = createSignal()\n\t\tconst beforeHandle = createSignal()\n\t\tconst handle = createSignal()\n\t\tconst afterHandle = createSignal()\n\t\tconst error = createSignal()\n\t\tconst response = createSignal()\n\n\t\trequest.consume(trace)\n\n\t\tconst reducer = (event: TraceStream) => {\n\t\t\tif (event.id === id)\n\t\t\t\tswitch (event.event) {\n\t\t\t\t\tcase 'request':\n\t\t\t\t\t\trequest.consume(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'request.unit':\n\t\t\t\t\t\trequest.consumeChild(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'parse':\n\t\t\t\t\t\tparse.consume(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'parse.unit':\n\t\t\t\t\t\tparse.consumeChild(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'transform':\n\t\t\t\t\t\ttransform.consume(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'transform.unit':\n\t\t\t\t\t\ttransform.consumeChild(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'beforeHandle':\n\t\t\t\t\t\tbeforeHandle.consume(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'beforeHandle.unit':\n\t\t\t\t\t\tbeforeHandle.consumeChild(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'handle':\n\t\t\t\t\t\thandle.consume(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'afterHandle':\n\t\t\t\t\t\tafterHandle.consume(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'afterHandle.unit':\n\t\t\t\t\t\tafterHandle.consumeChild(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\terror.consume(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'error.unit':\n\t\t\t\t\t\terror.consumeChild(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\tif (event.type === 'begin') {\n\t\t\t\t\t\t\trequest.resolve()\n\t\t\t\t\t\t\tparse.resolve()\n\t\t\t\t\t\t\ttransform.resolve()\n\t\t\t\t\t\t\tbeforeHandle.resolve()\n\t\t\t\t\t\t\thandle.resolve()\n\t\t\t\t\t\t\tafterHandle.resolve()\n\t\t\t\t\t\t\terror.resolve()\n\t\t\t\t\t\t} else reporter.off('event', reducer)\n\n\t\t\t\t\t\tresponse.consume(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'response.unit':\n\t\t\t\t\t\tresponse.consumeChild(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'exit':\n\t\t\t\t\t\trequest.resolve()\n\t\t\t\t\t\tparse.resolve()\n\t\t\t\t\t\ttransform.resolve()\n\t\t\t\t\t\tbeforeHandle.resolve()\n\t\t\t\t\t\thandle.resolve()\n\t\t\t\t\t\tafterHandle.resolve()\n\t\t\t\t\t\terror.resolve()\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t}\n\n\t\treporter.on('event', reducer)\n\n\t\tawait handler({\n\t\t\tid,\n\t\t\t// @ts-ignore\n\t\t\tcontext: trace.ctx,\n\t\t\t// @ts-ignore\n\t\t\tset: trace.ctx?.set,\n\t\t\t// @ts-ignore\n\t\t\tstore: trace.ctx?.store,\n\t\t\ttime: trace.time,\n\t\t\trequest: request.signal as any,\n\t\t\tparse: parse.signal as any,\n\t\t\ttransform: transform.signal as any,\n\t\t\tbeforeHandle: beforeHandle.signal as any,\n\t\t\thandle: handle.signal as any,\n\t\t\tafterHandle: afterHandle.signal as any,\n\t\t\terror: error.signal,\n\t\t\tresponse: response.signal as any\n\t\t})\n\n\t\treporter.emit(`res${id}.${totalListener}`, undefined)\n\t}\n}\n",
  "/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-constant-condition */\nimport type { Handler, LifeCycleStore, TraceHandler } from './types'\n\nexport namespace Sucrose {\n\texport interface Inference {\n\t\tqueries: string[]\n\t\tunknownQueries: boolean\n\t\tquery: boolean\n\t\theaders: boolean\n\t\tbody: boolean\n\t\tcookie: boolean\n\t\tset: boolean\n\t}\n\n\texport interface LifeCycle extends Partial<LifeCycleStore> {\n\t\thandler?: Handler\n\t}\n\n\texport interface TraceInference {\n\t\trequest: boolean\n\t\tparse: boolean\n\t\ttransform: boolean\n\t\thandle: boolean\n\t\tbeforeHandle: boolean\n\t\tafterHandle: boolean\n\t\terror: boolean\n\t\tcontext: boolean\n\t\tstore: boolean\n\t\tset: boolean\n\t}\n}\n\n/**\n * Separate stringified function body and paramter\n *\n * @example\n * ```typescript\n * separateFunction('async ({ hello }) => { return hello }') // => ['({ hello })', '{ return hello }']\n * ```\n */\nexport const separateFunction = (code: string): [string, string] => {\n\tif (code.startsWith('async')) code = code.slice(6)\n\n\tlet index = -1\n\n\t// Starts with '(', is an arrow function\n\tif (code.charCodeAt(0) === 40) {\n\t\t// ? arrow function\n\t\tindex = code.indexOf(') => {\\n')\n\t\tif (index !== -1) return [code.slice(1, index), code.slice(index + 5)]\n\n\t\t// ? Sudden return\n\t\tindex = code.indexOf(') => ')\n\t\tif (index !== -1) return [code.slice(1, index), code.slice(index + 5)]\n\t}\n\n\t// Using function keyword\n\tif (code.startsWith('function')) {\n\t\tindex = code.indexOf('(')\n\t\tconst end = code.indexOf(')')\n\n\t\treturn [code.slice(index + 1, end), code.slice(end + 2)]\n\t}\n\n\t// Probably Declare as method\n\tconst start = code.indexOf('(')\n\n\tif (start !== -1) {\n\t\tconst [parameter, body] = code.split('\\n', 2)\n\t\tconst end = parameter.lastIndexOf(')') + 1\n\n\t\treturn [parameter.slice(start, end), '{' + body]\n\t}\n\n\t// Unknown case\n\treturn code.split('\\n', 2) as [string, string]\n}\n\n/**\n * Get range between bracket pair\n *\n * @example\n * ```typescript\n * bracketPairRange('hello: { world: { a } }, elysia') // [6, 20]\n * ```\n */\nexport const bracketPairRange = (parameter: string): [number, number] => {\n\tconst start = parameter.indexOf('{')\n\tif (start === -1) return [-1, 0]\n\n\tlet end = start + 1\n\tlet deep = 1\n\n\tfor (; end < parameter.length; end++) {\n\t\tconst char = parameter.charCodeAt(end)\n\n\t\t// Open bracket\n\t\tif (char === 123) deep++\n\t\t// Close bracket\n\t\telse if (char === 125) deep--\n\n\t\tif (deep === 0) break\n\t}\n\n\tif (deep !== 0) return [0, parameter.length]\n\n\treturn [start, end + 1]\n}\n\n/**\n * Similar to `bracketPairRange` but in reverse order\n * Get range between bracket pair from end to beginning\n *\n * @example\n * ```typescript\n * bracketPairRange('hello: { world: { a } }, elysia') // [6, 20]\n * ```\n */\nexport const bracketPairRangeReverse = (\n\tparameter: string\n): [number, number] => {\n\tconst end = parameter.lastIndexOf('}')\n\tif (end === -1) return [-1, 0]\n\n\tlet start = end - 1\n\tlet deep = 1\n\n\tfor (; start >= 0; start--) {\n\t\tconst char = parameter.charCodeAt(start)\n\n\t\t// Open bracket\n\t\tif (char === 125) deep++\n\t\t// Close bracket\n\t\telse if (char === 123) deep--\n\n\t\tif (deep === 0) break\n\t}\n\n\tif (deep !== 0) return [-1, 0]\n\n\treturn [start, end + 1]\n}\n\n/**\n * Retrieve only root paramters of a function\n *\n * @example\n * ```typescript\n * retrieveRootParameters('({ hello: { world: { a } }, elysia })') // => 'hello elysia'\n * ```\n */\nexport const retrieveRootParamters = (parameter: string) => {\n\t// Remove () and {}\n\tif (parameter.charCodeAt(0) === 40) parameter = parameter.slice(1, -1)\n\t// Using 2 because of the space\n\tif (parameter.charCodeAt(0) === 123) parameter = parameter.slice(2, -2)\n\n\twhile (true) {\n\t\tconst [start, end] = bracketPairRange(parameter)\n\t\tif (start === -1) break\n\n\t\tparameter = parameter.slice(0, start - 2) + parameter.slice(end + 1)\n\t}\n\n\treturn parameter.replace(/:/g, '').trim()\n}\n\n/**\n * Find inference from parameter\n *\n * @param parameter stringified parameter\n */\nexport const findParameterReference = (\n\tparameter: string,\n\tinference: Sucrose.Inference\n) => {\n\tconst root = retrieveRootParamters(parameter)\n\n\tif (!inference.query && root.includes('query')) inference.query = true\n\tif (!inference.headers && root.includes('headers')) inference.headers = true\n\tif (!inference.body && root.includes('body')) inference.body = true\n\tif (!inference.cookie && root.includes('cookie')) inference.cookie = true\n\tif (!inference.set && root.includes('set')) inference.set = true\n\n\treturn root\n}\n\n/**\n * Find inference from parameter\n *\n * @param parameter stringified parameter\n */\nexport const findTraceParameterReference = (\n\tparameter: string,\n\tinference: Sucrose.TraceInference\n) => {\n\tconst root = retrieveRootParamters(parameter)\n\n\tif (!inference.request && root.includes('request')) inference.request = true\n\tif (!inference.parse && root.includes('parse')) inference.parse = true\n\tif (!inference.transform && root.includes('transform'))\n\t\tinference.transform = true\n\tif (!inference.handle && root.includes('handle')) inference.handle = true\n\tif (!inference.beforeHandle && root.includes('beforeHandle'))\n\t\tinference.beforeHandle = true\n\tif (!inference.afterHandle && root.includes('afterHandle'))\n\t\tinference.afterHandle = true\n\tif (!inference.error && root.includes('error')) inference.error = true\n\tif (!inference.context && root.includes('context')) inference.context = true\n\tif (!inference.store && root.includes('store')) inference.store = true\n\tif (!inference.set && root.includes('set')) inference.set = true\n\n\treturn root\n}\n\nconst findEndIndex = (\n\ttype: string,\n\tcontent: string,\n\tindex?: number | undefined\n) => {\n\tconst newLineIndex = content.indexOf(type + '\\n', index)\n\tconst newTabIndex = content.indexOf(type + '\\t', index)\n\tconst commaIndex = content.indexOf(type + ',', index)\n\tconst semicolonIndex = content.indexOf(type + ';', index)\n\tconst emptyIndex = content.indexOf(type + ' ', index)\n\n\t// Pick the smallest index that is not -1 or 0\n\treturn (\n\t\t[newLineIndex, newTabIndex, commaIndex, semicolonIndex, emptyIndex]\n\t\t\t.filter((i) => i > 0)\n\t\t\t.sort((a, b) => a - b)[0] || -1\n\t)\n}\n\nconst findEndQueryBracketIndex = (\n\ttype: string,\n\tcontent: string,\n\tindex?: number | undefined\n) => {\n\tconst bracketEndIndex = content.indexOf(type + ']', index)\n\tconst singleQuoteIndex = content.indexOf(type + \"'\", index)\n\tconst doubleQuoteIndex = content.indexOf(type + '\"', index)\n\n\t// Pick the smallest index that is not -1 or 0\n\treturn (\n\t\t[bracketEndIndex, singleQuoteIndex, doubleQuoteIndex]\n\t\t\t.filter((i) => i > 0)\n\t\t\t.sort((a, b) => a - b)[0] || -1\n\t)\n}\n\n/**\n * Find alias of variable from function body\n *\n * @example\n * ```typescript\n * findAlias('body', '{ const a = body, b = body }') // => ['a', 'b']\n * ```\n */\nexport const findAlias = (type: string, body: string, depth = 0) => {\n\tif (depth > 5) return []\n\n\tconst aliases: string[] = []\n\n\tlet content = body\n\n\twhile (true) {\n\t\tlet index = findEndIndex(' = ' + type, content)\n\n\t\tif (index === -1) {\n\t\t\t/**\n\t\t\t * Check if pattern is at the end of the string\n\t\t\t *\n\t\t\t * @example\n\t\t\t * ```typescript\n\t\t\t * 'const a = body' // true\n\t\t\t * ```\n\t\t\t **/\n\t\t\tconst lastIndex = content.indexOf(' = ' + type)\n\n\t\t\tif (lastIndex + 3 + type.length !== content.length) break\n\n\t\t\tindex = lastIndex\n\t\t}\n\n\t\tconst part = content.slice(0, index)\n\t\t/**\n\t\t * aliased variable last character\n\t\t *\n\t\t * @example\n\t\t * ```typescript\n\t\t * const { hello } = body // } is the last character\n\t\t * ```\n\t\t **/\n\t\tlet variable = part.slice(part.lastIndexOf(' ') + 1)\n\n\t\t// Variable is using object destructuring, find the bracket pair\n\t\tif (variable === '}') {\n\t\t\tconst [start, end] = bracketPairRangeReverse(part)\n\n\t\t\taliases.push(content.slice(start, end))\n\n\t\t\tcontent = content.slice(index + 3 + type.length)\n\n\t\t\tcontinue\n\t\t}\n\n\t\t// Remove comma\n\t\twhile (variable.charCodeAt(0) === 44) variable = variable.slice(1)\n\t\twhile (variable.charCodeAt(0) === 9) variable = variable.slice(1)\n\n\t\taliases.push(variable)\n\t\tcontent = content.slice(index + 3 + type.length)\n\t}\n\n\tfor (const alias of aliases) {\n\t\tif (alias.charCodeAt(0) === 123) continue\n\n\t\tconst deepAlias = findAlias(alias, body)\n\t\tif (deepAlias.length > 0) aliases.push(...deepAlias)\n\t}\n\n\treturn aliases\n}\n\nexport const extractMainParameter = (parameter: string) => {\n\tif (!parameter) return\n\n\tconst hasComma = parameter.includes(',')\n\tif (!hasComma) {\n\t\t// This happens when spread operator is used as the only parameter\n\t\tif (parameter.includes('...'))\n\t\t\treturn parameter.slice(parameter.indexOf('...') + 3)\n\n\t\treturn parameter\n\t}\n\n\tconst spreadIndex = parameter.indexOf('...')\n\tif (spreadIndex === -1) return\n\n\t// Spread parameter is always the last parameter, no need for further checking\n\treturn parameter.slice(spreadIndex + 3).trimEnd()\n}\n\n/**\n * Analyze if context is mentioned in body\n */\nexport const inferBodyReference = (\n\tcode: string,\n\taliases: string[],\n\tinference: Sucrose.Inference\n) => {\n\tconst access = (type: string, alias: string) =>\n\t\tcode.includes(alias + '.' + type) ||\n\t\tcode.includes(alias + '[\"' + type + '\"]') ||\n\t\tcode.includes(alias + \"['\" + type + \"']\")\n\n\tfor (let alias of aliases) {\n\t\tif (alias.charCodeAt(0) === 123) {\n\t\t\talias = retrieveRootParamters(alias)\n\n\t\t\tif (!inference.query && alias.includes('query'))\n\t\t\t\tinference.query = true\n\n\t\t\tif (!inference.headers && alias.includes('headers'))\n\t\t\t\tinference.headers = true\n\n\t\t\tif (!inference.body && alias.includes('body')) inference.body = true\n\n\t\t\tif (!inference.cookie && alias.includes('cookie'))\n\t\t\t\tinference.cookie = true\n\n\t\t\tif (!inference.set && alias.includes('set')) inference.set = true\n\n\t\t\tcontinue\n\t\t}\n\n\t\t// ! Function is passed to another function, assume as all is accessed\n\t\tif (code.includes('(' + alias + ')')) {\n\t\t\tinference.query = true\n\t\t\tinference.headers = true\n\t\t\tinference.body = true\n\t\t\tinference.cookie = true\n\t\t\tinference.set = true\n\t\t\tinference.queries = []\n\t\t\tinference.unknownQueries = true\n\n\t\t\tbreak\n\t\t}\n\n\t\tif (!inference.query && access('query', alias)) inference.query = true\n\n\t\tif (inference.query)\n\t\t\twhile (true) {\n\t\t\t\tlet keyword = alias + '.'\n\t\t\t\tif (code.includes(keyword + 'query')) keyword = alias + '.query'\n\n\t\t\t\tlet isBracket = false\n\n\t\t\t\tlet start = code.indexOf(keyword)\n\t\t\t\tif (start === -1) {\n\t\t\t\t\tisBracket = true\n\t\t\t\t\tstart = code.indexOf(alias + '[\"')\n\t\t\t\t}\n\n\t\t\t\tif (start === -1) {\n\t\t\t\t\tisBracket = true\n\t\t\t\t\tstart = code.indexOf(alias + \"['\")\n\t\t\t\t}\n\n\t\t\t\tif (start === -1 && code.indexOf(alias + '[') !== -1) {\n\t\t\t\t\t// ! Query is accessed using dynamic key, skip static parsing\n\t\t\t\t\tinference.queries = []\n\t\t\t\t\tinference.unknownQueries = true\n\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tif (start !== -1) {\n\t\t\t\t\tlet end: number | undefined = isBracket\n\t\t\t\t\t\t? findEndQueryBracketIndex(\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\tcode,\n\t\t\t\t\t\t\t\tstart + keyword.length + 1\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: findEndIndex('', code, start + keyword.length + 1)\n\n\t\t\t\t\tif (end === -1) end = undefined\n\n\t\t\t\t\tconst index = start + alias.length + 1\n\t\t\t\t\tcode = code.slice(start + alias.length + 1)\n\t\t\t\t\tlet query = code.slice(0, end ? end - index : end).trimEnd()\n\n\t\t\t\t\t// Remove nested dot\n\t\t\t\t\twhile (start !== -1) {\n\t\t\t\t\t\tstart = query.indexOf('.')\n\n\t\t\t\t\t\tif (start !== -1) query = query.slice(start + 1)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove semi-colon\n\t\t\t\t\tif (query.charCodeAt(query.length - 1) === 59)\n\t\t\t\t\t\tquery = query.slice(0, -1)\n\n\t\t\t\t\t// Remove comma\n\t\t\t\t\tif (query.charCodeAt(query.length - 1) === 44)\n\t\t\t\t\t\tquery = query.slice(0, -1)\n\n\t\t\t\t\t// Remove closing square bracket\n\t\t\t\t\tif (query.charCodeAt(query.length - 1) === 93)\n\t\t\t\t\t\tquery = query.slice(0, -1)\n\n\t\t\t\t\t// Remove closing bracket\n\t\t\t\t\tif (query.charCodeAt(query.length - 1) === 41)\n\t\t\t\t\t\tquery = query.slice(0, -1)\n\n\t\t\t\t\tif (isBracket) query = query.replaceAll(/(\"|')/g, '')\n\n\t\t\t\t\tif (query && !inference.queries.includes(query)) {\n\t\t\t\t\t\tinference.queries.push(query)\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t\t}\n\n\t\tif (!inference.headers && access('headers', alias))\n\t\t\tinference.headers = true\n\n\t\tif (!inference.body && access('body', alias)) inference.body = true\n\n\t\tif (!inference.cookie && access('cookie', alias))\n\t\t\tinference.cookie = true\n\n\t\tif (!inference.set && access('set', alias)) inference.set = true\n\n\t\tif (\n\t\t\tinference.query &&\n\t\t\tinference.headers &&\n\t\t\tinference.body &&\n\t\t\tinference.cookie &&\n\t\t\tinference.set\n\t\t)\n\t\t\tbreak\n\t}\n\n\treturn aliases\n}\n\nexport const removeDefaultParameter = (parameter: string) => {\n\twhile (true) {\n\t\tconst index = parameter.indexOf('=')\n\t\tif (index === -1) break\n\n\t\tconst commaIndex = parameter.indexOf(',', index)\n\t\tconst bracketIndex = parameter.indexOf('}', index)\n\n\t\tconst end =\n\t\t\t[commaIndex, bracketIndex]\n\t\t\t\t.filter((i) => i > 0)\n\t\t\t\t.sort((a, b) => a - b)[0] || -1\n\n\t\tif (end === -1) {\n\t\t\tparameter = parameter.slice(0, index)\n\n\t\t\tbreak\n\t\t}\n\n\t\tparameter = parameter.slice(0, index) + parameter.slice(end)\n\t}\n\n\treturn parameter\n\t\t.split(',')\n\t\t.map((i) => i.trim())\n\t\t.join(', ')\n}\n\nexport const validateInferencedQueries = (queries: string[]) => {\n\tfor (const query of queries) {\n\t\tif (query.charCodeAt(0) === 123) return false\n\t\tif (query.indexOf(\"'\") !== -1) return false\n\t\tif (query.indexOf('\"') !== -1) return false\n\t\tif (query.indexOf('\\n') !== -1) return false\n\t\tif (query.indexOf('\\t') !== -1) return false\n\t}\n\n\treturn true\n}\n\n/**\n * Analyze if context is mentioned in body\n */\nexport const inferTraceBodyReference = (\n\tcode: string,\n\taliases: string[],\n\tinference: Sucrose.TraceInference\n) => {\n\tconst access = (type: string, alias: string) =>\n\t\tcode.includes(type + '.' + alias) ||\n\t\tcode.includes(type + '[\"' + alias + '\"]') ||\n\t\tcode.includes(type + \"['\" + alias + \"']\")\n\n\tfor (let alias of aliases) {\n\t\tif (alias.charCodeAt(0) === 123) {\n\t\t\talias = retrieveRootParamters(alias)\n\n\t\t\tif (!inference.request && alias.includes('request'))\n\t\t\t\tinference.request = true\n\n\t\t\tif (!inference.parse && alias.includes('parse'))\n\t\t\t\tinference.parse = true\n\n\t\t\tif (!inference.transform && alias.includes('transform'))\n\t\t\t\tinference.transform = true\n\n\t\t\tif (!inference.handle && alias.includes('handle'))\n\t\t\t\tinference.handle = true\n\n\t\t\tif (!inference.beforeHandle && alias.includes('beforeHandle'))\n\t\t\t\tinference.beforeHandle = true\n\n\t\t\tif (!inference.afterHandle && alias.includes('afterHandle'))\n\t\t\t\tinference.afterHandle = true\n\n\t\t\tif (!inference.error && alias.includes('error'))\n\t\t\t\tinference.error = true\n\n\t\t\tif (!inference.context && alias.includes('context'))\n\t\t\t\tinference.context = true\n\n\t\t\tif (!inference.store && alias.includes('store'))\n\t\t\t\tinference.store = true\n\n\t\t\tif (!inference.set && alias.includes('set')) inference.set = true\n\n\t\t\tcontinue\n\t\t}\n\n\t\t// ! Function is passed to another function, assume as all is accessed\n\t\tif (code.includes('(' + alias + ')')) {\n\t\t\tinference.request = true\n\t\t\tinference.parse = true\n\t\t\tinference.transform = true\n\t\t\tinference.handle = true\n\t\t\tinference.beforeHandle = true\n\t\t\tinference.afterHandle = true\n\t\t\tinference.error = true\n\t\t\tinference.context = true\n\t\t\tinference.store = true\n\t\t\tinference.set = true\n\n\t\t\tbreak\n\t\t}\n\n\t\tif (!inference.request && access('request', alias))\n\t\t\tinference.request = true\n\n\t\tif (!inference.parse && access('parse', alias)) inference.parse = true\n\n\t\tif (!inference.transform && access('transform', alias))\n\t\t\tinference.transform = true\n\n\t\tif (!inference.handle && access('handle', alias))\n\t\t\tinference.handle = true\n\n\t\tif (!inference.beforeHandle && access('beforeHandle', alias))\n\t\t\tinference.beforeHandle = true\n\n\t\tif (!inference.afterHandle && access('afterHandle', alias))\n\t\t\tinference.afterHandle = true\n\n\t\tif (!inference.error && access('error', alias)) inference.error = true\n\n\t\tif (!inference.context && access('context', alias))\n\t\t\tinference.context = true\n\n\t\tif (!inference.store && access('store', alias)) inference.store = true\n\n\t\tif (!inference.set && access('set', alias)) inference.set = true\n\n\t\tif (\n\t\t\tinference.request &&\n\t\t\tinference.parse &&\n\t\t\tinference.transform &&\n\t\t\tinference.handle &&\n\t\t\tinference.beforeHandle &&\n\t\t\tinference.afterHandle &&\n\t\t\tinference.error &&\n\t\t\tinference.context &&\n\t\t\tinference.store &&\n\t\t\tinference.set\n\t\t)\n\t\t\tbreak\n\t}\n\n\treturn aliases\n}\n\nexport const sucrose = (\n\tlifeCycle: Sucrose.LifeCycle,\n\tinference: Sucrose.Inference = {\n\t\tqueries: [],\n\t\tquery: false,\n\t\theaders: false,\n\t\tbody: false,\n\t\tcookie: false,\n\t\tset: false,\n\t\tunknownQueries: false\n\t}\n): Sucrose.Inference => {\n\tconst events = []\n\n\tif (lifeCycle.handler && typeof lifeCycle.handler === 'function')\n\t\tevents.push(lifeCycle.handler)\n\n\tif (lifeCycle.beforeHandle?.length) events.push(...lifeCycle.beforeHandle)\n\tif (lifeCycle.parse?.length) events.push(...lifeCycle.parse)\n\tif (lifeCycle.error?.length) events.push(...lifeCycle.error)\n\tif (lifeCycle.transform?.length) events.push(...lifeCycle.transform)\n\tif (lifeCycle.afterHandle?.length) events.push(...lifeCycle.afterHandle)\n\tif (lifeCycle.mapResponse?.length) events.push(...lifeCycle.mapResponse)\n\tif (lifeCycle.request?.length) events.push(...lifeCycle.request)\n\tif (lifeCycle.onResponse?.length) events.push(...lifeCycle.onResponse)\n\n\tfor (const event of events) {\n\t\tconst [parameter, body] = separateFunction(event.toString())\n\n\t\tconst rootParameters = findParameterReference(parameter, inference)\n\t\tconst mainParameter = extractMainParameter(rootParameters)\n\n\t\tif (mainParameter) {\n\t\t\tconst aliases = findAlias(mainParameter, body)\n\t\t\taliases.splice(0, -1, mainParameter)\n\n\t\t\tinferBodyReference(body, aliases, inference)\n\t\t}\n\n\t\tif (inference.query) {\n\t\t\tinferBodyReference(body, ['query'], inference)\n\n\t\t\tconst queryIndex = parameter.indexOf('query: {')\n\n\t\t\tif (queryIndex !== -1) {\n\t\t\t\tconst part = parameter.slice(queryIndex + 7)\n\t\t\t\tconst [start, end] = bracketPairRange(part)\n\n\t\t\t\tconst queryBracket = removeDefaultParameter(\n\t\t\t\t\tpart.slice(start, end)\n\t\t\t\t)\n\n\t\t\t\tfor (let query of queryBracket.slice(1, -1).split(',')) {\n\t\t\t\t\tconst index = query.indexOf(':')\n\n\t\t\t\t\t// Remove variable name casting: { a: b } should be b\n\t\t\t\t\tif (index !== -1) query = query.slice(0, index)\n\n\t\t\t\t\tquery = query.trim()\n\n\t\t\t\t\tif (query && !inference.queries.includes(query))\n\t\t\t\t\t\tinference.queries.push(query.trim())\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tinference.query &&\n\t\t\tinference.headers &&\n\t\t\tinference.body &&\n\t\t\tinference.cookie &&\n\t\t\tinference.set\n\t\t)\n\t\t\tbreak\n\t}\n\n\tif (!validateInferencedQueries(inference.queries)) {\n\t\tinference.unknownQueries = true\n\t\tinference.queries = []\n\t}\n\n\treturn inference\n}\n\n/**\n * Analyze if context is mentioned in body in a trace\n */\nexport const sucroseTrace = (\n\ttraces: TraceHandler[],\n\tinference: Sucrose.TraceInference = {\n\t\trequest: false,\n\t\tparse: false,\n\t\ttransform: false,\n\t\thandle: false,\n\t\tbeforeHandle: false,\n\t\tafterHandle: false,\n\t\terror: false,\n\t\tcontext: false,\n\t\tstore: false,\n\t\tset: false\n\t}\n) => {\n\tfor (const handler of traces) {\n\t\tconst [parameter, body] = separateFunction(handler.toString())\n\n\t\tconst rootParameters = findTraceParameterReference(parameter, inference)\n\t\tconst mainParameter = extractMainParameter(rootParameters)\n\n\t\tif (mainParameter) {\n\t\t\tconst aliases = findAlias(mainParameter, body)\n\t\t\taliases.splice(0, -1, mainParameter)\n\n\t\t\tinferTraceBodyReference(body, aliases, inference)\n\n\t\t\tcontinue\n\t\t}\n\n\t\tif (\n\t\t\tinference.request &&\n\t\t\tinference.parse &&\n\t\t\tinference.transform &&\n\t\t\tinference.handle &&\n\t\t\tinference.beforeHandle &&\n\t\t\tinference.afterHandle &&\n\t\t\tinference.error &&\n\t\t\tinference.context &&\n\t\t\tinference.store &&\n\t\t\tinference.set\n\t\t)\n\t\t\tbreak\n\t}\n\n\treturn inference\n}\n",
  "import type { TSchema } from '@sinclair/typebox'\nimport { Value } from '@sinclair/typebox/value'\nimport type { TypeCheck } from '@sinclair/typebox/compiler'\n\nimport { StatusMap, InvertedStatusMap } from './utils'\n\n// ? Cloudflare worker support\nconst env =\n\ttypeof Bun !== 'undefined'\n\t\t? Bun.env\n\t\t: typeof process !== 'undefined'\n\t\t? process?.env\n\t\t: undefined\n\nexport const ERROR_CODE = Symbol('ElysiaErrorCode')\nexport const ELYSIA_RESPONSE = Symbol('ElysiaResponse')\nexport type ELYSIA_RESPONSE = typeof ELYSIA_RESPONSE\n\nexport const isProduction = (env?.NODE_ENV ?? env?.ENV) === 'production'\n\nexport type ElysiaErrors =\n\t| InternalServerError\n\t| NotFoundError\n\t| ParseError\n\t| ValidationError\n\t| InvalidCookieSignature\n\nexport const error = <\n\tconst Code extends number | keyof StatusMap,\n\tconst T = Code extends keyof InvertedStatusMap\n\t\t? InvertedStatusMap[Code]\n\t\t: Code,\n\tconst Status extends number = Code extends keyof StatusMap\n\t\t? StatusMap[Code]\n\t\t: Code\n>(\n\tcode: Code,\n\tresponse?: T\n): {\n\t[ELYSIA_RESPONSE]: Status\n\tresponse: T\n\t_type: {\n\t\t[ERROR_CODE in Status]: T\n\t}\n} =>\n\t({\n\t\t// @ts-expect-error\n\t\t[ELYSIA_RESPONSE]: StatusMap[code] ?? code,\n\t\tresponse:\n\t\t\tresponse ??\n\t\t\t(code in InvertedStatusMap\n\t\t\t\t? // @ts-expect-error Always correct\n\t\t\t\t  InvertedStatusMap[code]\n\t\t\t\t: code),\n\t\t_type: undefined as any\n\t} as const)\n\nexport class InternalServerError extends Error {\n\tcode = 'INTERNAL_SERVER_ERROR'\n\tstatus = 500\n\n\tconstructor(message?: string) {\n\t\tsuper(message ?? 'INTERNAL_SERVER_ERROR')\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tcode = 'NOT_FOUND'\n\tstatus = 404\n\n\tconstructor(message?: string) {\n\t\tsuper(message ?? 'NOT_FOUND')\n\t}\n}\n\nexport class ParseError extends Error {\n\tcode = 'PARSE'\n\tstatus = 400\n\n\tconstructor(message?: string, public body?: unknown) {\n\t\tsuper(message ?? 'PARSE')\n\t}\n}\n\nexport class InvalidCookieSignature extends Error {\n\tcode = 'INVALID_COOKIE_SIGNATURE'\n\tstatus = 400\n\n\tconstructor(public key: string, message?: string) {\n\t\tsuper(message ?? `\"${key}\" has invalid cookie signature`)\n\t}\n}\n\nexport class ValidationError extends Error {\n\tcode = 'VALIDATION'\n\tstatus = 422\n\n\tconstructor(\n\t\tpublic type: string,\n\t\tpublic validator: TSchema | TypeCheck<any>,\n\t\tpublic value: unknown\n\t) {\n\t\t// @ts-expect-error\n\t\tif (typeof value === 'object' && ELYSIA_RESPONSE in value)\n\t\t\t// @ts-expect-error\n\t\t\tvalue = value.response\n\n\t\tconst error = isProduction\n\t\t\t? undefined\n\t\t\t: 'Errors' in validator\n\t\t\t? validator.Errors(value).First()\n\t\t\t: Value.Errors(validator, value).First()\n\n\t\tconst customError = error?.schema.error\n\t\t\t? typeof error.schema.error === 'function'\n\t\t\t\t? error.schema.error(type, validator, value)\n\t\t\t\t: error.schema.error\n\t\t\t: undefined\n\n\t\tconst accessor = error?.path || 'root'\n\t\tlet message = ''\n\n\t\tif (customError) {\n\t\t\tmessage =\n\t\t\t\ttypeof customError === 'object'\n\t\t\t\t\t? JSON.stringify(customError)\n\t\t\t\t\t: customError + ''\n\t\t} else if (isProduction) {\n\t\t\tmessage = JSON.stringify({\n\t\t\t\ttype: \"validation\",\n\t\t\t\ton: type,\n\t\t\t\tmessage: error?.message,\n\t\t\t\tfound: value\n\t\t\t})\n\t\t} else {\n\t\t\t// @ts-ignore private field\n\t\t\tconst schema = validator?.schema ?? validator\n\t\t\tconst errors =\n\t\t\t\t'Errors' in validator\n\t\t\t\t\t? [...validator.Errors(value)]\n\t\t\t\t\t: [...Value.Errors(validator, value)]\n\n\t\t\t\tlet expected\n\n\t\t\t\ttry {\n\t\t\t\t\texpected = Value.Create(schema)\n\t\t\t\t} catch (error) {\n\t\t\t\t\texpected = {\n\t\t\t\t\t\ttype: 'Could not create expected value',\n\t\t\t\t\t\t// @ts-expect-error\n\t\t\t\t\t\tmessage: error?.message,\n\t\t\t\t\t\terror\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\tmessage = JSON.stringify(\n\t\t\t\t{\n\t\t\t\t\ttype: \"validation\",\n\t\t\t\t\ton: type,\n\t\t\t\t\tproperty: accessor,\n\t\t\t\t\tmessage: error?.message,\n\t\t\t\t\texpected,\n\t\t\t\t\tfound: value,\n\t\t\t\t\terrors\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t\t2\n\t\t\t)\n\t\t}\n\n\t\tsuper(message)\n\n\t\tObject.setPrototypeOf(this, ValidationError.prototype)\n\t}\n\n\tget all() {\n\t\treturn [...this.validator.Errors(this.value)]\n\t}\n\n\tstatic simplifyModel(validator: TSchema | TypeCheck<any>) {\n\t\t// @ts-ignore\n\t\tconst model = 'schema' in validator ? validator.schema : validator\n\n\t\ttry {\n\t\t\treturn Value.Create(model)\n\t\t} catch {\n\t\t\treturn model\n\t\t}\n\t}\n\n\tget model() {\n\t\treturn ValidationError.simplifyModel(this.validator)\n\t}\n\n\ttoResponse(headers?: Record<string, any>) {\n\t\treturn new Response(this.message, {\n\t\t\tstatus: 400,\n\t\t\theaders: {\n\t\t\t\t...headers,\n\t\t\t\t'content-type': 'application/json'\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "import { Kind, TSchema } from '@sinclair/typebox'\nimport { Value } from '@sinclair/typebox/value'\nimport { TypeCheck, TypeCompiler } from '@sinclair/typebox/compiler'\n\nimport { t } from '.'\nimport { isNotEmpty } from './handler'\n\nimport type {\n\tLifeCycleStore,\n\tLocalHook,\n\tMaybeArray,\n\tInputSchema,\n\tBaseMacro,\n\tElysiaFn,\n\tLifeCycleType\n} from './types'\nimport type { CookieOptions } from './cookies'\n\nexport const replaceUrlPath = (url: string, pathname: string) => {\n\tconst urlObject = new URL(url)\n\turlObject.pathname = pathname\n\treturn urlObject.toString()\n}\n\nconst isClass = (v: Object) =>\n\t(typeof v === 'function' && /^\\s*class\\s+/.test(v.toString())) ||\n\t// Handle import * as Sentry from '@sentry/bun'\n\t// This also handle [object Date], [object Array]\n\t// and FFI value like [object Prisma]\n\tv.toString().startsWith('[object ') ||\n\t// If object prototype is not pure, then probably a class-like object\n\tisNotEmpty(Object.getPrototypeOf(v))\n\nconst isObject = (item: any): item is Object =>\n\titem && typeof item === 'object' && !Array.isArray(item)\n\nexport const mergeDeep = <\n\tA extends Record<string, any>,\n\tB extends Record<string, any>\n>(\n\ttarget: A,\n\tsource: B,\n\t{\n\t\tskipKeys\n\t}: {\n\t\tskipKeys?: string[]\n\t} = {}\n): A & B => {\n\tif (isObject(target) && isObject(source))\n\t\tfor (const [key, value] of Object.entries(source)) {\n\t\t\tif (skipKeys?.includes(key)) continue\n\n\t\t\tif (!isObject(value) || !(key in target) || isClass(value)) {\n\t\t\t\ttarget[key as keyof typeof target] = value\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\ttarget[key as keyof typeof target] = mergeDeep(\n\t\t\t\t(target as any)[key] as any,\n\t\t\t\tvalue\n\t\t\t)\n\t\t}\n\n\treturn target as A & B\n}\nexport const mergeCookie = <const A extends Object, const B extends Object>(\n\ta: A,\n\tb: B\n): A & B => {\n\t// @ts-ignore\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst { properties: _, ...target } = a ?? {}\n\n\t// @ts-ignore\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst { properties: __, ...source } = b ?? {}\n\n\treturn mergeDeep(target, source) as A & B\n}\n\nexport const mergeObjectArray = <T extends ElysiaFn>(\n\ta: T | T[] = [],\n\tb: T | T[] = []\n): T[] => {\n\tif (!a) return []\n\n\t// ! Must copy to remove side-effect\n\tconst array = <T[]>[]\n\tconst checksums = <(number | undefined)[]>[]\n\n\tif (!Array.isArray(a)) a = [a]\n\tif (!Array.isArray(b)) b = [b]\n\n\tfor (const item of a) {\n\t\tarray.push(item)\n\n\t\tif (item.$elysiaChecksum) checksums.push(item.$elysiaChecksum)\n\t}\n\n\tfor (const item of b)\n\t\tif (!checksums.includes(item?.$elysiaChecksum)) array.push(item)\n\n\treturn array\n}\n\nexport const primitiveHooks = [\n\t'start',\n\t'request',\n\t'parse',\n\t'transform',\n\t'resolve',\n\t'beforeHandle',\n\t'afterHandle',\n\t'onResponse',\n\t'mapResponse',\n\t'trace',\n\t'error',\n\t'stop',\n\t'body',\n\t'headers',\n\t'params',\n\t'query',\n\t'response',\n\t'type',\n\t'detail'\n] as const\n\nconst primitiveHookMap = primitiveHooks.reduce(\n\t(acc, x) => ((acc[x] = true), acc),\n\t{} as Record<string, boolean>\n)\n\nexport const mergeHook = (\n\ta?: LocalHook<any, any, any, any, any, any, any> | LifeCycleStore,\n\tb?: LocalHook<any, any, any, any, any, any, any>\n): LifeCycleStore => {\n\t// In case if merging union is need\n\t// const customAStore: Record<string, unknown> = {}\n\t// const customBStore: Record<string, unknown> = {}\n\n\t// for (const [key, value] of Object.entries(a)) {\n\t// \tif (primitiveHooks.includes(key as any)) continue\n\n\t// \tcustomAStore[key] = value\n\t// }\n\n\t// for (const [key, value] of Object.entries(b)) {\n\t// \tif (primitiveHooks.includes(key as any)) continue\n\n\t// \tcustomBStore[key] = value\n\t// }\n\n\t// const unioned = Object.keys(customAStore).filter((x) =>\n\t// \tObject.keys(customBStore).includes(x)\n\t// )\n\n\t// // Must provide empty object to prevent reference side-effect\n\t// const customStore = Object.assign({}, customAStore, customBStore)\n\n\t// for (const union of unioned)\n\t// \tcustomStore[union] = mergeObjectArray(\n\t// \t\tcustomAStore[union],\n\t// \t\tcustomBStore[union]\n\t// \t)\n\n\treturn {\n\t\t...a,\n\t\t...b,\n\t\t// Merge local hook first\n\t\t// @ts-ignore\n\t\tbody: b?.body ?? a?.body,\n\t\t// @ts-ignore\n\t\theaders: b?.headers ?? a?.headers,\n\t\t// @ts-ignore\n\t\tparams: b?.params ?? a?.params,\n\t\t// @ts-ignore\n\t\tquery: b?.query ?? a?.query,\n\t\t// @ts-ignore\n\t\tresponse: b?.response ?? a?.response,\n\t\ttype: a?.type || b?.type,\n\t\tdetail: mergeDeep(\n\t\t\t// @ts-ignore\n\t\t\tb?.detail ?? {},\n\t\t\t// @ts-ignore\n\t\t\ta?.detail ?? {}\n\t\t),\n\t\tparse: mergeObjectArray(a?.parse as any, b?.parse),\n\t\ttransform: mergeObjectArray(a?.transform, b?.transform),\n\t\tbeforeHandle: mergeObjectArray(a?.beforeHandle, b?.beforeHandle),\n\t\tafterHandle: mergeObjectArray(a?.afterHandle, b?.afterHandle),\n\t\tonResponse: mergeObjectArray(a?.onResponse, b?.onResponse) as any,\n\t\tmapResponse: mergeObjectArray(a?.mapResponse, b?.mapResponse) as any,\n\t\ttrace: mergeObjectArray(a?.trace, b?.trace) as any,\n\t\terror: mergeObjectArray(a?.error, b?.error)\n\t}\n}\n\nexport const getSchemaValidator = (\n\ts: TSchema | string | undefined,\n\t{\n\t\tmodels = {},\n\t\tadditionalProperties = false,\n\t\tdynamic = false\n\t}: {\n\t\tmodels?: Record<string, TSchema>\n\t\tadditionalProperties?: boolean\n\t\tdynamic?: boolean\n\t}\n) => {\n\tif (!s) return\n\tif (typeof s === 'string' && !(s in models)) return\n\n\tconst schema: TSchema = typeof s === 'string' ? models[s] : s\n\n\t// @ts-ignore\n\tif (schema.type === 'object' && 'additionalProperties' in schema === false)\n\t\tschema.additionalProperties = additionalProperties\n\n\tif (dynamic)\n\t\treturn {\n\t\t\tschema,\n\t\t\treferences: '',\n\t\t\tcheckFunc: () => {},\n\t\t\tcode: '',\n\t\t\tCheck: (value: unknown) => Value.Check(schema, value),\n\t\t\tErrors: (value: unknown) => Value.Errors(schema, value),\n\t\t\tCode: () => ''\n\t\t} as unknown as TypeCheck<TSchema>\n\n\treturn TypeCompiler.Compile(schema, Object.values(models))\n}\n\nexport const getResponseSchemaValidator = (\n\ts: InputSchema['response'] | undefined,\n\t{\n\t\tmodels = {},\n\t\tadditionalProperties = false,\n\t\tdynamic = false\n\t}: {\n\t\tmodels?: Record<string, TSchema>\n\t\tadditionalProperties?: boolean\n\t\tdynamic?: boolean\n\t}\n): Record<number, TypeCheck<any>> | undefined => {\n\tif (!s) return\n\tif (typeof s === 'string' && !(s in models)) return\n\n\tconst maybeSchemaOrRecord = typeof s === 'string' ? models[s] : s\n\n\tconst compile = (schema: TSchema, references?: TSchema[]) => {\n\t\tif (dynamic)\n\t\t\treturn {\n\t\t\t\tschema,\n\t\t\t\treferences: '',\n\t\t\t\tcheckFunc: () => {},\n\t\t\t\tcode: '',\n\t\t\t\tCheck: (value: unknown) => Value.Check(schema, value),\n\t\t\t\tErrors: (value: unknown) => Value.Errors(schema, value),\n\t\t\t\tCode: () => ''\n\t\t\t} as unknown as TypeCheck<TSchema>\n\n\t\treturn TypeCompiler.Compile(schema, references)\n\t}\n\n\tif (Kind in maybeSchemaOrRecord) {\n\t\tif ('additionalProperties' in maybeSchemaOrRecord === false)\n\t\t\tmaybeSchemaOrRecord.additionalProperties = additionalProperties\n\n\t\treturn {\n\t\t\t200: compile(maybeSchemaOrRecord, Object.values(models))\n\t\t}\n\t}\n\n\tconst record: Record<number, TypeCheck<any>> = {}\n\n\tObject.keys(maybeSchemaOrRecord).forEach((status): TSchema | undefined => {\n\t\tconst maybeNameOrSchema = maybeSchemaOrRecord[+status]\n\n\t\tif (typeof maybeNameOrSchema === 'string') {\n\t\t\tif (maybeNameOrSchema in models) {\n\t\t\t\tconst schema = models[maybeNameOrSchema]\n\t\t\t\tschema.type === 'object' &&\n\t\t\t\t\t'additionalProperties' in schema === false\n\n\t\t\t\t// Inherits model maybe already compiled\n\t\t\t\trecord[+status] =\n\t\t\t\t\tKind in schema\n\t\t\t\t\t\t? compile(schema, Object.values(models))\n\t\t\t\t\t\t: schema\n\t\t\t}\n\n\t\t\treturn undefined\n\t\t}\n\n\t\tif (\n\t\t\tmaybeNameOrSchema.type === 'object' &&\n\t\t\t'additionalProperties' in maybeNameOrSchema === false\n\t\t)\n\t\t\tmaybeNameOrSchema.additionalProperties = additionalProperties\n\n\t\t// Inherits model maybe already compiled\n\t\trecord[+status] =\n\t\t\tKind in maybeNameOrSchema\n\t\t\t\t? compile(maybeNameOrSchema, Object.values(models))\n\t\t\t\t: maybeNameOrSchema\n\t})\n\n\treturn record\n}\n\nconst isBun = typeof Bun !== 'undefined'\nconst hasHash = isBun && typeof Bun.hash === 'function'\n\n// https://stackoverflow.com/a/52171480\nexport const checksum = (s: string) => {\n\tif (hasHash) return Bun.hash(s) as number\n\n\tlet h = 9\n\n\tfor (let i = 0; i < s.length; ) h = Math.imul(h ^ s.charCodeAt(i++), 9 ** 9)\n\n\treturn (h = h ^ (h >>> 9))\n}\n\nexport const getCookieValidator = ({\n\tvalidator,\n\tdefaultConfig = {},\n\tconfig,\n\tdynamic,\n\tmodels\n}: {\n\tvalidator: TSchema | string | undefined\n\tdefaultConfig: CookieOptions | undefined\n\tconfig: CookieOptions\n\tdynamic: boolean\n\tmodels: Record<string, TSchema> | undefined\n}) => {\n\tlet cookieValidator = getSchemaValidator(validator, {\n\t\tdynamic,\n\t\tmodels,\n\t\tadditionalProperties: true\n\t})\n\n\tif (isNotEmpty(defaultConfig)) {\n\t\tif (cookieValidator) {\n\t\t\t// @ts-expect-error private\n\t\t\tcookieValidator.schema = mergeCookie(\n\t\t\t\t// @ts-expect-error private\n\t\t\t\tcookieValidator.schema,\n\t\t\t\tconfig\n\t\t\t)\n\t\t} else {\n\t\t\tcookieValidator = getSchemaValidator(t.Cookie({}, defaultConfig), {\n\t\t\t\tdynamic,\n\t\t\t\tmodels,\n\t\t\t\tadditionalProperties: true\n\t\t\t})\n\t\t}\n\t}\n\n\treturn cookieValidator\n}\n\nexport const mergeLifeCycle = (\n\ta: LifeCycleStore,\n\tb: LifeCycleStore | LocalHook<any, any, any, any, any, any, any>,\n\tchecksum?: number\n): LifeCycleStore => {\n\tconst injectChecksum = (x: MaybeArray<ElysiaFn> | undefined) => {\n\t\tif (!x) return\n\n\t\tif (!Array.isArray(x)) {\n\t\t\t// ? clone fn is required to prevent side-effect from changing hookType\n\t\t\tconst fn = x\n\n\t\t\tif (checksum && !fn.$elysiaChecksum) fn.$elysiaChecksum = checksum\n\t\t\tif (fn.$elysiaHookType === 'scoped') fn.$elysiaHookType = 'local'\n\n\t\t\treturn fn\n\t\t}\n\n\t\t// ? clone fns is required to prevent side-effect from changing hookType\n\t\tconst fns = [...x]\n\n\t\tfor (const fn of fns) {\n\t\t\tif (checksum && !fn.$elysiaChecksum) fn.$elysiaChecksum = checksum\n\n\t\t\tif (fn.$elysiaHookType === 'scoped') fn.$elysiaHookType = 'local'\n\t\t}\n\n\t\treturn fns\n\t}\n\n\treturn {\n\t\t...a,\n\t\t...b,\n\t\tstart: mergeObjectArray(a.start, injectChecksum(b?.start)),\n\t\trequest: mergeObjectArray(a.request, injectChecksum(b?.request)),\n\t\tparse: mergeObjectArray(a.parse, injectChecksum(b?.parse)),\n\t\ttransform: mergeObjectArray(a.transform, injectChecksum(b?.transform)),\n\t\tbeforeHandle: mergeObjectArray(\n\t\t\ta.beforeHandle,\n\t\t\tinjectChecksum(b?.beforeHandle)\n\t\t),\n\t\tafterHandle: mergeObjectArray(\n\t\t\ta.afterHandle,\n\t\t\tinjectChecksum(b?.afterHandle)\n\t\t),\n\t\tmapResponse: mergeObjectArray(\n\t\t\ta.mapResponse,\n\t\t\tinjectChecksum(b?.mapResponse)\n\t\t),\n\t\tonResponse: mergeObjectArray(\n\t\t\ta.onResponse,\n\t\t\tinjectChecksum(b?.onResponse)\n\t\t),\n\t\t// Already merged on Elysia._use, also logic is more complicated, can't directly merge\n\t\ttrace: a.trace,\n\t\terror: mergeObjectArray(a.error, injectChecksum(b?.error)),\n\t\tstop: mergeObjectArray(a.stop, injectChecksum(b?.stop))\n\t}\n}\n\nexport const asHookType = <T extends MaybeArray<ElysiaFn> | undefined>(\n\tfn: T,\n\tinject: LifeCycleType,\n\t{ skipIfHasType = false }: { skipIfHasType?: boolean } = {}\n): T => {\n\tif (!fn) return fn\n\n\tif (typeof fn === 'function') {\n\t\tif (skipIfHasType) fn.$elysiaHookType ??= inject\n\t\telse fn.$elysiaHookType = inject\n\n\t\treturn fn\n\t}\n\n\tif (!Array.isArray(fn)) return fn\n\n\tfor (const x of fn)\n\t\tif (skipIfHasType) x.$elysiaHookType ??= inject\n\t\telse x.$elysiaHookType = inject\n\n\treturn fn\n}\n\nconst filterGlobal = <T extends MaybeArray<ElysiaFn> | undefined>(\n\tfn: T\n): T | undefined => {\n\tif (!fn) return fn\n\n\tif (typeof fn === 'function')\n\t\tswitch (fn.$elysiaHookType) {\n\t\t\tcase 'global':\n\t\t\tcase 'scoped':\n\t\t\t\treturn fn\n\n\t\t\tdefault:\n\t\t\t\treturn undefined\n\t\t}\n\n\tif (!Array.isArray(fn)) return <any>[]\n\n\tconst array = <any>[]\n\n\tfor (const x of fn)\n\t\tswitch (x.$elysiaHookType) {\n\t\t\tcase 'global':\n\t\t\tcase 'scoped':\n\t\t\t\tarray.push(x)\n\t\t\t\tbreak\n\t\t}\n\n\treturn array as T\n}\n\nexport const filterGlobalHook = (\n\thook: LocalHook<any, any, any, any, any, any, any>\n): LocalHook<any, any, any, any, any, any, any> => {\n\treturn {\n\t\t// rest is validator\n\t\t...hook,\n\t\ttype: hook?.type,\n\t\tdetail: hook?.detail,\n\t\tparse: filterGlobal(hook?.parse),\n\t\ttransform: filterGlobal(hook?.transform),\n\t\tbeforeHandle: filterGlobal(hook?.beforeHandle),\n\t\tafterHandle: filterGlobal(hook?.afterHandle),\n\t\tonResponse: filterGlobal(hook?.onResponse),\n\t\terror: filterGlobal(hook?.error),\n\t\tmapResponse: filterGlobal(hook?.mapResponse)\n\t} as LocalHook<any, any, any, any, any, any, any>\n}\n\nexport const StatusMap = {\n\tContinue: 100,\n\t'Switching Protocols': 101,\n\tProcessing: 102,\n\t'Early Hints': 103,\n\tOK: 200,\n\tCreated: 201,\n\tAccepted: 202,\n\t'Non-Authoritative Information': 203,\n\t'No Content': 204,\n\t'Reset Content': 205,\n\t'Partial Content': 206,\n\t'Multi-Status': 207,\n\t'Already Reported': 208,\n\t'Multiple Choices': 300,\n\t'Moved Permanently': 301,\n\tFound: 302,\n\t'See Other': 303,\n\t'Not Modified': 304,\n\t'Temporary Redirect': 307,\n\t'Permanent Redirect': 308,\n\t'Bad Request': 400,\n\tUnauthorized: 401,\n\t'Payment Required': 402,\n\tForbidden: 403,\n\t'Not Found': 404,\n\t'Method Not Allowed': 405,\n\t'Not Acceptable': 406,\n\t'Proxy Authentication Required': 407,\n\t'Request Timeout': 408,\n\tConflict: 409,\n\tGone: 410,\n\t'Length Required': 411,\n\t'Precondition Failed': 412,\n\t'Payload Too Large': 413,\n\t'URI Too Long': 414,\n\t'Unsupported Media Type': 415,\n\t'Range Not Satisfiable': 416,\n\t'Expectation Failed': 417,\n\t\"I'm a teapot\": 418,\n\t'Misdirected Request': 421,\n\t'Unprocessable Content': 422,\n\tLocked: 423,\n\t'Failed Dependency': 424,\n\t'Too Early': 425,\n\t'Upgrade Required': 426,\n\t'Precondition Required': 428,\n\t'Too Many Requests': 429,\n\t'Request Header Fields Too Large': 431,\n\t'Unavailable For Legal Reasons': 451,\n\t'Internal Server Error': 500,\n\t'Not Implemented': 501,\n\t'Bad Gateway': 502,\n\t'Service Unavailable': 503,\n\t'Gateway Timeout': 504,\n\t'HTTP Version Not Supported': 505,\n\t'Variant Also Negotiates': 506,\n\t'Insufficient Storage': 507,\n\t'Loop Detected': 508,\n\t'Not Extended': 510,\n\t'Network Authentication Required': 511\n} as const\n\nexport const InvertedStatusMap = Object.fromEntries(\n\tObject.entries(StatusMap).map(([k, v]) => [v, k])\n) as {\n\t[K in keyof StatusMap as StatusMap[K]]: K\n}\n\nexport type StatusMap = typeof StatusMap\nexport type InvertedStatusMap = typeof InvertedStatusMap\n\nfunction removeTrailingEquals(digest: string): string {\n\tlet trimmedDigest = digest\n\twhile (trimmedDigest.endsWith('=')) {\n\t\ttrimmedDigest = trimmedDigest.slice(0, -1)\n\t}\n\treturn trimmedDigest\n}\n\nconst encoder = new TextEncoder()\n\nexport const signCookie = async (val: string, secret: string | null) => {\n\tif (typeof val !== 'string')\n\t\tthrow new TypeError('Cookie value must be provided as a string.')\n\n\tif (secret === null) throw new TypeError('Secret key must be provided.')\n\n\tconst secretKey = await crypto.subtle.importKey(\n\t\t'raw',\n\t\tencoder.encode(secret),\n\t\t{ name: 'HMAC', hash: 'SHA-256' },\n\t\tfalse,\n\t\t['sign']\n\t)\n\tconst hmacBuffer = await crypto.subtle.sign(\n\t\t'HMAC',\n\t\tsecretKey,\n\t\tencoder.encode(val)\n\t)\n\n\treturn (\n\t\tval +\n\t\t'.' +\n\t\tremoveTrailingEquals(Buffer.from(hmacBuffer).toString('base64'))\n\t)\n}\n\nexport const unsignCookie = async (input: string, secret: string | null) => {\n\tif (typeof input !== 'string')\n\t\tthrow new TypeError('Signed cookie string must be provided.')\n\n\tif (null === secret) throw new TypeError('Secret key must be provided.')\n\n\tconst tentativeValue = input.slice(0, input.lastIndexOf('.'))\n\tconst expectedInput = await signCookie(tentativeValue, secret)\n\n\treturn expectedInput === input ? tentativeValue : false\n}\n\nexport const traceBackMacro = (\n\textension: unknown,\n\tproperty: Record<string, unknown>,\n\thooks = property\n) => {\n\tif (!extension || typeof extension !== 'object' || !property) return\n\n\tfor (const [key, value] of Object.entries(property)) {\n\t\tif (key in primitiveHookMap || !(key in extension)) continue\n\n\t\tconst v = extension[\n\t\t\tkey as unknown as keyof typeof extension\n\t\t] as BaseMacro[string]\n\n\t\tif (typeof v === 'function') {\n\t\t\tv(value)\n\t\t} else if (typeof v === 'object')\n\t\t\ttraceBackMacro(v as BaseMacro, value as any, hooks)\n\t}\n}\n\nexport const createMacroManager =\n\t({\n\t\tglobalHook,\n\t\tlocalHook\n\t}: {\n\t\tglobalHook: LifeCycleStore\n\t\tlocalHook: LocalHook<any, any, any, any, any, any, any>\n\t}) =>\n\t(stackName: keyof LifeCycleStore) =>\n\t(\n\t\ttype:\n\t\t\t| {\n\t\t\t\t\tinsert?: 'before' | 'after'\n\t\t\t\t\tstack?: 'global' | 'local'\n\t\t\t  }\n\t\t\t| MaybeArray<Function>,\n\t\tfn?: MaybeArray<Function>\n\t) => {\n\t\tif (typeof type === 'function' || Array.isArray(type)) {\n\t\t\tif (!localHook[stackName]) localHook[stackName] = []\n\t\t\tif (typeof localHook[stackName] === 'function')\n\t\t\t\tlocalHook[stackName] = [localHook[stackName]]\n\n\t\t\tif (Array.isArray(type))\n\t\t\t\tlocalHook[stackName] = (\n\t\t\t\t\tlocalHook[stackName] as unknown[]\n\t\t\t\t).concat(type) as any\n\t\t\telse localHook[stackName].push(type)\n\n\t\t\treturn\n\t\t}\n\n\t\tconst { insert = 'after', stack = 'local' } = type\n\n\t\tif (stack === 'global') {\n\t\t\tif (!Array.isArray(fn)) {\n\t\t\t\tif (insert === 'before') {\n\t\t\t\t\t;(globalHook[stackName] as any[]).unshift(fn)\n\t\t\t\t} else {\n\t\t\t\t\t;(globalHook[stackName] as any[]).push(fn)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (insert === 'before') {\n\t\t\t\t\tglobalHook[stackName] = fn.concat(\n\t\t\t\t\t\tglobalHook[stackName] as any\n\t\t\t\t\t) as any\n\t\t\t\t} else {\n\t\t\t\t\tglobalHook[stackName] = (\n\t\t\t\t\t\tglobalHook[stackName] as any[]\n\t\t\t\t\t).concat(fn)\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (!localHook[stackName]) localHook[stackName] = []\n\t\t\tif (typeof localHook[stackName] === 'function')\n\t\t\t\tlocalHook[stackName] = [localHook[stackName]]\n\n\t\t\tif (!Array.isArray(fn)) {\n\t\t\t\tif (insert === 'before') {\n\t\t\t\t\t;(localHook[stackName] as any[]).unshift(fn)\n\t\t\t\t} else {\n\t\t\t\t\t;(localHook[stackName] as any[]).push(fn)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (insert === 'before') {\n\t\t\t\t\tlocalHook[stackName] = fn.concat(localHook[stackName])\n\t\t\t\t} else {\n\t\t\t\t\tlocalHook[stackName] = localHook[stackName].concat(fn)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\nexport const isNumericString = (message: string): boolean => {\n\tif (message.length < 16)\n\t\treturn message.trim().length !== 0 && !Number.isNaN(Number(message))\n\n\t// if 16 digit but less then 9,007,199,254,740,991 then can be parsed\n\tif (message.length === 16) {\n\t\tconst numVal = Number(message)\n\t\tif (numVal.toString() === message)\n\t\t\treturn message.trim().length !== 0 && !Number.isNaN(numVal)\n\t}\n\n\treturn false\n}\n",
  "/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar __toString = Object.prototype.toString\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {}\n  var opt = options || {};\n  var dec = opt.decode || decode;\n\n  var index = 0\n  while (index < str.length) {\n    var eqIdx = str.indexOf('=', index)\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break\n    }\n\n    var endIdx = str.indexOf(';', index)\n\n    if (endIdx === -1) {\n      endIdx = str.length\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1\n      continue\n    }\n\n    var key = str.slice(index, eqIdx).trim()\n\n    // only assign once\n    if (undefined === obj[key]) {\n      var val = str.slice(eqIdx + 1, endIdx).trim()\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1)\n      }\n\n      obj[key] = tryDecode(val, dec);\n    }\n\n    index = endIdx + 1\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    var expires = opt.expires\n\n    if (!isDate(expires) || isNaN(expires.valueOf())) {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + expires.toUTCString()\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.partitioned) {\n    str += '; Partitioned'\n  }\n\n  if (opt.priority) {\n    var priority = typeof opt.priority === 'string'\n      ? opt.priority.toLowerCase()\n      : opt.priority\n\n    switch (priority) {\n      case 'low':\n        str += '; Priority=Low'\n        break\n      case 'medium':\n        str += '; Priority=Medium'\n        break\n      case 'high':\n        str += '; Priority=High'\n        break\n      default:\n        throw new TypeError('option priority is invalid')\n    }\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * URL-decode string value. Optimized to skip native call when no %.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction decode (str) {\n  return str.indexOf('%') !== -1\n    ? decodeURIComponent(str)\n    : str\n}\n\n/**\n * URL-encode value.\n *\n * @param {string} val\n * @returns {string}\n */\n\nfunction encode (val) {\n  return encodeURIComponent(val)\n}\n\n/**\n * Determine if value is a Date.\n *\n * @param {*} val\n * @private\n */\n\nfunction isDate (val) {\n  return __toString.call(val) === '[object Date]' ||\n    val instanceof Date\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n",
  "import { parse } from 'cookie'\n\n// @ts-ignore\nimport decodeURIComponent from 'fast-decode-uri-component'\n\nimport { unsignCookie, isNumericString } from './utils'\nimport { InvalidCookieSignature } from './error'\n\nimport type { Context } from './context'\nimport type { Prettify } from './types'\n\nexport interface CookieOptions {\n\t/**\n\t * Specifies the value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.3|Domain Set-Cookie attribute}. By default, no\n\t * domain is set, and most clients will consider the cookie to apply to only\n\t * the current domain.\n\t */\n\tdomain?: string | undefined\n\n\t/**\n\t * Specifies the `Date` object to be the value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.1|`Expires` `Set-Cookie` attribute}. By default,\n\t * no expiration is set, and most clients will consider this a \"non-persistent cookie\" and will delete\n\t * it on a condition like exiting a web browser application.\n\t *\n\t * *Note* the {@link https://tools.ietf.org/html/rfc6265#section-5.3|cookie storage model specification}\n\t * states that if both `expires` and `maxAge` are set, then `maxAge` takes precedence, but it is\n\t * possible not all clients by obey this, so if both are set, they should\n\t * point to the same date and time.\n\t */\n\texpires?: Date | undefined\n\t/**\n\t * Specifies the boolean value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.6|`HttpOnly` `Set-Cookie` attribute}.\n\t * When truthy, the `HttpOnly` attribute is set, otherwise it is not. By\n\t * default, the `HttpOnly` attribute is not set.\n\t *\n\t * *Note* be careful when setting this to true, as compliant clients will\n\t * not allow client-side JavaScript to see the cookie in `document.cookie`.\n\t */\n\thttpOnly?: boolean | undefined\n\t/**\n\t * Specifies the number (in seconds) to be the value for the `Max-Age`\n\t * `Set-Cookie` attribute. The given number will be converted to an integer\n\t * by rounding down. By default, no maximum age is set.\n\t *\n\t * *Note* the {@link https://tools.ietf.org/html/rfc6265#section-5.3|cookie storage model specification}\n\t * states that if both `expires` and `maxAge` are set, then `maxAge` takes precedence, but it is\n\t * possible not all clients by obey this, so if both are set, they should\n\t * point to the same date and time.\n\t */\n\tmaxAge?: number | undefined\n\t/**\n\t * Specifies the value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.4|`Path` `Set-Cookie` attribute}.\n\t * By default, the path is considered the \"default path\".\n\t */\n\tpath?: string | undefined\n\t/**\n\t * Specifies the `string` to be the value for the [`Priority` `Set-Cookie` attribute][rfc-west-cookie-priority-00-4.1].\n\t *\n\t * - `'low'` will set the `Priority` attribute to `Low`.\n\t * - `'medium'` will set the `Priority` attribute to `Medium`, the default priority when not set.\n\t * - `'high'` will set the `Priority` attribute to `High`.\n\t *\n\t * More information about the different priority levels can be found in\n\t * [the specification][rfc-west-cookie-priority-00-4.1].\n\t *\n\t * **note** This is an attribute that has not yet been fully standardized, and may change in the future.\n\t * This also means many clients may ignore this attribute until they understand it.\n\t */\n\tpriority?: 'low' | 'medium' | 'high' | undefined\n\t/**\n\t * Specifies the boolean or string to be the value for the {@link https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.2.7|`SameSite` `Set-Cookie` attribute}.\n\t *\n\t * - `true` will set the `SameSite` attribute to `Strict` for strict same\n\t * site enforcement.\n\t * - `false` will not set the `SameSite` attribute.\n\t * - `'lax'` will set the `SameSite` attribute to Lax for lax same site\n\t * enforcement.\n\t * - `'strict'` will set the `SameSite` attribute to Strict for strict same\n\t * site enforcement.\n\t *  - `'none'` will set the SameSite attribute to None for an explicit\n\t *  cross-site cookie.\n\t *\n\t * More information about the different enforcement levels can be found in {@link https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.2.7|the specification}.\n\t *\n\t * *note* This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\t */\n\tsameSite?: true | false | 'lax' | 'strict' | 'none' | undefined\n\t/**\n\t * Specifies the boolean value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.5|`Secure` `Set-Cookie` attribute}. When truthy, the\n\t * `Secure` attribute is set, otherwise it is not. By default, the `Secure` attribute is not set.\n\t *\n\t * *Note* be careful when setting this to `true`, as compliant clients will\n\t * not send the cookie back to the server in the future if the browser does\n\t * not have an HTTPS connection.\n\t */\n\tsecure?: boolean | undefined\n\n\t/**\n\t * Secret key for signing cookie\n\t *\n\t * If array is passed, will use Key Rotation.\n\t *\n\t * Key rotation is when an encryption key is retired\n\t * and replaced by generating a new cryptographic key.\n\t */\n\tsecrets?: string | string[]\n}\n\nexport type ElysiaCookie = Prettify<\n\tCookieOptions & {\n\t\tvalue?: unknown\n\t}\n>\n\ntype Updater<T> = T | ((value: T) => T)\n\nexport class Cookie<T> implements ElysiaCookie {\n\tconstructor(\n\t\tprivate name: string,\n\t\tprivate jar: Record<string, ElysiaCookie>,\n\t\tprivate initial: Partial<ElysiaCookie> = {}\n\t) {}\n\n\tget cookie() {\n\t\tif (!(this.name in this.jar)) return this.initial\n\n\t\treturn this.jar[this.name]\n\t}\n\n\tset cookie(jar: ElysiaCookie) {\n\t\tif (!(this.name in this.jar)) this.jar[this.name] = this.initial\n\n\t\tthis.jar[this.name] = jar\n\t}\n\n\tget value(): T {\n\t\treturn this.cookie.value as T\n\t}\n\n\tset value(value: T) {\n\t\tif (!(this.name in this.jar)) this.jar[this.name] = this.initial\n\n\t\tthis.jar[this.name].value = value\n\t}\n\n\tget expires() {\n\t\treturn this.cookie.expires\n\t}\n\n\tset expires(expires) {\n\t\tthis.cookie.expires = expires\n\t}\n\n\tget maxAge() {\n\t\treturn this.cookie.maxAge\n\t}\n\n\tset maxAge(maxAge) {\n\t\tthis.cookie.maxAge = maxAge\n\t}\n\n\tget domain() {\n\t\treturn this.cookie.domain\n\t}\n\n\tset domain(domain) {\n\t\tthis.cookie.domain = domain\n\t}\n\n\tget path() {\n\t\treturn this.cookie.path\n\t}\n\n\tset path(path) {\n\t\tthis.cookie.path = path\n\t}\n\n\tget secure() {\n\t\treturn this.cookie.secure\n\t}\n\n\tset secure(secure) {\n\t\tthis.cookie.secure = secure\n\t}\n\n\tget httpOnly() {\n\t\treturn this.cookie.httpOnly\n\t}\n\n\tset httpOnly(httpOnly) {\n\t\tthis.cookie.httpOnly = httpOnly\n\t}\n\n\tget sameSite() {\n\t\treturn this.cookie.sameSite\n\t}\n\n\tset sameSite(sameSite) {\n\t\tthis.cookie.sameSite = sameSite\n\t}\n\n\tget priority() {\n\t\treturn this.cookie.priority\n\t}\n\n\tset priority(priority) {\n\t\tthis.cookie.priority = priority\n\t}\n\n\tget secrets() {\n\t\treturn this.cookie.secrets\n\t}\n\n\tset secrets(secrets) {\n\t\tthis.cookie.secrets = secrets\n\t}\n\n\tupdate(config: Updater<Partial<ElysiaCookie>>) {\n\t\tthis.cookie = Object.assign(\n\t\t\tthis.cookie,\n\t\t\ttypeof config === 'function' ? config(this.cookie) : config\n\t\t)\n\n\t\treturn this\n\t}\n\n\tset(config: Updater<Partial<ElysiaCookie>>) {\n\t\tthis.cookie = Object.assign(\n\t\t\t{\n\t\t\t\t...this.initial,\n\t\t\t\tvalue: this.value,\n\t\t\t},\n\t\t\ttypeof config === 'function' ? config(this.cookie) : config\n\t\t)\n\n\t\treturn this\n\t}\n\n\tremove() {\n\t\tif (this.value === undefined) return\n\n\t\tthis.set({\n\t\t\texpires: new Date(0),\n\t\t\tmaxAge: 0,\n\t\t\tvalue: ''\n\t\t})\n\n\t\treturn this\n\t}\n\n\ttoString() {\n\t\treturn typeof this.value === 'object'\n\t\t\t? JSON.stringify(this.value)\n\t\t\t: this.value?.toString() ?? ''\n\t}\n}\n\nexport const createCookieJar = (\n\tset: Context['set'],\n\tstore: Record<string, ElysiaCookie>,\n\tinitial?: Partial<ElysiaCookie>\n): Record<string, Cookie<unknown>> => {\n\tif (!set.cookie) set.cookie = {}\n\n\treturn new Proxy(store, {\n\t\tget(_, key: string) {\n\t\t\tif (key in store)\n\t\t\t\treturn new Cookie(\n\t\t\t\t\tkey,\n\t\t\t\t\tset.cookie as Record<string, ElysiaCookie>,\n\t\t\t\t\tObject.assign({}, initial ?? {}, store[key])\n\t\t\t\t)\n\n\t\t\treturn new Cookie(\n\t\t\t\tkey,\n\t\t\t\tset.cookie as Record<string, ElysiaCookie>,\n\t\t\t\tObject.assign({}, initial)\n\t\t\t)\n\t\t}\n\t}) as Record<string, Cookie<unknown>>\n}\n\nexport const parseCookie = async (\n\tset: Context['set'],\n\tcookieString?: string | null,\n\t{\n\t\tsecret,\n\t\tsign,\n\t\t...initial\n\t}: CookieOptions & {\n\t\tsecret?: string | string[]\n\t\tsign?: true | string | string[]\n\t} = {}\n) => {\n\tif (!cookieString) return createCookieJar(set, {}, initial)\n\n\tconst isStringKey = typeof secret === 'string'\n\tif (sign && sign !== true && !Array.isArray(sign)) sign = [sign]\n\n\tconst jar: Record<string, ElysiaCookie> = {}\n\n\tconst cookies = parse(cookieString)\n\tfor (const [name, v] of Object.entries(cookies)) {\n\t\tlet value = decodeURIComponent(v)\n\n\t\tif (sign === true || sign?.includes(name)) {\n\t\t\tif (!secret)\n\t\t\t\tthrow new Error('No secret is provided to cookie plugin')\n\n\t\t\tif (isStringKey) {\n\t\t\t\tconst temp = await unsignCookie(value as string, secret)\n\t\t\t\tif (temp === false) throw new InvalidCookieSignature(name)\n\n\t\t\t\tvalue = temp\n\t\t\t} else {\n\t\t\t\tlet decoded = true\n\t\t\t\tfor (let i = 0; i < secret.length; i++) {\n\t\t\t\t\tconst temp = await unsignCookie(value as string, secret[i])\n\n\t\t\t\t\tif (temp !== false) {\n\t\t\t\t\t\tdecoded = true\n\t\t\t\t\t\tvalue = temp\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!decoded) throw new InvalidCookieSignature(name)\n\t\t\t}\n\t\t}\n\n\t\tconst start = value.charCodeAt(0)\n\t\tif (start === 123 || start === 91)\n\t\t\ttry {\n\t\t\t\tjar[name] = {\n\t\t\t\t\tvalue: JSON.parse(value)\n\t\t\t\t}\n\n\t\t\t\tcontinue\n\t\t\t} catch {\n\t\t\t\t// ignore\n\t\t\t}\n\n\t\tif (isNumericString(value)) {\n\t\t\tjar[name] = {\n\t\t\t\tvalue: parseInt(value)\n\t\t\t}\n\n\t\t\tcontinue\n\t\t}\n\n\t\tif (value === 'true') {\n\t\t\tjar[name] = {\n\t\t\t\tvalue: true\n\t\t\t}\n\n\t\t\tcontinue\n\t\t}\n\n\t\tif (value === 'false') {\n\t\t\tjar[name] = {\n\t\t\t\tvalue: false\n\t\t\t}\n\n\t\t\tcontinue\n\t\t}\n\n\t\tjar[name] = {\n\t\t\tvalue\n\t\t}\n\t}\n\n\treturn createCookieJar(set, jar, initial)\n}\n",
  "import { parse } from 'cookie'\n\n// @ts-ignore\nimport decodeURIComponent from 'fast-decode-uri-component'\n\nimport { unsignCookie, isNumericString } from './utils'\nimport { InvalidCookieSignature } from './error'\n\nimport type { Context } from './context'\nimport type { Prettify } from './types'\n\nexport interface CookieOptions {\n\t/**\n\t * Specifies the value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.3|Domain Set-Cookie attribute}. By default, no\n\t * domain is set, and most clients will consider the cookie to apply to only\n\t * the current domain.\n\t */\n\tdomain?: string | undefined\n\n\t/**\n\t * Specifies the `Date` object to be the value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.1|`Expires` `Set-Cookie` attribute}. By default,\n\t * no expiration is set, and most clients will consider this a \"non-persistent cookie\" and will delete\n\t * it on a condition like exiting a web browser application.\n\t *\n\t * *Note* the {@link https://tools.ietf.org/html/rfc6265#section-5.3|cookie storage model specification}\n\t * states that if both `expires` and `maxAge` are set, then `maxAge` takes precedence, but it is\n\t * possible not all clients by obey this, so if both are set, they should\n\t * point to the same date and time.\n\t */\n\texpires?: Date | undefined\n\t/**\n\t * Specifies the boolean value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.6|`HttpOnly` `Set-Cookie` attribute}.\n\t * When truthy, the `HttpOnly` attribute is set, otherwise it is not. By\n\t * default, the `HttpOnly` attribute is not set.\n\t *\n\t * *Note* be careful when setting this to true, as compliant clients will\n\t * not allow client-side JavaScript to see the cookie in `document.cookie`.\n\t */\n\thttpOnly?: boolean | undefined\n\t/**\n\t * Specifies the number (in seconds) to be the value for the `Max-Age`\n\t * `Set-Cookie` attribute. The given number will be converted to an integer\n\t * by rounding down. By default, no maximum age is set.\n\t *\n\t * *Note* the {@link https://tools.ietf.org/html/rfc6265#section-5.3|cookie storage model specification}\n\t * states that if both `expires` and `maxAge` are set, then `maxAge` takes precedence, but it is\n\t * possible not all clients by obey this, so if both are set, they should\n\t * point to the same date and time.\n\t */\n\tmaxAge?: number | undefined\n\t/**\n\t * Specifies the value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.4|`Path` `Set-Cookie` attribute}.\n\t * By default, the path is considered the \"default path\".\n\t */\n\tpath?: string | undefined\n\t/**\n\t * Specifies the `string` to be the value for the [`Priority` `Set-Cookie` attribute][rfc-west-cookie-priority-00-4.1].\n\t *\n\t * - `'low'` will set the `Priority` attribute to `Low`.\n\t * - `'medium'` will set the `Priority` attribute to `Medium`, the default priority when not set.\n\t * - `'high'` will set the `Priority` attribute to `High`.\n\t *\n\t * More information about the different priority levels can be found in\n\t * [the specification][rfc-west-cookie-priority-00-4.1].\n\t *\n\t * **note** This is an attribute that has not yet been fully standardized, and may change in the future.\n\t * This also means many clients may ignore this attribute until they understand it.\n\t */\n\tpriority?: 'low' | 'medium' | 'high' | undefined\n\t/**\n\t * Specifies the boolean or string to be the value for the {@link https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.2.7|`SameSite` `Set-Cookie` attribute}.\n\t *\n\t * - `true` will set the `SameSite` attribute to `Strict` for strict same\n\t * site enforcement.\n\t * - `false` will not set the `SameSite` attribute.\n\t * - `'lax'` will set the `SameSite` attribute to Lax for lax same site\n\t * enforcement.\n\t * - `'strict'` will set the `SameSite` attribute to Strict for strict same\n\t * site enforcement.\n\t *  - `'none'` will set the SameSite attribute to None for an explicit\n\t *  cross-site cookie.\n\t *\n\t * More information about the different enforcement levels can be found in {@link https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.2.7|the specification}.\n\t *\n\t * *note* This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\t */\n\tsameSite?: true | false | 'lax' | 'strict' | 'none' | undefined\n\t/**\n\t * Specifies the boolean value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.5|`Secure` `Set-Cookie` attribute}. When truthy, the\n\t * `Secure` attribute is set, otherwise it is not. By default, the `Secure` attribute is not set.\n\t *\n\t * *Note* be careful when setting this to `true`, as compliant clients will\n\t * not send the cookie back to the server in the future if the browser does\n\t * not have an HTTPS connection.\n\t */\n\tsecure?: boolean | undefined\n\n\t/**\n\t * Secret key for signing cookie\n\t *\n\t * If array is passed, will use Key Rotation.\n\t *\n\t * Key rotation is when an encryption key is retired\n\t * and replaced by generating a new cryptographic key.\n\t */\n\tsecrets?: string | string[]\n}\n\nexport type ElysiaCookie = Prettify<\n\tCookieOptions & {\n\t\tvalue?: unknown\n\t}\n>\n\ntype Updater<T> = T | ((value: T) => T)\n\nexport class Cookie<T> implements ElysiaCookie {\n\tconstructor(\n\t\tprivate name: string,\n\t\tprivate jar: Record<string, ElysiaCookie>,\n\t\tprivate initial: Partial<ElysiaCookie> = {}\n\t) {}\n\n\tget cookie() {\n\t\tif (!(this.name in this.jar)) return this.initial\n\n\t\treturn this.jar[this.name]\n\t}\n\n\tset cookie(jar: ElysiaCookie) {\n\t\tif (!(this.name in this.jar)) this.jar[this.name] = this.initial\n\n\t\tthis.jar[this.name] = jar\n\t}\n\n\tget value(): T {\n\t\treturn this.cookie.value as T\n\t}\n\n\tset value(value: T) {\n\t\tif (!(this.name in this.jar)) this.jar[this.name] = this.initial\n\n\t\tthis.jar[this.name].value = value\n\t}\n\n\tget expires() {\n\t\treturn this.cookie.expires\n\t}\n\n\tset expires(expires) {\n\t\tthis.cookie.expires = expires\n\t}\n\n\tget maxAge() {\n\t\treturn this.cookie.maxAge\n\t}\n\n\tset maxAge(maxAge) {\n\t\tthis.cookie.maxAge = maxAge\n\t}\n\n\tget domain() {\n\t\treturn this.cookie.domain\n\t}\n\n\tset domain(domain) {\n\t\tthis.cookie.domain = domain\n\t}\n\n\tget path() {\n\t\treturn this.cookie.path\n\t}\n\n\tset path(path) {\n\t\tthis.cookie.path = path\n\t}\n\n\tget secure() {\n\t\treturn this.cookie.secure\n\t}\n\n\tset secure(secure) {\n\t\tthis.cookie.secure = secure\n\t}\n\n\tget httpOnly() {\n\t\treturn this.cookie.httpOnly\n\t}\n\n\tset httpOnly(httpOnly) {\n\t\tthis.cookie.httpOnly = httpOnly\n\t}\n\n\tget sameSite() {\n\t\treturn this.cookie.sameSite\n\t}\n\n\tset sameSite(sameSite) {\n\t\tthis.cookie.sameSite = sameSite\n\t}\n\n\tget priority() {\n\t\treturn this.cookie.priority\n\t}\n\n\tset priority(priority) {\n\t\tthis.cookie.priority = priority\n\t}\n\n\tget secrets() {\n\t\treturn this.cookie.secrets\n\t}\n\n\tset secrets(secrets) {\n\t\tthis.cookie.secrets = secrets\n\t}\n\n\tupdate(config: Updater<Partial<ElysiaCookie>>) {\n\t\tthis.cookie = Object.assign(\n\t\t\tthis.cookie,\n\t\t\ttypeof config === 'function' ? config(this.cookie) : config\n\t\t)\n\n\t\treturn this\n\t}\n\n\tset(config: Updater<Partial<ElysiaCookie>>) {\n\t\tthis.cookie = Object.assign(\n\t\t\t{\n\t\t\t\t...this.initial,\n\t\t\t\tvalue: this.value,\n\t\t\t},\n\t\t\ttypeof config === 'function' ? config(this.cookie) : config\n\t\t)\n\n\t\treturn this\n\t}\n\n\tremove() {\n\t\tif (this.value === undefined) return\n\n\t\tthis.set({\n\t\t\texpires: new Date(0),\n\t\t\tmaxAge: 0,\n\t\t\tvalue: ''\n\t\t})\n\n\t\treturn this\n\t}\n\n\ttoString() {\n\t\treturn typeof this.value === 'object'\n\t\t\t? JSON.stringify(this.value)\n\t\t\t: this.value?.toString() ?? ''\n\t}\n}\n\nexport const createCookieJar = (\n\tset: Context['set'],\n\tstore: Record<string, ElysiaCookie>,\n\tinitial?: Partial<ElysiaCookie>\n): Record<string, Cookie<unknown>> => {\n\tif (!set.cookie) set.cookie = {}\n\n\treturn new Proxy(store, {\n\t\tget(_, key: string) {\n\t\t\tif (key in store)\n\t\t\t\treturn new Cookie(\n\t\t\t\t\tkey,\n\t\t\t\t\tset.cookie as Record<string, ElysiaCookie>,\n\t\t\t\t\tObject.assign({}, initial ?? {}, store[key])\n\t\t\t\t)\n\n\t\t\treturn new Cookie(\n\t\t\t\tkey,\n\t\t\t\tset.cookie as Record<string, ElysiaCookie>,\n\t\t\t\tObject.assign({}, initial)\n\t\t\t)\n\t\t}\n\t}) as Record<string, Cookie<unknown>>\n}\n\nexport const parseCookie = async (\n\tset: Context['set'],\n\tcookieString?: string | null,\n\t{\n\t\tsecret,\n\t\tsign,\n\t\t...initial\n\t}: CookieOptions & {\n\t\tsecret?: string | string[]\n\t\tsign?: true | string | string[]\n\t} = {}\n) => {\n\tif (!cookieString) return createCookieJar(set, {}, initial)\n\n\tconst isStringKey = typeof secret === 'string'\n\tif (sign && sign !== true && !Array.isArray(sign)) sign = [sign]\n\n\tconst jar: Record<string, ElysiaCookie> = {}\n\n\tconst cookies = parse(cookieString)\n\tfor (const [name, v] of Object.entries(cookies)) {\n\t\tlet value = decodeURIComponent(v)\n\n\t\tif (sign === true || sign?.includes(name)) {\n\t\t\tif (!secret)\n\t\t\t\tthrow new Error('No secret is provided to cookie plugin')\n\n\t\t\tif (isStringKey) {\n\t\t\t\tconst temp = await unsignCookie(value as string, secret)\n\t\t\t\tif (temp === false) throw new InvalidCookieSignature(name)\n\n\t\t\t\tvalue = temp\n\t\t\t} else {\n\t\t\t\tlet decoded = true\n\t\t\t\tfor (let i = 0; i < secret.length; i++) {\n\t\t\t\t\tconst temp = await unsignCookie(value as string, secret[i])\n\n\t\t\t\t\tif (temp !== false) {\n\t\t\t\t\t\tdecoded = true\n\t\t\t\t\t\tvalue = temp\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!decoded) throw new InvalidCookieSignature(name)\n\t\t\t}\n\t\t}\n\n\t\tconst start = value.charCodeAt(0)\n\t\tif (start === 123 || start === 91)\n\t\t\ttry {\n\t\t\t\tjar[name] = {\n\t\t\t\t\tvalue: JSON.parse(value)\n\t\t\t\t}\n\n\t\t\t\tcontinue\n\t\t\t} catch {\n\t\t\t\t// ignore\n\t\t\t}\n\n\t\tif (isNumericString(value)) {\n\t\t\tjar[name] = {\n\t\t\t\tvalue: parseInt(value)\n\t\t\t}\n\n\t\t\tcontinue\n\t\t}\n\n\t\tif (value === 'true') {\n\t\t\tjar[name] = {\n\t\t\t\tvalue: true\n\t\t\t}\n\n\t\t\tcontinue\n\t\t}\n\n\t\tif (value === 'false') {\n\t\t\tjar[name] = {\n\t\t\t\tvalue: false\n\t\t\t}\n\n\t\t\tcontinue\n\t\t}\n\n\t\tjar[name] = {\n\t\t\tvalue\n\t\t}\n\t}\n\n\treturn createCookieJar(set, jar, initial)\n}\n",
  "/* eslint-disable sonarjs/no-duplicate-string */\nimport { serialize } from 'cookie'\nimport { StatusMap } from './utils'\n\nimport { Cookie } from './cookies'\nimport { ELYSIA_RESPONSE } from './error'\n\nimport type { Context } from './context'\n\nconst hasHeaderShorthand = 'toJSON' in new Headers()\n\ntype SetResponse = Omit<Context['set'], 'status'> & {\n\tstatus: number\n}\n\nexport const isNotEmpty = (obj: Object) => {\n\tfor (const x in obj) return true\n\n\treturn false\n}\n/** */\n\nconst handleFile = (response: File | Blob, set?: Context['set']) => {\n\tconst size = response.size\n\n\tif (\n\t\t(size &&\n\t\t\tset &&\n\t\t\tset.status !== 206 &&\n\t\t\tset.status !== 304 &&\n\t\t\tset.status !== 412 &&\n\t\t\tset.status !== 416) ||\n\t\t(!set && size)\n\t) {\n\t\tif (set) {\n\t\t\tif (set.headers instanceof Headers)\n\t\t\t\tif (hasHeaderShorthand)\n\t\t\t\t\tset.headers = (set.headers as unknown as Headers).toJSON()\n\t\t\t\telse\n\t\t\t\t\tfor (const [key, value] of set.headers.entries())\n\t\t\t\t\t\tif (key in set.headers) set.headers[key] = value\n\n\t\t\treturn new Response(response as Blob, {\n\t\t\t\tstatus: set.status as number,\n\t\t\t\theaders: Object.assign(\n\t\t\t\t\t{\n\t\t\t\t\t\t'accept-ranges': 'bytes',\n\t\t\t\t\t\t'content-range': `bytes 0-${size - 1}/${size}`\n\t\t\t\t\t},\n\t\t\t\t\tset.headers\n\t\t\t\t)\n\t\t\t})\n\t\t}\n\n\t\treturn new Response(response as Blob, {\n\t\t\theaders: {\n\t\t\t\t'accept-ranges': 'bytes',\n\t\t\t\t'content-range': `bytes 0-${size - 1}/${size}`\n\t\t\t}\n\t\t})\n\t}\n\n\treturn new Response(response as Blob)\n}\n\nexport const parseSetCookies = (headers: Headers, setCookie: string[]) => {\n\tif (!headers) return headers\n\n\theaders.delete('Set-Cookie')\n\n\tfor (let i = 0; i < setCookie.length; i++) {\n\t\tconst index = setCookie[i].indexOf('=')\n\n\t\theaders.append(\n\t\t\t'Set-Cookie',\n\t\t\t`${setCookie[i].slice(0, index)}=${setCookie[i].slice(index + 1) || ''}`\n\t\t)\n\t}\n\n\treturn headers\n}\n\nexport const serializeCookie = (cookies: Context['set']['cookie']) => {\n\tif (!cookies || !isNotEmpty(cookies)) return undefined\n\n\tconst set: string[] = []\n\n\tfor (const [key, property] of Object.entries(cookies)) {\n\t\tif (!key || !property) continue\n\n\t\tconst value = property.value\n\t\tif (value === undefined || value === null) continue\n\n\t\tset.push(\n\t\t\tserialize(\n\t\t\t\tkey,\n\t\t\t\ttypeof value === 'object' ? JSON.stringify(value) : value + '',\n\t\t\t\tproperty\n\t\t\t)\n\t\t)\n\t}\n\n\tif (set.length === 0) return undefined\n\tif (set.length === 1) return set[0]\n\n\treturn set\n}\n\nexport const mapResponse = (\n\tresponse: unknown,\n\tset: Context['set'],\n\trequest?: Request\n): Response => {\n\t// @ts-ignore\n\tif (response?.[response.$passthrough])\n\t\t// @ts-ignore\n\t\tresponse = response[response.$passthrough]\n\n\t// @ts-ignore\n\tif (response?.[ELYSIA_RESPONSE]) {\n\t\t// @ts-ignore\n\t\tset.status = response[ELYSIA_RESPONSE]\n\t\t// @ts-ignore\n\t\tresponse = response.response\n\t}\n\n\tif (\n\t\tisNotEmpty(set.headers) ||\n\t\tset.status !== 200 ||\n\t\tset.redirect ||\n\t\tset.cookie\n\t) {\n\t\tif (typeof set.status === 'string') set.status = StatusMap[set.status]\n\n\t\tif (set.redirect) {\n\t\t\tset.headers.Location = set.redirect\n\t\t\tif (!set.status || set.status < 300 || set.status >= 400)\n\t\t\t\tset.status = 302\n\t\t}\n\n\t\tif (set.cookie && isNotEmpty(set.cookie))\n\t\t\tset.headers['Set-Cookie'] = serializeCookie(set.cookie)\n\n\t\tif (\n\t\t\tset.headers['Set-Cookie'] &&\n\t\t\tArray.isArray(set.headers['Set-Cookie'])\n\t\t)\n\t\t\tset.headers = parseSetCookies(\n\t\t\t\tnew Headers(set.headers) as Headers,\n\t\t\t\tset.headers['Set-Cookie']\n\t\t\t) as any\n\n\t\tswitch (response?.constructor?.name) {\n\t\t\tcase 'String':\n\t\t\t\treturn new Response(response as string, set as SetResponse)\n\n\t\t\tcase 'Blob':\n\t\t\t\treturn handleFile(response as File | Blob, set)\n\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\treturn Response.json(response, set as SetResponse)\n\n\t\t\tcase 'ReadableStream':\n\t\t\t\tif (\n\t\t\t\t\t!set.headers['content-type']?.startsWith(\n\t\t\t\t\t\t'text/event-stream'\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t\tset.headers['content-type'] =\n\t\t\t\t\t\t'text/event-stream; charset=utf-8'\n\n\t\t\t\trequest?.signal.addEventListener(\n\t\t\t\t\t'abort',\n\t\t\t\t\t{\n\t\t\t\t\t\thandleEvent() {\n\t\t\t\t\t\t\t;(response as ReadableStream).cancel(request)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tonce: true\n\t\t\t\t\t}\n\t\t\t\t)\n\n\t\t\t\treturn new Response(\n\t\t\t\t\tresponse as ReadableStream,\n\t\t\t\t\tset as SetResponse\n\t\t\t\t)\n\n\t\t\tcase undefined:\n\t\t\t\tif (!response) return new Response('', set as SetResponse)\n\n\t\t\t\treturn Response.json(response, set as SetResponse)\n\n\t\t\tcase 'Response':\n\t\t\t\tconst inherits = { ...set.headers }\n\n\t\t\t\tif (hasHeaderShorthand)\n\t\t\t\t\tset.headers = (\n\t\t\t\t\t\t(response as Response).headers as Headers\n\t\t\t\t\t).toJSON()\n\t\t\t\telse\n\t\t\t\t\tfor (const [key, value] of (\n\t\t\t\t\t\tresponse as Response\n\t\t\t\t\t).headers.entries())\n\t\t\t\t\t\tif (key in set.headers) set.headers[key] = value\n\n\t\t\t\tfor (const key in inherits)\n\t\t\t\t\t(response as Response).headers.append(key, inherits[key])\n\n\t\t\t\treturn response as Response\n\n\t\t\tcase 'Error':\n\t\t\t\treturn errorToResponse(response as Error, set)\n\n\t\t\tcase 'Promise':\n\t\t\t\treturn (response as Promise<any>).then((x) =>\n\t\t\t\t\tmapResponse(x, set)\n\t\t\t\t) as any\n\n\t\t\tcase 'Function':\n\t\t\t\treturn mapResponse((response as Function)(), set)\n\n\t\t\tcase 'Number':\n\t\t\tcase 'Boolean':\n\t\t\t\treturn new Response(\n\t\t\t\t\t(response as number | boolean).toString(),\n\t\t\t\t\tset as SetResponse\n\t\t\t\t)\n\n\t\t\tcase 'Cookie':\n\t\t\t\tif (response instanceof Cookie)\n\t\t\t\t\treturn new Response(response.value, set as SetResponse)\n\n\t\t\t\treturn new Response(response?.toString(), set as SetResponse)\n\n\t\t\tdefault:\n\t\t\t\tif (response instanceof Response) {\n\t\t\t\t\tconst inherits = Object.assign({}, set.headers)\n\n\t\t\t\t\tif (hasHeaderShorthand)\n\t\t\t\t\t\tset.headers = (\n\t\t\t\t\t\t\t(response as Response).headers as Headers\n\t\t\t\t\t\t).toJSON()\n\t\t\t\t\telse\n\t\t\t\t\t\tfor (const [key, value] of (\n\t\t\t\t\t\t\tresponse as Response\n\t\t\t\t\t\t).headers.entries())\n\t\t\t\t\t\t\tif (key in set.headers) set.headers[key] = value\n\n\t\t\t\t\tfor (const key in inherits)\n\t\t\t\t\t\t(response as Response).headers.append(\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tinherits[key]\n\t\t\t\t\t\t)\n\n\t\t\t\t\treturn response as Response\n\t\t\t\t}\n\n\t\t\t\tif (response instanceof Promise)\n\t\t\t\t\treturn response.then((x) => mapResponse(x, set)) as any\n\n\t\t\t\tif (response instanceof Error)\n\t\t\t\t\treturn errorToResponse(response as Error, set)\n\n\t\t\t\tif ('charCodeAt' in (response as any)) {\n\t\t\t\t\tconst code = (response as any).charCodeAt(0)\n\n\t\t\t\t\tif (code === 123 || code === 91) {\n\t\t\t\t\t\tif (!set.headers['Content-Type'])\n\t\t\t\t\t\t\tset.headers['Content-Type'] = 'application/json'\n\n\t\t\t\t\t\treturn new Response(\n\t\t\t\t\t\t\tJSON.stringify(response),\n\t\t\t\t\t\t\tset as SetResponse\n\t\t\t\t\t\t) as any\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new Response(response as any, set as SetResponse)\n\t\t}\n\t} else\n\t\tswitch (response?.constructor?.name) {\n\t\t\tcase 'String':\n\t\t\t\treturn new Response(response as string)\n\n\t\t\tcase 'Blob':\n\t\t\t\treturn handleFile(response as File | Blob, set)\n\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\treturn new Response(JSON.stringify(response), {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'content-type': 'application/json'\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\tcase 'ReadableStream':\n\t\t\t\trequest?.signal.addEventListener(\n\t\t\t\t\t'abort',\n\t\t\t\t\t{\n\t\t\t\t\t\thandleEvent() {\n\t\t\t\t\t\t\t;(response as ReadableStream).cancel(request)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tonce: true\n\t\t\t\t\t}\n\t\t\t\t)\n\n\t\t\t\treturn new Response(response as ReadableStream, {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'text/event-stream; charset=utf-8'\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\tcase undefined:\n\t\t\t\tif (!response) return new Response('')\n\n\t\t\t\treturn new Response(JSON.stringify(response), {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'content-type': 'application/json'\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\tcase 'Response':\n\t\t\t\treturn response as Response\n\n\t\t\tcase 'Error':\n\t\t\t\treturn errorToResponse(response as Error, set)\n\n\t\t\tcase 'Promise':\n\t\t\t\t// @ts-ignore\n\t\t\t\treturn (response as any as Promise<unknown>).then((x) => {\n\t\t\t\t\tconst r = mapCompactResponse(x)\n\n\t\t\t\t\tif (r !== undefined) return r\n\n\t\t\t\t\treturn new Response('')\n\t\t\t\t})\n\n\t\t\t// ? Maybe response or Blob\n\t\t\tcase 'Function':\n\t\t\t\treturn mapCompactResponse((response as Function)())\n\n\t\t\tcase 'Number':\n\t\t\tcase 'Boolean':\n\t\t\t\treturn new Response((response as number | boolean).toString())\n\n\t\t\tcase 'Cookie':\n\t\t\t\tif (response instanceof Cookie)\n\t\t\t\t\treturn new Response(response.value, set as SetResponse)\n\n\t\t\t\treturn new Response(response?.toString(), set as SetResponse)\n\n\t\t\tdefault:\n\t\t\t\tif (response instanceof Response)\n\t\t\t\t\treturn new Response(response.body, {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\n\t\t\t\tif (response instanceof Promise)\n\t\t\t\t\treturn response.then((x) => mapResponse(x, set)) as any\n\n\t\t\t\tif (response instanceof Error)\n\t\t\t\t\treturn errorToResponse(response as Error, set)\n\n\t\t\t\tif ('charCodeAt' in (response as any)) {\n\t\t\t\t\tconst code = (response as any).charCodeAt(0)\n\n\t\t\t\t\tif (code === 123 || code === 91) {\n\t\t\t\t\t\tif (!set.headers['Content-Type'])\n\t\t\t\t\t\t\tset.headers['Content-Type'] = 'application/json'\n\n\t\t\t\t\t\treturn new Response(\n\t\t\t\t\t\t\tJSON.stringify(response),\n\t\t\t\t\t\t\tset as SetResponse\n\t\t\t\t\t\t) as any\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new Response(response as any)\n\t\t}\n}\n\nexport const mapEarlyResponse = (\n\tresponse: unknown,\n\tset: Context['set'],\n\trequest?: Request\n): Response | undefined => {\n\tif (response === undefined || response === null) return\n\n\tif (\n\t\t// @ts-ignore\n\t\tresponse?.$passthrough\n\t)\n\t\t// @ts-ignore\n\t\tresponse = response[response.$passthrough]\n\n\t// @ts-ignore\n\tif (response?.[ELYSIA_RESPONSE]) {\n\t\t// @ts-ignore\n\t\tset.status = response[ELYSIA_RESPONSE]\n\t\t// @ts-ignore\n\t\tresponse = response.response\n\t}\n\n\tif (\n\t\tisNotEmpty(set.headers) ||\n\t\tset.status !== 200 ||\n\t\tset.redirect ||\n\t\tset.cookie\n\t) {\n\t\tif (typeof set.status === 'string') set.status = StatusMap[set.status]\n\n\t\tif (set.redirect) {\n\t\t\tset.headers.Location = set.redirect\n\n\t\t\tif (!set.status || set.status < 300 || set.status >= 400)\n\t\t\t\tset.status = 302\n\t\t}\n\n\t\tif (set.cookie && isNotEmpty(set.cookie))\n\t\t\tset.headers['Set-Cookie'] = serializeCookie(set.cookie)\n\n\t\tif (\n\t\t\tset.headers['Set-Cookie'] &&\n\t\t\tArray.isArray(set.headers['Set-Cookie'])\n\t\t)\n\t\t\tset.headers = parseSetCookies(\n\t\t\t\tnew Headers(set.headers) as Headers,\n\t\t\t\tset.headers['Set-Cookie']\n\t\t\t) as any\n\n\t\tswitch (response?.constructor?.name) {\n\t\t\tcase 'String':\n\t\t\t\treturn new Response(response as string, set as SetResponse)\n\n\t\t\tcase 'Blob':\n\t\t\t\treturn handleFile(response as File | Blob, set)\n\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\treturn Response.json(response, set as SetResponse)\n\n\t\t\tcase 'ReadableStream':\n\t\t\t\tif (\n\t\t\t\t\t!set.headers['content-type']?.startsWith(\n\t\t\t\t\t\t'text/event-stream'\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t\tset.headers['content-type'] =\n\t\t\t\t\t\t'text/event-stream; charset=utf-8'\n\n\t\t\t\trequest?.signal.addEventListener(\n\t\t\t\t\t'abort',\n\t\t\t\t\t{\n\t\t\t\t\t\thandleEvent() {\n\t\t\t\t\t\t\t;(response as ReadableStream).cancel(request)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tonce: true\n\t\t\t\t\t}\n\t\t\t\t)\n\n\t\t\t\treturn new Response(\n\t\t\t\t\tresponse as ReadableStream,\n\t\t\t\t\tset as SetResponse\n\t\t\t\t)\n\n\t\t\tcase undefined:\n\t\t\t\tif (!response) return\n\n\t\t\t\treturn Response.json(response, set as SetResponse)\n\n\t\t\tcase 'Response':\n\t\t\t\tconst inherits = Object.assign({}, set.headers)\n\n\t\t\t\tif (hasHeaderShorthand)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tset.headers = (response as Response).headers.toJSON()\n\t\t\t\telse\n\t\t\t\t\tfor (const [key, value] of (\n\t\t\t\t\t\tresponse as Response\n\t\t\t\t\t).headers.entries())\n\t\t\t\t\t\tif (!(key in set.headers)) set.headers[key] = value\n\n\t\t\t\tfor (const key in inherits)\n\t\t\t\t\t(response as Response).headers.append(key, inherits[key])\n\n\t\t\t\tif ((response as Response).status !== set.status)\n\t\t\t\t\tset.status = (response as Response).status\n\n\t\t\t\treturn response as Response\n\n\t\t\tcase 'Promise':\n\t\t\t\t// @ts-ignore\n\t\t\t\treturn (response as Promise<unknown>).then((x) => {\n\t\t\t\t\tconst r = mapEarlyResponse(x, set)\n\t\t\t\t\tif (r !== undefined) return r\n\t\t\t\t})\n\n\t\t\tcase 'Error':\n\t\t\t\treturn errorToResponse(response as Error, set)\n\n\t\t\tcase 'Function':\n\t\t\t\treturn mapEarlyResponse((response as Function)(), set)\n\n\t\t\tcase 'Number':\n\t\t\tcase 'Boolean':\n\t\t\t\treturn new Response(\n\t\t\t\t\t(response as number | boolean).toString(),\n\t\t\t\t\tset as SetResponse\n\t\t\t\t)\n\n\t\t\tcase 'Cookie':\n\t\t\t\tif (response instanceof Cookie)\n\t\t\t\t\treturn new Response(response.value, set as SetResponse)\n\n\t\t\t\treturn new Response(response?.toString(), set as SetResponse)\n\n\t\t\tdefault:\n\t\t\t\tif (response instanceof Response) {\n\t\t\t\t\tconst inherits = { ...set.headers }\n\n\t\t\t\t\tif (hasHeaderShorthand)\n\t\t\t\t\t\tset.headers = (\n\t\t\t\t\t\t\t(response as Response).headers as Headers\n\t\t\t\t\t\t).toJSON()\n\t\t\t\t\telse\n\t\t\t\t\t\tfor (const [key, value] of (\n\t\t\t\t\t\t\tresponse as Response\n\t\t\t\t\t\t).headers.entries())\n\t\t\t\t\t\t\tif (key in set.headers) set.headers[key] = value\n\n\t\t\t\t\tfor (const key in inherits)\n\t\t\t\t\t\t(response as Response).headers.append(\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tinherits[key]\n\t\t\t\t\t\t)\n\n\t\t\t\t\treturn response as Response\n\t\t\t\t}\n\n\t\t\t\tif (response instanceof Promise)\n\t\t\t\t\treturn response.then((x) => mapEarlyResponse(x, set)) as any\n\n\t\t\t\tif (response instanceof Error)\n\t\t\t\t\treturn errorToResponse(response as Error, set)\n\n\t\t\t\tif ('charCodeAt' in (response as any)) {\n\t\t\t\t\tconst code = (response as any).charCodeAt(0)\n\n\t\t\t\t\tif (code === 123 || code === 91) {\n\t\t\t\t\t\tif (!set.headers['Content-Type'])\n\t\t\t\t\t\t\tset.headers['Content-Type'] = 'application/json'\n\n\t\t\t\t\t\treturn new Response(\n\t\t\t\t\t\t\tJSON.stringify(response),\n\t\t\t\t\t\t\tset as SetResponse\n\t\t\t\t\t\t) as any\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new Response(response as any, set as SetResponse)\n\t\t}\n\t} else\n\t\tswitch (response?.constructor?.name) {\n\t\t\tcase 'String':\n\t\t\t\treturn new Response(response as string)\n\n\t\t\tcase 'Blob':\n\t\t\t\treturn handleFile(response as File | Blob, set)\n\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\treturn new Response(JSON.stringify(response), {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'content-type': 'application/json'\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\tcase 'ReadableStream':\n\t\t\t\trequest?.signal.addEventListener(\n\t\t\t\t\t'abort',\n\t\t\t\t\t{\n\t\t\t\t\t\thandleEvent() {\n\t\t\t\t\t\t\t;(response as ReadableStream).cancel(request)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tonce: true\n\t\t\t\t\t}\n\t\t\t\t)\n\n\t\t\t\treturn new Response(response as ReadableStream, {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'text/event-stream; charset=utf-8'\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\tcase undefined:\n\t\t\t\tif (!response) return new Response('')\n\n\t\t\t\treturn new Response(JSON.stringify(response), {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'content-type': 'application/json'\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\tcase 'Response':\n\t\t\t\treturn response as Response\n\n\t\t\tcase 'Promise':\n\t\t\t\t// @ts-ignore\n\t\t\t\treturn (response as Promise<unknown>).then((x) => {\n\t\t\t\t\tconst r = mapEarlyResponse(x, set)\n\t\t\t\t\tif (r !== undefined) return r\n\t\t\t\t})\n\n\t\t\tcase 'Error':\n\t\t\t\treturn errorToResponse(response as Error, set)\n\n\t\t\tcase 'Function':\n\t\t\t\treturn mapCompactResponse((response as Function)())\n\n\t\t\tcase 'Number':\n\t\t\tcase 'Boolean':\n\t\t\t\treturn new Response((response as number | boolean).toString())\n\n\t\t\tcase 'Cookie':\n\t\t\t\tif (response instanceof Cookie)\n\t\t\t\t\treturn new Response(response.value, set as SetResponse)\n\n\t\t\t\treturn new Response(response?.toString(), set as SetResponse)\n\n\t\t\tdefault:\n\t\t\t\tif (response instanceof Response)\n\t\t\t\t\treturn new Response(response.body, {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\n\t\t\t\tif (response instanceof Promise)\n\t\t\t\t\treturn response.then((x) => mapEarlyResponse(x, set)) as any\n\n\t\t\t\tif (response instanceof Error)\n\t\t\t\t\treturn errorToResponse(response as Error, set)\n\n\t\t\t\tif ('charCodeAt' in (response as any)) {\n\t\t\t\t\tconst code = (response as any).charCodeAt(0)\n\n\t\t\t\t\tif (code === 123 || code === 91) {\n\t\t\t\t\t\tif (!set.headers['Content-Type'])\n\t\t\t\t\t\t\tset.headers['Content-Type'] = 'application/json'\n\n\t\t\t\t\t\treturn new Response(\n\t\t\t\t\t\t\tJSON.stringify(response),\n\t\t\t\t\t\t\tset as SetResponse\n\t\t\t\t\t\t) as any\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new Response(response as any)\n\t\t}\n}\n\nexport const mapCompactResponse = (\n\tresponse: unknown,\n\trequest?: Request\n): Response => {\n\tif (\n\t\t// @ts-ignore\n\t\tresponse?.$passthrough\n\t)\n\t\t// @ts-ignore\n\t\tresponse = response[response.$passthrough]\n\n\t// @ts-ignore\n\tif (response?.[ELYSIA_RESPONSE])\n\t\t// @ts-ignore\n\t\treturn mapResponse(response.response, {\n\t\t\t// @ts-ignore\n\t\t\tstatus: response[ELYSIA_RESPONSE],\n\t\t\theaders: {}\n\t\t})\n\n\tswitch (response?.constructor?.name) {\n\t\tcase 'String':\n\t\t\treturn new Response(response as string)\n\n\t\tcase 'Blob':\n\t\t\treturn handleFile(response as File | Blob)\n\n\t\tcase 'Object':\n\t\tcase 'Array':\n\t\t\treturn new Response(JSON.stringify(response), {\n\t\t\t\theaders: {\n\t\t\t\t\t'content-type': 'application/json'\n\t\t\t\t}\n\t\t\t})\n\n\t\tcase 'ReadableStream':\n\t\t\trequest?.signal.addEventListener(\n\t\t\t\t'abort',\n\t\t\t\t{\n\t\t\t\t\thandleEvent() {\n\t\t\t\t\t\t;(response as ReadableStream).cancel(request)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tonce: true\n\t\t\t\t}\n\t\t\t)\n\n\t\t\treturn new Response(response as ReadableStream, {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'text/event-stream; charset=utf-8'\n\t\t\t\t}\n\t\t\t})\n\n\t\tcase undefined:\n\t\t\tif (!response) return new Response('')\n\n\t\t\treturn new Response(JSON.stringify(response), {\n\t\t\t\theaders: {\n\t\t\t\t\t'content-type': 'application/json'\n\t\t\t\t}\n\t\t\t})\n\n\t\tcase 'Response':\n\t\t\treturn response as Response\n\n\t\tcase 'Error':\n\t\t\treturn errorToResponse(response as Error)\n\n\t\tcase 'Promise':\n\t\t\t// @ts-ignore\n\t\t\treturn (response as any as Promise<unknown>).then(\n\t\t\t\tmapCompactResponse\n\t\t\t)\n\n\t\t// ? Maybe response or Blob\n\t\tcase 'Function':\n\t\t\treturn mapCompactResponse((response as Function)())\n\n\t\tcase 'Number':\n\t\tcase 'Boolean':\n\t\t\treturn new Response((response as number | boolean).toString())\n\n\t\tdefault:\n\t\t\tif (response instanceof Response)\n\t\t\t\treturn new Response(response.body, {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\tif (response instanceof Promise)\n\t\t\t\treturn response.then(mapCompactResponse) as any\n\n\t\t\tif (response instanceof Error)\n\t\t\t\treturn errorToResponse(response as Error)\n\n\t\t\tconst r = JSON.stringify(response)\n\t\t\tif (r.charCodeAt(0) === 123)\n\t\t\t\treturn new Response(JSON.stringify(response), {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t}\n\t\t\t\t}) as any\n\n\t\t\treturn new Response(r)\n\t}\n}\n\nexport const errorToResponse = (error: Error, set?: Context['set']) =>\n\tnew Response(\n\t\tJSON.stringify({\n\t\t\tname: error?.name,\n\t\t\tmessage: error?.message,\n\t\t\tcause: error?.cause\n\t\t}),\n\t\t{\n\t\t\tstatus: set?.status !== 200 ? (set?.status as number) ?? 500 : 500,\n\t\t\theaders: set?.headers\n\t\t}\n\t)\n",
  "import { Kind, TSchema } from '@sinclair/typebox'\nimport { Value } from '@sinclair/typebox/value'\nimport { TypeCheck, TypeCompiler } from '@sinclair/typebox/compiler'\n\nimport { t } from '.'\nimport { isNotEmpty } from './handler'\n\nimport type {\n\tLifeCycleStore,\n\tLocalHook,\n\tMaybeArray,\n\tInputSchema,\n\tBaseMacro,\n\tElysiaFn,\n\tLifeCycleType\n} from './types'\nimport type { CookieOptions } from './cookies'\n\nexport const replaceUrlPath = (url: string, pathname: string) => {\n\tconst urlObject = new URL(url)\n\turlObject.pathname = pathname\n\treturn urlObject.toString()\n}\n\nconst isClass = (v: Object) =>\n\t(typeof v === 'function' && /^\\s*class\\s+/.test(v.toString())) ||\n\t// Handle import * as Sentry from '@sentry/bun'\n\t// This also handle [object Date], [object Array]\n\t// and FFI value like [object Prisma]\n\tv.toString().startsWith('[object ') ||\n\t// If object prototype is not pure, then probably a class-like object\n\tisNotEmpty(Object.getPrototypeOf(v))\n\nconst isObject = (item: any): item is Object =>\n\titem && typeof item === 'object' && !Array.isArray(item)\n\nexport const mergeDeep = <\n\tA extends Record<string, any>,\n\tB extends Record<string, any>\n>(\n\ttarget: A,\n\tsource: B,\n\t{\n\t\tskipKeys\n\t}: {\n\t\tskipKeys?: string[]\n\t} = {}\n): A & B => {\n\tif (isObject(target) && isObject(source))\n\t\tfor (const [key, value] of Object.entries(source)) {\n\t\t\tif (skipKeys?.includes(key)) continue\n\n\t\t\tif (!isObject(value) || !(key in target) || isClass(value)) {\n\t\t\t\ttarget[key as keyof typeof target] = value\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\ttarget[key as keyof typeof target] = mergeDeep(\n\t\t\t\t(target as any)[key] as any,\n\t\t\t\tvalue\n\t\t\t)\n\t\t}\n\n\treturn target as A & B\n}\nexport const mergeCookie = <const A extends Object, const B extends Object>(\n\ta: A,\n\tb: B\n): A & B => {\n\t// @ts-ignore\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst { properties: _, ...target } = a ?? {}\n\n\t// @ts-ignore\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst { properties: __, ...source } = b ?? {}\n\n\treturn mergeDeep(target, source) as A & B\n}\n\nexport const mergeObjectArray = <T extends ElysiaFn>(\n\ta: T | T[] = [],\n\tb: T | T[] = []\n): T[] => {\n\tif (!a) return []\n\n\t// ! Must copy to remove side-effect\n\tconst array = <T[]>[]\n\tconst checksums = <(number | undefined)[]>[]\n\n\tif (!Array.isArray(a)) a = [a]\n\tif (!Array.isArray(b)) b = [b]\n\n\tfor (const item of a) {\n\t\tarray.push(item)\n\n\t\tif (item.$elysiaChecksum) checksums.push(item.$elysiaChecksum)\n\t}\n\n\tfor (const item of b)\n\t\tif (!checksums.includes(item?.$elysiaChecksum)) array.push(item)\n\n\treturn array\n}\n\nexport const primitiveHooks = [\n\t'start',\n\t'request',\n\t'parse',\n\t'transform',\n\t'resolve',\n\t'beforeHandle',\n\t'afterHandle',\n\t'onResponse',\n\t'mapResponse',\n\t'trace',\n\t'error',\n\t'stop',\n\t'body',\n\t'headers',\n\t'params',\n\t'query',\n\t'response',\n\t'type',\n\t'detail'\n] as const\n\nconst primitiveHookMap = primitiveHooks.reduce(\n\t(acc, x) => ((acc[x] = true), acc),\n\t{} as Record<string, boolean>\n)\n\nexport const mergeHook = (\n\ta?: LocalHook<any, any, any, any, any, any, any> | LifeCycleStore,\n\tb?: LocalHook<any, any, any, any, any, any, any>\n): LifeCycleStore => {\n\t// In case if merging union is need\n\t// const customAStore: Record<string, unknown> = {}\n\t// const customBStore: Record<string, unknown> = {}\n\n\t// for (const [key, value] of Object.entries(a)) {\n\t// \tif (primitiveHooks.includes(key as any)) continue\n\n\t// \tcustomAStore[key] = value\n\t// }\n\n\t// for (const [key, value] of Object.entries(b)) {\n\t// \tif (primitiveHooks.includes(key as any)) continue\n\n\t// \tcustomBStore[key] = value\n\t// }\n\n\t// const unioned = Object.keys(customAStore).filter((x) =>\n\t// \tObject.keys(customBStore).includes(x)\n\t// )\n\n\t// // Must provide empty object to prevent reference side-effect\n\t// const customStore = Object.assign({}, customAStore, customBStore)\n\n\t// for (const union of unioned)\n\t// \tcustomStore[union] = mergeObjectArray(\n\t// \t\tcustomAStore[union],\n\t// \t\tcustomBStore[union]\n\t// \t)\n\n\treturn {\n\t\t...a,\n\t\t...b,\n\t\t// Merge local hook first\n\t\t// @ts-ignore\n\t\tbody: b?.body ?? a?.body,\n\t\t// @ts-ignore\n\t\theaders: b?.headers ?? a?.headers,\n\t\t// @ts-ignore\n\t\tparams: b?.params ?? a?.params,\n\t\t// @ts-ignore\n\t\tquery: b?.query ?? a?.query,\n\t\t// @ts-ignore\n\t\tresponse: b?.response ?? a?.response,\n\t\ttype: a?.type || b?.type,\n\t\tdetail: mergeDeep(\n\t\t\t// @ts-ignore\n\t\t\tb?.detail ?? {},\n\t\t\t// @ts-ignore\n\t\t\ta?.detail ?? {}\n\t\t),\n\t\tparse: mergeObjectArray(a?.parse as any, b?.parse),\n\t\ttransform: mergeObjectArray(a?.transform, b?.transform),\n\t\tbeforeHandle: mergeObjectArray(a?.beforeHandle, b?.beforeHandle),\n\t\tafterHandle: mergeObjectArray(a?.afterHandle, b?.afterHandle),\n\t\tonResponse: mergeObjectArray(a?.onResponse, b?.onResponse) as any,\n\t\tmapResponse: mergeObjectArray(a?.mapResponse, b?.mapResponse) as any,\n\t\ttrace: mergeObjectArray(a?.trace, b?.trace) as any,\n\t\terror: mergeObjectArray(a?.error, b?.error)\n\t}\n}\n\nexport const getSchemaValidator = (\n\ts: TSchema | string | undefined,\n\t{\n\t\tmodels = {},\n\t\tadditionalProperties = false,\n\t\tdynamic = false\n\t}: {\n\t\tmodels?: Record<string, TSchema>\n\t\tadditionalProperties?: boolean\n\t\tdynamic?: boolean\n\t}\n) => {\n\tif (!s) return\n\tif (typeof s === 'string' && !(s in models)) return\n\n\tconst schema: TSchema = typeof s === 'string' ? models[s] : s\n\n\t// @ts-ignore\n\tif (schema.type === 'object' && 'additionalProperties' in schema === false)\n\t\tschema.additionalProperties = additionalProperties\n\n\tif (dynamic)\n\t\treturn {\n\t\t\tschema,\n\t\t\treferences: '',\n\t\t\tcheckFunc: () => {},\n\t\t\tcode: '',\n\t\t\tCheck: (value: unknown) => Value.Check(schema, value),\n\t\t\tErrors: (value: unknown) => Value.Errors(schema, value),\n\t\t\tCode: () => ''\n\t\t} as unknown as TypeCheck<TSchema>\n\n\treturn TypeCompiler.Compile(schema, Object.values(models))\n}\n\nexport const getResponseSchemaValidator = (\n\ts: InputSchema['response'] | undefined,\n\t{\n\t\tmodels = {},\n\t\tadditionalProperties = false,\n\t\tdynamic = false\n\t}: {\n\t\tmodels?: Record<string, TSchema>\n\t\tadditionalProperties?: boolean\n\t\tdynamic?: boolean\n\t}\n): Record<number, TypeCheck<any>> | undefined => {\n\tif (!s) return\n\tif (typeof s === 'string' && !(s in models)) return\n\n\tconst maybeSchemaOrRecord = typeof s === 'string' ? models[s] : s\n\n\tconst compile = (schema: TSchema, references?: TSchema[]) => {\n\t\tif (dynamic)\n\t\t\treturn {\n\t\t\t\tschema,\n\t\t\t\treferences: '',\n\t\t\t\tcheckFunc: () => {},\n\t\t\t\tcode: '',\n\t\t\t\tCheck: (value: unknown) => Value.Check(schema, value),\n\t\t\t\tErrors: (value: unknown) => Value.Errors(schema, value),\n\t\t\t\tCode: () => ''\n\t\t\t} as unknown as TypeCheck<TSchema>\n\n\t\treturn TypeCompiler.Compile(schema, references)\n\t}\n\n\tif (Kind in maybeSchemaOrRecord) {\n\t\tif ('additionalProperties' in maybeSchemaOrRecord === false)\n\t\t\tmaybeSchemaOrRecord.additionalProperties = additionalProperties\n\n\t\treturn {\n\t\t\t200: compile(maybeSchemaOrRecord, Object.values(models))\n\t\t}\n\t}\n\n\tconst record: Record<number, TypeCheck<any>> = {}\n\n\tObject.keys(maybeSchemaOrRecord).forEach((status): TSchema | undefined => {\n\t\tconst maybeNameOrSchema = maybeSchemaOrRecord[+status]\n\n\t\tif (typeof maybeNameOrSchema === 'string') {\n\t\t\tif (maybeNameOrSchema in models) {\n\t\t\t\tconst schema = models[maybeNameOrSchema]\n\t\t\t\tschema.type === 'object' &&\n\t\t\t\t\t'additionalProperties' in schema === false\n\n\t\t\t\t// Inherits model maybe already compiled\n\t\t\t\trecord[+status] =\n\t\t\t\t\tKind in schema\n\t\t\t\t\t\t? compile(schema, Object.values(models))\n\t\t\t\t\t\t: schema\n\t\t\t}\n\n\t\t\treturn undefined\n\t\t}\n\n\t\tif (\n\t\t\tmaybeNameOrSchema.type === 'object' &&\n\t\t\t'additionalProperties' in maybeNameOrSchema === false\n\t\t)\n\t\t\tmaybeNameOrSchema.additionalProperties = additionalProperties\n\n\t\t// Inherits model maybe already compiled\n\t\trecord[+status] =\n\t\t\tKind in maybeNameOrSchema\n\t\t\t\t? compile(maybeNameOrSchema, Object.values(models))\n\t\t\t\t: maybeNameOrSchema\n\t})\n\n\treturn record\n}\n\nconst isBun = typeof Bun !== 'undefined'\nconst hasHash = isBun && typeof Bun.hash === 'function'\n\n// https://stackoverflow.com/a/52171480\nexport const checksum = (s: string) => {\n\tif (hasHash) return Bun.hash(s) as number\n\n\tlet h = 9\n\n\tfor (let i = 0; i < s.length; ) h = Math.imul(h ^ s.charCodeAt(i++), 9 ** 9)\n\n\treturn (h = h ^ (h >>> 9))\n}\n\nexport const getCookieValidator = ({\n\tvalidator,\n\tdefaultConfig = {},\n\tconfig,\n\tdynamic,\n\tmodels\n}: {\n\tvalidator: TSchema | string | undefined\n\tdefaultConfig: CookieOptions | undefined\n\tconfig: CookieOptions\n\tdynamic: boolean\n\tmodels: Record<string, TSchema> | undefined\n}) => {\n\tlet cookieValidator = getSchemaValidator(validator, {\n\t\tdynamic,\n\t\tmodels,\n\t\tadditionalProperties: true\n\t})\n\n\tif (isNotEmpty(defaultConfig)) {\n\t\tif (cookieValidator) {\n\t\t\t// @ts-expect-error private\n\t\t\tcookieValidator.schema = mergeCookie(\n\t\t\t\t// @ts-expect-error private\n\t\t\t\tcookieValidator.schema,\n\t\t\t\tconfig\n\t\t\t)\n\t\t} else {\n\t\t\tcookieValidator = getSchemaValidator(t.Cookie({}, defaultConfig), {\n\t\t\t\tdynamic,\n\t\t\t\tmodels,\n\t\t\t\tadditionalProperties: true\n\t\t\t})\n\t\t}\n\t}\n\n\treturn cookieValidator\n}\n\nexport const mergeLifeCycle = (\n\ta: LifeCycleStore,\n\tb: LifeCycleStore | LocalHook<any, any, any, any, any, any, any>,\n\tchecksum?: number\n): LifeCycleStore => {\n\tconst injectChecksum = (x: MaybeArray<ElysiaFn> | undefined) => {\n\t\tif (!x) return\n\n\t\tif (!Array.isArray(x)) {\n\t\t\t// ? clone fn is required to prevent side-effect from changing hookType\n\t\t\tconst fn = x\n\n\t\t\tif (checksum && !fn.$elysiaChecksum) fn.$elysiaChecksum = checksum\n\t\t\tif (fn.$elysiaHookType === 'scoped') fn.$elysiaHookType = 'local'\n\n\t\t\treturn fn\n\t\t}\n\n\t\t// ? clone fns is required to prevent side-effect from changing hookType\n\t\tconst fns = [...x]\n\n\t\tfor (const fn of fns) {\n\t\t\tif (checksum && !fn.$elysiaChecksum) fn.$elysiaChecksum = checksum\n\n\t\t\tif (fn.$elysiaHookType === 'scoped') fn.$elysiaHookType = 'local'\n\t\t}\n\n\t\treturn fns\n\t}\n\n\treturn {\n\t\t...a,\n\t\t...b,\n\t\tstart: mergeObjectArray(a.start, injectChecksum(b?.start)),\n\t\trequest: mergeObjectArray(a.request, injectChecksum(b?.request)),\n\t\tparse: mergeObjectArray(a.parse, injectChecksum(b?.parse)),\n\t\ttransform: mergeObjectArray(a.transform, injectChecksum(b?.transform)),\n\t\tbeforeHandle: mergeObjectArray(\n\t\t\ta.beforeHandle,\n\t\t\tinjectChecksum(b?.beforeHandle)\n\t\t),\n\t\tafterHandle: mergeObjectArray(\n\t\t\ta.afterHandle,\n\t\t\tinjectChecksum(b?.afterHandle)\n\t\t),\n\t\tmapResponse: mergeObjectArray(\n\t\t\ta.mapResponse,\n\t\t\tinjectChecksum(b?.mapResponse)\n\t\t),\n\t\tonResponse: mergeObjectArray(\n\t\t\ta.onResponse,\n\t\t\tinjectChecksum(b?.onResponse)\n\t\t),\n\t\t// Already merged on Elysia._use, also logic is more complicated, can't directly merge\n\t\ttrace: a.trace,\n\t\terror: mergeObjectArray(a.error, injectChecksum(b?.error)),\n\t\tstop: mergeObjectArray(a.stop, injectChecksum(b?.stop))\n\t}\n}\n\nexport const asHookType = <T extends MaybeArray<ElysiaFn> | undefined>(\n\tfn: T,\n\tinject: LifeCycleType,\n\t{ skipIfHasType = false }: { skipIfHasType?: boolean } = {}\n): T => {\n\tif (!fn) return fn\n\n\tif (typeof fn === 'function') {\n\t\tif (skipIfHasType) fn.$elysiaHookType ??= inject\n\t\telse fn.$elysiaHookType = inject\n\n\t\treturn fn\n\t}\n\n\tif (!Array.isArray(fn)) return fn\n\n\tfor (const x of fn)\n\t\tif (skipIfHasType) x.$elysiaHookType ??= inject\n\t\telse x.$elysiaHookType = inject\n\n\treturn fn\n}\n\nconst filterGlobal = <T extends MaybeArray<ElysiaFn> | undefined>(\n\tfn: T\n): T | undefined => {\n\tif (!fn) return fn\n\n\tif (typeof fn === 'function')\n\t\tswitch (fn.$elysiaHookType) {\n\t\t\tcase 'global':\n\t\t\tcase 'scoped':\n\t\t\t\treturn fn\n\n\t\t\tdefault:\n\t\t\t\treturn undefined\n\t\t}\n\n\tif (!Array.isArray(fn)) return <any>[]\n\n\tconst array = <any>[]\n\n\tfor (const x of fn)\n\t\tswitch (x.$elysiaHookType) {\n\t\t\tcase 'global':\n\t\t\tcase 'scoped':\n\t\t\t\tarray.push(x)\n\t\t\t\tbreak\n\t\t}\n\n\treturn array as T\n}\n\nexport const filterGlobalHook = (\n\thook: LocalHook<any, any, any, any, any, any, any>\n): LocalHook<any, any, any, any, any, any, any> => {\n\treturn {\n\t\t// rest is validator\n\t\t...hook,\n\t\ttype: hook?.type,\n\t\tdetail: hook?.detail,\n\t\tparse: filterGlobal(hook?.parse),\n\t\ttransform: filterGlobal(hook?.transform),\n\t\tbeforeHandle: filterGlobal(hook?.beforeHandle),\n\t\tafterHandle: filterGlobal(hook?.afterHandle),\n\t\tonResponse: filterGlobal(hook?.onResponse),\n\t\terror: filterGlobal(hook?.error),\n\t\tmapResponse: filterGlobal(hook?.mapResponse)\n\t} as LocalHook<any, any, any, any, any, any, any>\n}\n\nexport const StatusMap = {\n\tContinue: 100,\n\t'Switching Protocols': 101,\n\tProcessing: 102,\n\t'Early Hints': 103,\n\tOK: 200,\n\tCreated: 201,\n\tAccepted: 202,\n\t'Non-Authoritative Information': 203,\n\t'No Content': 204,\n\t'Reset Content': 205,\n\t'Partial Content': 206,\n\t'Multi-Status': 207,\n\t'Already Reported': 208,\n\t'Multiple Choices': 300,\n\t'Moved Permanently': 301,\n\tFound: 302,\n\t'See Other': 303,\n\t'Not Modified': 304,\n\t'Temporary Redirect': 307,\n\t'Permanent Redirect': 308,\n\t'Bad Request': 400,\n\tUnauthorized: 401,\n\t'Payment Required': 402,\n\tForbidden: 403,\n\t'Not Found': 404,\n\t'Method Not Allowed': 405,\n\t'Not Acceptable': 406,\n\t'Proxy Authentication Required': 407,\n\t'Request Timeout': 408,\n\tConflict: 409,\n\tGone: 410,\n\t'Length Required': 411,\n\t'Precondition Failed': 412,\n\t'Payload Too Large': 413,\n\t'URI Too Long': 414,\n\t'Unsupported Media Type': 415,\n\t'Range Not Satisfiable': 416,\n\t'Expectation Failed': 417,\n\t\"I'm a teapot\": 418,\n\t'Misdirected Request': 421,\n\t'Unprocessable Content': 422,\n\tLocked: 423,\n\t'Failed Dependency': 424,\n\t'Too Early': 425,\n\t'Upgrade Required': 426,\n\t'Precondition Required': 428,\n\t'Too Many Requests': 429,\n\t'Request Header Fields Too Large': 431,\n\t'Unavailable For Legal Reasons': 451,\n\t'Internal Server Error': 500,\n\t'Not Implemented': 501,\n\t'Bad Gateway': 502,\n\t'Service Unavailable': 503,\n\t'Gateway Timeout': 504,\n\t'HTTP Version Not Supported': 505,\n\t'Variant Also Negotiates': 506,\n\t'Insufficient Storage': 507,\n\t'Loop Detected': 508,\n\t'Not Extended': 510,\n\t'Network Authentication Required': 511\n} as const\n\nexport const InvertedStatusMap = Object.fromEntries(\n\tObject.entries(StatusMap).map(([k, v]) => [v, k])\n) as {\n\t[K in keyof StatusMap as StatusMap[K]]: K\n}\n\nexport type StatusMap = typeof StatusMap\nexport type InvertedStatusMap = typeof InvertedStatusMap\n\nfunction removeTrailingEquals(digest: string): string {\n\tlet trimmedDigest = digest\n\twhile (trimmedDigest.endsWith('=')) {\n\t\ttrimmedDigest = trimmedDigest.slice(0, -1)\n\t}\n\treturn trimmedDigest\n}\n\nconst encoder = new TextEncoder()\n\nexport const signCookie = async (val: string, secret: string | null) => {\n\tif (typeof val !== 'string')\n\t\tthrow new TypeError('Cookie value must be provided as a string.')\n\n\tif (secret === null) throw new TypeError('Secret key must be provided.')\n\n\tconst secretKey = await crypto.subtle.importKey(\n\t\t'raw',\n\t\tencoder.encode(secret),\n\t\t{ name: 'HMAC', hash: 'SHA-256' },\n\t\tfalse,\n\t\t['sign']\n\t)\n\tconst hmacBuffer = await crypto.subtle.sign(\n\t\t'HMAC',\n\t\tsecretKey,\n\t\tencoder.encode(val)\n\t)\n\n\treturn (\n\t\tval +\n\t\t'.' +\n\t\tremoveTrailingEquals(Buffer.from(hmacBuffer).toString('base64'))\n\t)\n}\n\nexport const unsignCookie = async (input: string, secret: string | null) => {\n\tif (typeof input !== 'string')\n\t\tthrow new TypeError('Signed cookie string must be provided.')\n\n\tif (null === secret) throw new TypeError('Secret key must be provided.')\n\n\tconst tentativeValue = input.slice(0, input.lastIndexOf('.'))\n\tconst expectedInput = await signCookie(tentativeValue, secret)\n\n\treturn expectedInput === input ? tentativeValue : false\n}\n\nexport const traceBackMacro = (\n\textension: unknown,\n\tproperty: Record<string, unknown>,\n\thooks = property\n) => {\n\tif (!extension || typeof extension !== 'object' || !property) return\n\n\tfor (const [key, value] of Object.entries(property)) {\n\t\tif (key in primitiveHookMap || !(key in extension)) continue\n\n\t\tconst v = extension[\n\t\t\tkey as unknown as keyof typeof extension\n\t\t] as BaseMacro[string]\n\n\t\tif (typeof v === 'function') {\n\t\t\tv(value)\n\t\t} else if (typeof v === 'object')\n\t\t\ttraceBackMacro(v as BaseMacro, value as any, hooks)\n\t}\n}\n\nexport const createMacroManager =\n\t({\n\t\tglobalHook,\n\t\tlocalHook\n\t}: {\n\t\tglobalHook: LifeCycleStore\n\t\tlocalHook: LocalHook<any, any, any, any, any, any, any>\n\t}) =>\n\t(stackName: keyof LifeCycleStore) =>\n\t(\n\t\ttype:\n\t\t\t| {\n\t\t\t\t\tinsert?: 'before' | 'after'\n\t\t\t\t\tstack?: 'global' | 'local'\n\t\t\t  }\n\t\t\t| MaybeArray<Function>,\n\t\tfn?: MaybeArray<Function>\n\t) => {\n\t\tif (typeof type === 'function' || Array.isArray(type)) {\n\t\t\tif (!localHook[stackName]) localHook[stackName] = []\n\t\t\tif (typeof localHook[stackName] === 'function')\n\t\t\t\tlocalHook[stackName] = [localHook[stackName]]\n\n\t\t\tif (Array.isArray(type))\n\t\t\t\tlocalHook[stackName] = (\n\t\t\t\t\tlocalHook[stackName] as unknown[]\n\t\t\t\t).concat(type) as any\n\t\t\telse localHook[stackName].push(type)\n\n\t\t\treturn\n\t\t}\n\n\t\tconst { insert = 'after', stack = 'local' } = type\n\n\t\tif (stack === 'global') {\n\t\t\tif (!Array.isArray(fn)) {\n\t\t\t\tif (insert === 'before') {\n\t\t\t\t\t;(globalHook[stackName] as any[]).unshift(fn)\n\t\t\t\t} else {\n\t\t\t\t\t;(globalHook[stackName] as any[]).push(fn)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (insert === 'before') {\n\t\t\t\t\tglobalHook[stackName] = fn.concat(\n\t\t\t\t\t\tglobalHook[stackName] as any\n\t\t\t\t\t) as any\n\t\t\t\t} else {\n\t\t\t\t\tglobalHook[stackName] = (\n\t\t\t\t\t\tglobalHook[stackName] as any[]\n\t\t\t\t\t).concat(fn)\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (!localHook[stackName]) localHook[stackName] = []\n\t\t\tif (typeof localHook[stackName] === 'function')\n\t\t\t\tlocalHook[stackName] = [localHook[stackName]]\n\n\t\t\tif (!Array.isArray(fn)) {\n\t\t\t\tif (insert === 'before') {\n\t\t\t\t\t;(localHook[stackName] as any[]).unshift(fn)\n\t\t\t\t} else {\n\t\t\t\t\t;(localHook[stackName] as any[]).push(fn)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (insert === 'before') {\n\t\t\t\t\tlocalHook[stackName] = fn.concat(localHook[stackName])\n\t\t\t\t} else {\n\t\t\t\t\tlocalHook[stackName] = localHook[stackName].concat(fn)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\nexport const isNumericString = (message: string): boolean => {\n\tif (message.length < 16)\n\t\treturn message.trim().length !== 0 && !Number.isNaN(Number(message))\n\n\t// if 16 digit but less then 9,007,199,254,740,991 then can be parsed\n\tif (message.length === 16) {\n\t\tconst numVal = Number(message)\n\t\tif (numVal.toString() === message)\n\t\t\treturn message.trim().length !== 0 && !Number.isNaN(numVal)\n\t}\n\n\treturn false\n}\n",
  "import type { TSchema } from '@sinclair/typebox'\nimport { Value } from '@sinclair/typebox/value'\nimport type { TypeCheck } from '@sinclair/typebox/compiler'\n\nimport { StatusMap, InvertedStatusMap } from './utils'\n\n// ? Cloudflare worker support\nconst env =\n\ttypeof Bun !== 'undefined'\n\t\t? Bun.env\n\t\t: typeof process !== 'undefined'\n\t\t? process?.env\n\t\t: undefined\n\nexport const ERROR_CODE = Symbol('ElysiaErrorCode')\nexport const ELYSIA_RESPONSE = Symbol('ElysiaResponse')\nexport type ELYSIA_RESPONSE = typeof ELYSIA_RESPONSE\n\nexport const isProduction = (env?.NODE_ENV ?? env?.ENV) === 'production'\n\nexport type ElysiaErrors =\n\t| InternalServerError\n\t| NotFoundError\n\t| ParseError\n\t| ValidationError\n\t| InvalidCookieSignature\n\nexport const error = <\n\tconst Code extends number | keyof StatusMap,\n\tconst T = Code extends keyof InvertedStatusMap\n\t\t? InvertedStatusMap[Code]\n\t\t: Code,\n\tconst Status extends number = Code extends keyof StatusMap\n\t\t? StatusMap[Code]\n\t\t: Code\n>(\n\tcode: Code,\n\tresponse?: T\n): {\n\t[ELYSIA_RESPONSE]: Status\n\tresponse: T\n\t_type: {\n\t\t[ERROR_CODE in Status]: T\n\t}\n} =>\n\t({\n\t\t// @ts-expect-error\n\t\t[ELYSIA_RESPONSE]: StatusMap[code] ?? code,\n\t\tresponse:\n\t\t\tresponse ??\n\t\t\t(code in InvertedStatusMap\n\t\t\t\t? // @ts-expect-error Always correct\n\t\t\t\t  InvertedStatusMap[code]\n\t\t\t\t: code),\n\t\t_type: undefined as any\n\t} as const)\n\nexport class InternalServerError extends Error {\n\tcode = 'INTERNAL_SERVER_ERROR'\n\tstatus = 500\n\n\tconstructor(message?: string) {\n\t\tsuper(message ?? 'INTERNAL_SERVER_ERROR')\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tcode = 'NOT_FOUND'\n\tstatus = 404\n\n\tconstructor(message?: string) {\n\t\tsuper(message ?? 'NOT_FOUND')\n\t}\n}\n\nexport class ParseError extends Error {\n\tcode = 'PARSE'\n\tstatus = 400\n\n\tconstructor(message?: string, public body?: unknown) {\n\t\tsuper(message ?? 'PARSE')\n\t}\n}\n\nexport class InvalidCookieSignature extends Error {\n\tcode = 'INVALID_COOKIE_SIGNATURE'\n\tstatus = 400\n\n\tconstructor(public key: string, message?: string) {\n\t\tsuper(message ?? `\"${key}\" has invalid cookie signature`)\n\t}\n}\n\nexport class ValidationError extends Error {\n\tcode = 'VALIDATION'\n\tstatus = 422\n\n\tconstructor(\n\t\tpublic type: string,\n\t\tpublic validator: TSchema | TypeCheck<any>,\n\t\tpublic value: unknown\n\t) {\n\t\t// @ts-expect-error\n\t\tif (typeof value === 'object' && ELYSIA_RESPONSE in value)\n\t\t\t// @ts-expect-error\n\t\t\tvalue = value.response\n\n\t\tconst error = isProduction\n\t\t\t? undefined\n\t\t\t: 'Errors' in validator\n\t\t\t? validator.Errors(value).First()\n\t\t\t: Value.Errors(validator, value).First()\n\n\t\tconst customError = error?.schema.error\n\t\t\t? typeof error.schema.error === 'function'\n\t\t\t\t? error.schema.error(type, validator, value)\n\t\t\t\t: error.schema.error\n\t\t\t: undefined\n\n\t\tconst accessor = error?.path || 'root'\n\t\tlet message = ''\n\n\t\tif (customError) {\n\t\t\tmessage =\n\t\t\t\ttypeof customError === 'object'\n\t\t\t\t\t? JSON.stringify(customError)\n\t\t\t\t\t: customError + ''\n\t\t} else if (isProduction) {\n\t\t\tmessage = JSON.stringify({\n\t\t\t\ttype: \"validation\",\n\t\t\t\ton: type,\n\t\t\t\tmessage: error?.message,\n\t\t\t\tfound: value\n\t\t\t})\n\t\t} else {\n\t\t\t// @ts-ignore private field\n\t\t\tconst schema = validator?.schema ?? validator\n\t\t\tconst errors =\n\t\t\t\t'Errors' in validator\n\t\t\t\t\t? [...validator.Errors(value)]\n\t\t\t\t\t: [...Value.Errors(validator, value)]\n\n\t\t\t\tlet expected\n\n\t\t\t\ttry {\n\t\t\t\t\texpected = Value.Create(schema)\n\t\t\t\t} catch (error) {\n\t\t\t\t\texpected = {\n\t\t\t\t\t\ttype: 'Could not create expected value',\n\t\t\t\t\t\t// @ts-expect-error\n\t\t\t\t\t\tmessage: error?.message,\n\t\t\t\t\t\terror\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\tmessage = JSON.stringify(\n\t\t\t\t{\n\t\t\t\t\ttype: \"validation\",\n\t\t\t\t\ton: type,\n\t\t\t\t\tproperty: accessor,\n\t\t\t\t\tmessage: error?.message,\n\t\t\t\t\texpected,\n\t\t\t\t\tfound: value,\n\t\t\t\t\terrors\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t\t2\n\t\t\t)\n\t\t}\n\n\t\tsuper(message)\n\n\t\tObject.setPrototypeOf(this, ValidationError.prototype)\n\t}\n\n\tget all() {\n\t\treturn [...this.validator.Errors(this.value)]\n\t}\n\n\tstatic simplifyModel(validator: TSchema | TypeCheck<any>) {\n\t\t// @ts-ignore\n\t\tconst model = 'schema' in validator ? validator.schema : validator\n\n\t\ttry {\n\t\t\treturn Value.Create(model)\n\t\t} catch {\n\t\t\treturn model\n\t\t}\n\t}\n\n\tget model() {\n\t\treturn ValidationError.simplifyModel(this.validator)\n\t}\n\n\ttoResponse(headers?: Record<string, any>) {\n\t\treturn new Response(this.message, {\n\t\t\tstatus: 400,\n\t\t\theaders: {\n\t\t\t\t...headers,\n\t\t\t\t'content-type': 'application/json'\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "import type { ServerWebSocket, WebSocketHandler } from 'bun'\n\nimport type { TSchema } from '@sinclair/typebox'\nimport type { TypeCheck } from '@sinclair/typebox/compiler'\n\nimport { ValidationError } from '../error'\nimport type { Context } from '../context'\n\nimport type { SingletonBase, RouteSchema } from '../types'\n\nexport const websocket: WebSocketHandler<any> = {\n\topen(ws) {\n\t\tws.data.open?.(ws)\n\t},\n\tmessage(ws, message) {\n\t\tws.data.message?.(ws, message)\n\t},\n\tdrain(ws) {\n\t\tws.data.drain?.(ws)\n\t},\n\tclose(ws, code, reason) {\n\t\tws.data.close?.(ws, code, reason)\n\t}\n}\n\nexport class ElysiaWS<\n\tWS extends ServerWebSocket<{\n\t\tid?: string\n\t\tvalidator?: TypeCheck<TSchema>\n\t}>,\n\tRoute extends RouteSchema = RouteSchema,\n\tSingleton extends SingletonBase = {\n\t\tdecorator: {}\n\t\tstore: {}\n\t\tderive: {}\n\t\tresolve: {}\n\t}\n> {\n\tvalidator?: TypeCheck<TSchema>\n\n\tconstructor(public raw: WS, public data: Context<Route, Singleton>) {\n\t\tthis.validator = raw.data.validator\n\t\tif (raw.data.id) {\n\t\t\tthis.id = raw.data.id\n\t\t} else {\n\t\t\tconst array = new Uint32Array(1)\n\t\t\tcrypto.getRandomValues(array)\n\t\t\tthis.id = array[0].toString()\n\t\t}\n\t}\n\n\tget id() {\n\t\treturn this.raw.data.id!\n\t}\n\n\tset id(newID: string) {\n\t\tthis.raw.data.id = newID\n\t}\n\n\tget publish() {\n\t\treturn (\n\t\t\ttopic: string,\n\t\t\tdata: Route['response'] = undefined,\n\t\t\tcompress?: boolean\n\t\t) => {\n\t\t\tif (this.validator?.Check(data) === false)\n\t\t\t\tthrow new ValidationError('message', this.validator, data)\n\n\t\t\tif (typeof data === 'object') data = JSON.stringify(data)\n\n\t\t\tthis.raw.publish(topic, data as unknown as string, compress)\n\n\t\t\treturn this\n\t\t}\n\t}\n\n\tget send() {\n\t\treturn (data: Route['response']) => {\n\t\t\tif (this.validator?.Check(data) === false)\n\t\t\t\tthrow new ValidationError('message', this.validator, data)\n\n\t\t\tif (Buffer.isBuffer(data)) {\n\t\t\t\tthis.raw.send(data as unknown as Buffer)\n\n\t\t\t\treturn this\n\t\t\t}\n\n\t\t\tif (typeof data === 'object') data = JSON.stringify(data)\n\n\t\t\tthis.raw.send(data as unknown as string)\n\n\t\t\treturn this\n\t\t}\n\t}\n\n\tget subscribe() {\n\t\treturn (room: string) => {\n\t\t\tthis.raw.subscribe(room)\n\n\t\t\treturn this\n\t\t}\n\t}\n\n\tget unsubscribe() {\n\t\treturn (room: string) => {\n\t\t\tthis.raw.unsubscribe(room)\n\n\t\t\treturn this\n\t\t}\n\t}\n\n\tget cork() {\n\t\treturn (callback: () => this) => {\n\t\t\tthis.raw.cork(callback as any)\n\n\t\t\treturn this\n\t\t}\n\t}\n\n\tget close() {\n\t\treturn () => {\n\t\t\tthis.raw.close()\n\n\t\t\treturn this\n\t\t}\n\t}\n\n\tget terminate() {\n\t\treturn this.raw.terminate.bind(this.raw)\n\t}\n\n\tget isSubscribed() {\n\t\treturn this.raw.isSubscribed.bind(this.raw)\n\t}\n\n\tget remoteAddress() {\n\t\treturn this.raw.remoteAddress\n\t}\n}\n",
  "import { type Elysia } from '.'\n\nimport { Value } from '@sinclair/typebox/value'\nimport { TypeCheck } from '@sinclair/typebox/compiler'\nimport type { TAnySchema } from '@sinclair/typebox'\n\nimport { parse as parseQuery } from 'fast-querystring'\n\n// @ts-expect-error\nimport decodeURIComponent from 'fast-decode-uri-component'\n\nimport { signCookie } from './utils'\nimport { ParseError, error } from './error'\n\nimport {\n\tmapEarlyResponse,\n\tmapResponse,\n\tmapCompactResponse,\n\tisNotEmpty\n} from './handler'\nimport {\n\tNotFoundError,\n\tValidationError,\n\tInternalServerError,\n\tERROR_CODE,\n\tELYSIA_RESPONSE\n} from './error'\n\nimport { Sucrose, sucrose } from './sucrose'\nimport { parseCookie, type CookieOptions } from './cookies'\n\nimport type {\n\tComposedHandler,\n\tHandler,\n\tLifeCycleStore,\n\tSchemaValidator,\n\tTraceEvent\n} from './types'\n\nconst headersHasToJSON = (new Headers() as Headers).toJSON\nconst requestId = { value: 0 }\n\nconst createReport = ({\n\thasTrace,\n\thasTraceSet = false,\n\taddFn,\n\tcondition = {}\n}: {\n\thasTrace: boolean | number\n\thasTraceSet?: boolean\n\taddFn(string: string): void\n\tcondition: Partial<Record<TraceEvent, boolean>>\n}) => {\n\tif (hasTrace) {\n\t\taddFn(`\\nconst reporter = getReporter()\\n`)\n\n\t\treturn (\n\t\t\tevent: TraceEvent,\n\t\t\t{\n\t\t\t\tname,\n\t\t\t\tattribute = '',\n\t\t\t\tunit = 0\n\t\t\t}: {\n\t\t\t\tname?: string\n\t\t\t\tattribute?: string\n\t\t\t\tunit?: number\n\t\t\t} = {}\n\t\t) => {\n\t\t\tconst dotIndex = event.indexOf('.')\n\t\t\tconst isGroup = dotIndex === -1\n\n\t\t\tif (\n\t\t\t\tevent !== 'request' &&\n\t\t\t\tevent !== 'response' &&\n\t\t\t\t!condition[\n\t\t\t\t\t(isGroup\n\t\t\t\t\t\t? event\n\t\t\t\t\t\t: event.slice(0, dotIndex)) as keyof typeof condition\n\t\t\t\t]\n\t\t\t)\n\t\t\t\treturn () => {\n\t\t\t\t\tif (hasTraceSet && event === 'afterHandle')\n\t\t\t\t\t\taddFn(`\\nawait traceDone\\n`)\n\t\t\t\t}\n\n\t\t\tif (isGroup) name ||= event\n\t\t\telse name ||= 'anonymous'\n\n\t\t\taddFn(\n\t\t\t\t'\\n' +\n\t\t\t\t\t`reporter.emit('event', {\n\t\t\t\t\tid,\n\t\t\t\t\tevent: '${event}',\n\t\t\t\t\ttype: 'begin',\n\t\t\t\t\tname: '${name}',\n\t\t\t\t\ttime: performance.now(),\n\t\t\t\t\t${isGroup ? `unit: ${unit},` : ''}\n\t\t\t\t\t${attribute}\n\t\t\t\t})`.replace(/(\\t| |\\n)/g, '') +\n\t\t\t\t\t'\\n'\n\t\t\t)\n\n\t\t\tlet handled = false\n\n\t\t\treturn () => {\n\t\t\t\tif (handled) return\n\n\t\t\t\thandled = true\n\t\t\t\taddFn(\n\t\t\t\t\t'\\n' +\n\t\t\t\t\t\t`reporter.emit('event', {\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\tevent: '${event}',\n\t\t\t\t\t\t\ttype: 'end',\n\t\t\t\t\t\t\ttime: performance.now()\n\t\t\t\t\t\t})`.replace(/(\\t| |\\n)/g, '') +\n\t\t\t\t\t\t'\\n'\n\t\t\t\t)\n\n\t\t\t\tif (hasTraceSet && event === 'afterHandle')\n\t\t\t\t\taddFn(`\\nawait traceDone\\n`)\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn () => () => {}\n\t}\n}\n\nexport const hasReturn = (fnLiteral: string) => {\n\tconst parenthesisEnd = fnLiteral.indexOf(')')\n\n\t// Is direct arrow function return eg. () => 1\n\tif (\n\t\tfnLiteral.charCodeAt(parenthesisEnd + 2) === 61 &&\n\t\tfnLiteral.charCodeAt(parenthesisEnd + 5) !== 123\n\t) {\n\t\treturn true\n\t}\n\n\treturn fnLiteral.includes('return')\n}\n\nconst composeValidationFactory = (\n\thasErrorHandler: boolean,\n\t{\n\t\tinjectResponse = ''\n\t}: {\n\t\tinjectResponse?: string\n\t} = {}\n) => ({\n\tcomposeValidation: (type: string, value = `c.${type}`) =>\n\t\thasErrorHandler\n\t\t\t? `c.set.status = 422; throw new ValidationError('${type}', ${type}, ${value})`\n\t\t\t: `c.set.status = 422; return new ValidationError('${type}', ${type}, ${value}).toResponse(c.set.headers)`,\n\tcomposeResponseValidation: (name = 'r') => {\n\t\tconst returnError = hasErrorHandler\n\t\t\t? `throw new ValidationError('response', response[c.set.status], ${name})`\n\t\t\t: `return new ValidationError('response', response[c.set.status], ${name}).toResponse(c.set.headers)`\n\n\t\treturn `\\n${injectResponse}\n\n\t\t\tif(typeof ${name} === \"object\" && ELYSIA_RESPONSE in ${name}) {\n\t\t\t\tif(!(${name} instanceof Response) && response[${name}[ELYSIA_RESPONSE]]?.Check(${name}.response) === false) {\n\t\t\t\t\tif(!(response instanceof Error)) {\n\t\t\t\t\t\tc.set.status = ${name}[ELYSIA_RESPONSE]\n\n\t\t\t\t\t\t${returnError}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if(!(${name} instanceof Response) && response[c.set.status]?.Check(${name}) === false) {\n\t\t\t\tif(!(response instanceof Error))\n\t\t\t\t\t${returnError}\n\t\t\t}\\n`\n\t}\n})\n\nconst KindSymbol = Symbol.for('TypeBox.Kind')\n\nexport const hasType = (type: string, schema: TAnySchema) => {\n\tif (!schema) return\n\n\tif (KindSymbol in schema && schema[KindSymbol] === type) return true\n\n\tif (schema.type === 'object') {\n\t\tconst properties = schema.properties as Record<string, TAnySchema>\n\t\tfor (const key of Object.keys(properties)) {\n\t\t\tconst property = properties[key]\n\n\t\t\tif (property.type === 'object') {\n\t\t\t\tif (hasType(type, property)) return true\n\t\t\t} else if (property.anyOf) {\n\t\t\t\tfor (let i = 0; i < property.anyOf.length; i++)\n\t\t\t\t\tif (hasType(type, property.anyOf[i])) return true\n\t\t\t}\n\n\t\t\tif (KindSymbol in property && property[KindSymbol] === type)\n\t\t\t\treturn true\n\t\t}\n\n\t\treturn false\n\t}\n\n\treturn (\n\t\tschema.properties &&\n\t\tKindSymbol in schema.properties &&\n\t\tschema.properties[KindSymbol] === type\n\t)\n}\n\nexport const hasProperty = (expectedProperty: string, schema: TAnySchema) => {\n\tif (!schema) return\n\n\tif (schema.type === 'object') {\n\t\tconst properties = schema.properties as Record<string, TAnySchema>\n\n\t\tif (!properties) return false\n\n\t\tfor (const key of Object.keys(properties)) {\n\t\t\tconst property = properties[key]\n\n\t\t\tif (expectedProperty in property) return true\n\n\t\t\tif (property.type === 'object') {\n\t\t\t\tif (hasProperty(expectedProperty, property)) return true\n\t\t\t} else if (property.anyOf) {\n\t\t\t\tfor (let i = 0; i < property.anyOf.length; i++) {\n\t\t\t\t\tif (hasProperty(expectedProperty, property.anyOf[i]))\n\t\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false\n\t}\n\n\treturn expectedProperty in schema\n}\n\nconst TransformSymbol = Symbol.for('TypeBox.Transform')\n\nexport const hasTransform = (schema: TAnySchema) => {\n\tif (!schema) return\n\n\tif (schema.type === 'object' && schema.properties) {\n\t\tconst properties = schema.properties as Record<string, TAnySchema>\n\t\tfor (const key of Object.keys(properties)) {\n\t\t\tconst property = properties[key]\n\n\t\t\tif (property.type === 'object') {\n\t\t\t\tif (hasTransform(property)) return true\n\t\t\t} else if (property.anyOf) {\n\t\t\t\tfor (let i = 0; i < property.anyOf.length; i++)\n\t\t\t\t\tif (hasTransform(property.anyOf[i])) return true\n\t\t\t}\n\n\t\t\tconst hasTransformSymbol = TransformSymbol in property\n\t\t\tif (hasTransformSymbol) return true\n\t\t}\n\n\t\treturn false\n\t}\n\n\treturn (\n\t\tTransformSymbol in schema ||\n\t\t(schema.properties && TransformSymbol in schema.properties)\n\t)\n}\n\n/**\n * This function will return the type of unioned if all unioned type is the same.\n * It's intent to use for content-type mapping only\n *\n * ```ts\n * t.Union([\n *   t.Object({\n *     password: t.String()\n *   }),\n *   t.Object({\n *     token: t.String()\n *   })\n * ])\n * ```\n */\nconst getUnionedType = (validator: TypeCheck<any> | undefined) => {\n\tif (!validator) return\n\n\t// @ts-ignore\n\tconst schema = validator?.schema\n\n\tif (schema && 'anyOf' in schema) {\n\t\tlet foundDifference = false\n\t\tconst type: string = schema.anyOf[0].type\n\n\t\tfor (const validator of schema.anyOf as { type: string }[]) {\n\t\t\tif (validator.type !== type) {\n\t\t\t\tfoundDifference = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif (!foundDifference) return type\n\t}\n\n\t// @ts-ignore\n\treturn validator.schema?.type\n}\n\nconst matchFnReturn = /(?:return|=>) \\S+\\(/g\n\nexport const isAsync = (fn: Function) => {\n\tif (fn.constructor.name === 'AsyncFunction') return true\n\n\tconst literal = fn.toString()\n\tif (literal.includes('=> response.clone(')) return false\n\n\treturn !!literal.match(matchFnReturn)\n}\n\nexport const composeHandler = ({\n\tapp,\n\tpath,\n\tmethod,\n\tlocalHook,\n\thooks,\n\tvalidator,\n\thandler,\n\tallowMeta = false,\n\tappInference: { event: eventInference, trace: traceInference }\n}: {\n\tapp: Elysia<any, any, any, any, any, any, any, any>\n\tpath: string\n\tmethod: string\n\thooks: LifeCycleStore\n\tlocalHook: LifeCycleStore\n\tvalidator: SchemaValidator\n\thandler: unknown | Handler<any, any>\n\tallowMeta?: boolean\n\tappInference: {\n\t\tevent: Sucrose.Inference\n\t\ttrace: Sucrose.TraceInference\n\t}\n}): ComposedHandler => {\n\tconst isHandleFn = typeof handler === 'function'\n\tif (!isHandleFn) handler = mapCompactResponse(handler)\n\n\tconst hasErrorHandler =\n\t\t(app.config.forceErrorEncapsulation &&\n\t\t\t(isHandleFn ||\n\t\t\t\thooks.afterHandle.length > 0 ||\n\t\t\t\thooks.beforeHandle.length > 0 ||\n\t\t\t\thooks.transform.length > 0)) ||\n\t\thooks.error.length > 0 ||\n\t\tapp.event.error.length > 0 ||\n\t\ttypeof Bun === 'undefined' ||\n\t\thooks.onResponse.length > 0 ||\n\t\thooks.onResponse.length > 0 ||\n\t\t!!hooks.trace.length\n\n\tconst handle = isHandleFn ? `handler(c)` : `handler`\n\tconst handleResponse = hooks.onResponse.length\n\t\t? `\\n;(async () => {${hooks.onResponse\n\t\t\t\t.map((_, i) => `await res${i}(c)`)\n\t\t\t\t.join(';')}})();\\n`\n\t\t: ''\n\n\tconst traceConditions: Record<\n\t\tExclude<TraceEvent, `${string}.unit` | 'request' | 'response' | 'exit'>,\n\t\tboolean\n\t> = traceInference\n\n\tconst hasTrace = hooks.trace.length > 0\n\tlet fnLiteral = ''\n\n\tconst inference = sucrose(\n\t\tObject.assign(localHook, {\n\t\t\thandler: handler as any\n\t\t}),\n\t\teventInference\n\t)\n\n\tconst hasQuery = inference.query || !!validator.query\n\n\tconst hasBody =\n\t\tmethod !== '$INTERNALWS' &&\n\t\tmethod !== 'GET' &&\n\t\tmethod !== 'HEAD' &&\n\t\thooks.type !== 'none' &&\n\t\t(inference.body || !!validator.body)\n\n\t// @ts-expect-error private\n\tconst defaultHeaders = app.setHeaders\n\tconst hasDefaultHeaders =\n\t\tdefaultHeaders && !!Object.keys(defaultHeaders).length\n\n\t// ? defaultHeaders doesn't imply that user will use headers in handler\n\tconst hasHeaders = inference.headers || validator.headers\n\tconst hasCookie = inference.cookie || !!validator.cookie\n\n\t// @ts-ignore private property\n\tconst cookieMeta = validator?.cookie?.schema as {\n\t\tsecrets?: string | string[]\n\t\tsign: string[] | true\n\t\tproperties: { [x: string]: Object }\n\t}\n\n\tlet encodeCookie = ''\n\n\tif (cookieMeta?.sign) {\n\t\tif (!cookieMeta.secrets)\n\t\t\tthrow new Error(\n\t\t\t\t`t.Cookie required secret which is not set in (${method}) ${path}.`\n\t\t\t)\n\n\t\tconst secret = !cookieMeta.secrets\n\t\t\t? undefined\n\t\t\t: typeof cookieMeta.secrets === 'string'\n\t\t\t? cookieMeta.secrets\n\t\t\t: cookieMeta.secrets[0]\n\n\t\tencodeCookie += `const _setCookie = c.set.cookie\n\t\tif(_setCookie) {`\n\n\t\tif (cookieMeta.sign === true) {\n\t\t\tencodeCookie += `for(const [key, cookie] of Object.entries(_setCookie)) {\n\t\t\t\tc.set.cookie[key].value = await signCookie(cookie.value, '${secret}')\n\t\t\t}`\n\t\t} else\n\t\t\tfor (const name of cookieMeta.sign) {\n\t\t\t\tencodeCookie += `if(_setCookie['${name}']?.value) { c.set.cookie['${name}'].value = await signCookie(_setCookie['${name}'].value, '${secret}') }\\n`\n\t\t\t}\n\n\t\tencodeCookie += '}\\n'\n\t}\n\n\tconst { composeValidation, composeResponseValidation } =\n\t\tcomposeValidationFactory(hasErrorHandler)\n\n\tif (hasHeaders) {\n\t\t// This function is Bun specific\n\t\t// @ts-ignore\n\t\tfnLiteral += headersHasToJSON\n\t\t\t? `c.headers = c.request.headers.toJSON()\\n`\n\t\t\t: `c.headers = {}\n                for (const [key, value] of c.request.headers.entries())\n\t\t\t\t\tc.headers[key] = value\n\t\t\t\t`\n\t}\n\n\tif (hasCookie) {\n\t\tconst get = (name: keyof CookieOptions, defaultValue?: unknown) => {\n\t\t\t// @ts-ignore\n\t\t\tconst value = cookieMeta?.[name] ?? defaultValue\n\t\t\tif (!value)\n\t\t\t\treturn typeof defaultValue === 'string'\n\t\t\t\t\t? `${name}: \"${defaultValue}\",`\n\t\t\t\t\t: `${name}: ${defaultValue},`\n\n\t\t\tif (typeof value === 'string') return `${name}: '${value}',`\n\t\t\tif (value instanceof Date)\n\t\t\t\treturn `${name}: new Date(${value.getTime()}),`\n\n\t\t\treturn `${name}: ${value},`\n\t\t}\n\n\t\tconst options = cookieMeta\n\t\t\t? `{\n\t\t\tsecret: ${\n\t\t\t\tcookieMeta.secrets !== undefined\n\t\t\t\t\t? typeof cookieMeta.secrets === 'string'\n\t\t\t\t\t\t? `'${cookieMeta.secrets}'`\n\t\t\t\t\t\t: '[' +\n\t\t\t\t\t\t  cookieMeta.secrets.reduce(\n\t\t\t\t\t\t\t\t(a, b) => a + `'${b}',`,\n\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t  ) +\n\t\t\t\t\t\t  ']'\n\t\t\t\t\t: 'undefined'\n\t\t\t},\n\t\t\tsign: ${\n\t\t\t\tcookieMeta.sign === true\n\t\t\t\t\t? true\n\t\t\t\t\t: cookieMeta.sign !== undefined\n\t\t\t\t\t? '[' +\n\t\t\t\t\t  cookieMeta.sign.reduce((a, b) => a + `'${b}',`, '') +\n\t\t\t\t\t  ']'\n\t\t\t\t\t: 'undefined'\n\t\t\t},\n\t\t\t${get('domain')}\n\t\t\t${get('expires')}\n\t\t\t${get('httpOnly')}\n\t\t\t${get('maxAge')}\n\t\t\t${get('path', '/')}\n\t\t\t${get('priority')}\n\t\t\t${get('sameSite')}\n\t\t\t${get('secure')}\n\t\t}`\n\t\t\t: 'undefined'\n\n\t\tif (hasHeaders)\n\t\t\tfnLiteral += `\\nc.cookie = await parseCookie(c.set, c.headers.cookie, ${options})\\n`\n\t\telse\n\t\t\tfnLiteral += `\\nc.cookie = await parseCookie(c.set, c.request.headers.get('cookie'), ${options})\\n`\n\t}\n\n\tif (hasQuery) {\n\t\tlet destructured = [] as string[]\n\n\t\t// @ts-ignore\n\t\tif (validator.query && validator.query.schema.type === 'object') {\n\t\t\t// @ts-ignore\n\t\t\tdestructured = Object.keys(validator.query.schema.properties)\n\t\t} else\n\t\t\tfor (const query of inference.queries)\n\t\t\t\tif (destructured.indexOf(query) === -1) destructured.push(query)\n\n\t\tif (\n\t\t\tapp.config.forceDynamicQuery === true ||\n\t\t\tinference.unknownQueries === true ||\n\t\t\t!destructured.length\n\t\t) {\n\t\t\tfnLiteral += `if(c.qi !== -1) {\n\t\t\t\tc.query = parseQuery(decodeURIComponent(c.request.url.slice(c.qi + 1)).replace(/\\\\+/g, ' '))\n\t\t\t} else c.query = {}`\n\t\t} else {\n\t\t\tfnLiteral += `if(c.qi !== -1) {\n\t\t\t\tlet url = decodeURIComponent(\n\t\t\t\t\tc.request.url.slice(c.qi)\n\t\t\t\t\t\t.replace(/\\\\+/g, ' ')\n\t\t\t\t\t)\n\n\t\t\t\t${destructured\n\t\t\t\t\t.map(\n\t\t\t\t\t\t(name, index) => `\n\t\t\t\t\t\t${index === 0 ? 'let' : ''} memory = url.indexOf('&${name}=')\n\t\t\t\t\t\tif(memory === -1) memory = url.indexOf('?${name}=')\n\t\t\t\t\t\tlet a${index}\n\n\t\t\t\t\t\tif(memory !== -1) {\n\t\t\t\t\t\t\tconst start = memory + ${name.length + 2}\n\t\t\t\t\t\t\tmemory = url.indexOf('&', start)\n\n\t\t\t\t\t\t\tif(memory === -1) a${index} = url.slice(start)\n\t\t\t\t\t\t\telse a${index} = url.slice(start, memory)\n\t\t\t\t\t\t}`\n\t\t\t\t\t)\n\t\t\t\t\t.join('\\n')}\n\n\t\t\t\tc.query = {\n\t\t\t\t\t${destructured.map((name, index) => `'${name}': a${index}`).join(', ')}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tc.query = {}\n\t\t\t}`\n\t\t}\n\t}\n\n\tconst hasTraceSet = traceInference.set\n\tconst hasSet =\n\t\tinference.cookie ||\n\t\tinference.set ||\n\t\thasTraceSet ||\n\t\thasHeaders ||\n\t\thasDefaultHeaders\n\n\tif (hasTrace) fnLiteral += '\\nconst id = c.$$requestId\\n'\n\n\tconst report = createReport({\n\t\thasTrace,\n\t\thasTraceSet,\n\t\tcondition: traceConditions,\n\t\taddFn: (word) => {\n\t\t\tfnLiteral += word\n\t\t}\n\t})\n\n\tfnLiteral += hasErrorHandler ? '\\n try {\\n' : ''\n\n\tif (hasTraceSet) {\n\t\tfnLiteral += `\\nconst traceDone = Promise.all([`\n\t\tfor (let i = 0; i < hooks.trace.length; i++) {\n\t\t\tfnLiteral += `new Promise(r => { reporter.once(\\`res\\${id}.${i}\\`, r) }),`\n\t\t}\n\t\tfnLiteral += `])\\n`\n\t}\n\n\tconst isAsyncHandler = typeof handler === 'function' && isAsync(handler)\n\n\tconst maybeAsync =\n\t\thasCookie ||\n\t\thasBody ||\n\t\thasTraceSet ||\n\t\tisAsyncHandler ||\n\t\t!!hooks.mapResponse.length ||\n\t\thooks.parse.length > 0 ||\n\t\thooks.afterHandle.some(isAsync) ||\n\t\thooks.beforeHandle.some(isAsync) ||\n\t\thooks.transform.some(isAsync)\n\n\tconst endParse = report('parse', {\n\t\tunit: hooks.parse.length\n\t})\n\n\tif (hasBody) {\n\t\tconst type = getUnionedType(validator?.body)\n\n\t\tif (hooks.type && !Array.isArray(hooks.type)) {\n\t\t\tif (hooks.type) {\n\t\t\t\tswitch (hooks.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tif (hasErrorHandler)\n\t\t\t\t\t\t\tfnLiteral += `const body = await c.request.text()\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tc.body = JSON.parse(body)\n\t\t\t\t\t\t\t} catch {\n\t\t\t\t\t\t\t\tthrow new ParseError('Failed to parse body as found: ' + (typeof body === \"string\" ? \"'\" + body + \"'\" : body), body)\n\t\t\t\t\t\t\t}`\n\t\t\t\t\t\telse fnLiteral += `c.body = await c.request.json()`\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'text':\n\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\tfnLiteral += `c.body = await c.request.text()\\n`\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\tfnLiteral += `c.body = parseQuery(await c.request.text())\\n`\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'arrayBuffer':\n\t\t\t\t\tcase 'application/octet-stream':\n\t\t\t\t\t\tfnLiteral += `c.body = await c.request.arrayBuffer()\\n`\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'formdata':\n\t\t\t\t\tcase 'multipart/form-data':\n\t\t\t\t\t\tfnLiteral += `c.body = {}\n\n\t\t\t\t\t\tconst form = await c.request.formData()\n\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\tif (c.body[key])\n\t\t\t\t\t\t\t\tcontinue\n\n\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\tif (value.length === 1)\n\t\t\t\t\t\t\t\tc.body[key] = value[0]\n\t\t\t\t\t\t\telse c.body[key] = value\n\t\t\t\t\t\t}\\n`\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hooks.parse.length) fnLiteral += '}}'\n\t\t} else {\n\t\t\tconst getAotParser = () => {\n\t\t\t\tif (hooks.parse.length && type && !Array.isArray(hooks.type)) {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst schema = validator?.body?.schema\n\n\t\t\t\t\tif (\n\t\t\t\t\t\ttypeof schema === 'object' &&\n\t\t\t\t\t\t(hasType('File', schema) || hasType('Files', schema))\n\t\t\t\t\t)\n\t\t\t\t\t\treturn `c.body = {}\n\n\t\t\t\t\t\t\t\tconst form = await c.request.formData()\n\t\t\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\t\t\tif (c.body[key])\n\t\t\t\t\t\t\t\t\t\tcontinue\n\n\t\t\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\t\t\tif (value.length === 1)\n\t\t\t\t\t\t\t\t\t\tc.body[key] = value[0]\n\t\t\t\t\t\t\t\t\telse c.body[key] = value\n\t\t\t\t\t\t\t\t}`\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst aotParse = getAotParser()\n\n\t\t\tif (aotParse) fnLiteral += aotParse\n\t\t\telse {\n\t\t\t\tfnLiteral += '\\n'\n\t\t\t\tfnLiteral += hasHeaders\n\t\t\t\t\t? `let contentType = c.headers['content-type']`\n\t\t\t\t\t: `let contentType = c.request.headers.get('content-type')`\n\n\t\t\t\tfnLiteral += `\n\t\t\t\tif (contentType) {\n\t\t\t\t\tconst index = contentType.indexOf(';')\n\t\t\t\t\tif (index !== -1) contentType = contentType.substring(0, index)\\n`\n\n\t\t\t\tif (hooks.parse.length) {\n\t\t\t\t\tfnLiteral += `let used = false\\n`\n\n\t\t\t\t\tconst endReport = report('parse', {\n\t\t\t\t\t\tunit: hooks.parse.length\n\t\t\t\t\t})\n\n\t\t\t\t\tfor (let i = 0; i < hooks.parse.length; i++) {\n\t\t\t\t\t\tconst endUnit = report('parse.unit', {\n\t\t\t\t\t\t\tname: hooks.parse[i].name\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tconst name = `bo${i}`\n\n\t\t\t\t\t\tif (i !== 0) fnLiteral += `if(!used) {\\n`\n\n\t\t\t\t\t\tfnLiteral += `let ${name} = parse[${i}](c, contentType)\\n`\n\t\t\t\t\t\tfnLiteral += `if(${name} instanceof Promise) ${name} = await ${name}\\n`\n\t\t\t\t\t\tfnLiteral += `if(${name} !== undefined) { c.body = ${name}; used = true }\\n`\n\n\t\t\t\t\t\tendUnit()\n\n\t\t\t\t\t\tif (i !== 0) fnLiteral += `}`\n\t\t\t\t\t}\n\n\t\t\t\t\tendReport()\n\t\t\t\t}\n\n\t\t\t\tif (hooks.parse.length) fnLiteral += `if (!used)`\n\n\t\t\t\tfnLiteral += `\n\t\t\t\tswitch (contentType) {\n\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\t${\n\t\t\t\t\t\t\thasErrorHandler\n\t\t\t\t\t\t\t\t? `\n\t\t\t\t\t\tconst body = await c.request.text()\n\t\t\t\t\t\t\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tc.body = JSON.parse(body)\n\t\t\t\t\t\t} catch {\n\t\t\t\t\t\t\tthrow new ParseError('Failed to parse body as found: ' + (typeof body === \"string\" ? \"'\" + body + \"'\" : body), body)\n\t\t\t\t\t\t}\n\t\t\t\t\t\t`\n\t\t\t\t\t\t\t\t: `c.body = await c.request.json()\\n`\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\tc.body = await c.request.text()\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\tc.body = parseQuery(await c.request.text())\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'application/octet-stream':\n\t\t\t\t\t\tc.body = await c.request.arrayBuffer();\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'multipart/form-data':\n\t\t\t\t\t\tc.body = {}\n\n\t\t\t\t\t\tconst form = await c.request.formData()\n\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\tif (c.body[key])\n\t\t\t\t\t\t\t\tcontinue\n\n\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\tif (value.length === 1)\n\t\t\t\t\t\t\t\tc.body[key] = value[0]\n\t\t\t\t\t\t\telse c.body[key] = value\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\\n`\n\n\t\t\t\tfnLiteral += '}\\n'\n\t\t\t}\n\t\t}\n\n\t\tfnLiteral += '\\n'\n\t}\n\n\tendParse()\n\n\tif (hooks?.transform) {\n\t\tconst endTransform = report('transform', {\n\t\t\tunit: hooks.transform.length\n\t\t})\n\n\t\tfor (let i = 0; i < hooks.transform.length; i++) {\n\t\t\tconst transform = hooks.transform[i]\n\n\t\t\tconst endUnit = report('transform.unit', {\n\t\t\t\tname: transform.name\n\t\t\t})\n\n\t\t\tif (transform.$elysia === 'derive')\n\t\t\t\tfnLiteral += isAsync(transform)\n\t\t\t\t\t? `Object.assign(c, await transform[${i}](c));`\n\t\t\t\t\t: `Object.assign(c, transform[${i}](c));`\n\t\t\telse\n\t\t\t\tfnLiteral += isAsync(transform)\n\t\t\t\t\t? `await transform[${i}](c);`\n\t\t\t\t\t: `transform[${i}](c);`\n\n\t\t\tendUnit()\n\t\t}\n\n\t\tendTransform()\n\t}\n\n\tif (validator) {\n\t\tfnLiteral += '\\n'\n\n\t\tif (validator.headers) {\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.headers.params))\n\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tvalidator.headers.schema,\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as Object\n\t\t\t\t)) {\n\t\t\t\t\tconst parsed =\n\t\t\t\t\t\ttypeof value === 'object'\n\t\t\t\t\t\t\t? JSON.stringify(value)\n\t\t\t\t\t\t\t: `'${value}'`\n\n\t\t\t\t\tif (parsed)\n\t\t\t\t\t\tfnLiteral += `c.headers['${key}'] ??= ${parsed}\\n`\n\t\t\t\t}\n\n\t\t\tfnLiteral += `if(headers.Check(c.headers) === false) {\n\t\t\t\t${composeValidation('headers')}\n\t\t\t}`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasTransform(validator.headers.schema))\n\t\t\t\tfnLiteral += `\\nc.headers = headers.Decode(c.headers)\\n`\n\t\t}\n\n\t\tif (validator.params) {\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.params.schema))\n\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tvalidator.params.schema,\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as Object\n\t\t\t\t)) {\n\t\t\t\t\tconst parsed =\n\t\t\t\t\t\ttypeof value === 'object'\n\t\t\t\t\t\t\t? JSON.stringify(value)\n\t\t\t\t\t\t\t: `'${value}'`\n\n\t\t\t\t\tif (parsed)\n\t\t\t\t\t\tfnLiteral += `c.params['${key}'] ??= ${parsed}\\n`\n\t\t\t\t}\n\n\t\t\tfnLiteral += `if(params.Check(c.params) === false) {\n\t\t\t\t${composeValidation('params')}\n\t\t\t}`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasTransform(validator.params.schema))\n\t\t\t\tfnLiteral += `\\nc.params = params.Decode(c.params)\\n`\n\t\t}\n\n\t\tif (validator.query) {\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.query.schema))\n\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tvalidator.query.schema,\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as Object\n\t\t\t\t)) {\n\t\t\t\t\tconst parsed =\n\t\t\t\t\t\ttypeof value === 'object'\n\t\t\t\t\t\t\t? JSON.stringify(value)\n\t\t\t\t\t\t\t: `'${value}'`\n\n\t\t\t\t\tif (parsed) fnLiteral += `c.query['${key}'] ??= ${parsed}\\n`\n\t\t\t\t}\n\n\t\t\tfnLiteral += `if(query.Check(c.query) === false) {\n\t\t\t\t${composeValidation('query')}\n\t\t\t}`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasTransform(validator.query.schema))\n\t\t\t\t// Decode doesn't work with Object.create(null)\n\t\t\t\tfnLiteral += `\\nc.query = query.Decode(Object.assign({}, c.query))\\n`\n\t\t}\n\n\t\tif (validator.body) {\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.body.schema))\n\t\t\t\tfnLiteral += `if(body.Check(c.body) === false) {\n    \t\t\t\tc.body = Object.assign(${JSON.stringify(\n\t\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tvalidator.body.schema,\n\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t) ?? {}\n\t\t\t\t\t)}, c.body)\n\n    \t\t\t\tif(body.Check(c.query) === false) {\n        \t\t\t\t${composeValidation('body')}\n     \t\t\t}\n            }`\n\t\t\telse\n\t\t\t\tfnLiteral += `if(body.Check(c.body) === false) {\n\t\t\t${composeValidation('body')}\n\t\t}`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasTransform(validator.body.schema))\n\t\t\t\tfnLiteral += `\\nc.body = body.Decode(c.body)\\n`\n\t\t}\n\n\t\t// @ts-ignore\n\t\tif (isNotEmpty(validator.cookie?.schema.properties ?? {})) {\n\t\t\tfnLiteral += `const cookieValue = {}\n    \t\t\tfor(const [key, value] of Object.entries(c.cookie))\n    \t\t\t\tcookieValue[key] = value.value\\n`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.cookie.schema))\n\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tvalidator.cookie.schema,\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as Object\n\t\t\t\t)) {\n\t\t\t\t\tfnLiteral += `cookieValue['${key}'] = ${\n\t\t\t\t\t\ttypeof value === 'object'\n\t\t\t\t\t\t\t? JSON.stringify(value)\n\t\t\t\t\t\t\t: value\n\t\t\t\t\t}\\n`\n\t\t\t\t}\n\n\t\t\tfnLiteral += `if(cookie.Check(cookieValue) === false) {\n\t\t\t\t${composeValidation('cookie', 'cookieValue')}\n\t\t\t}`\n\n\t\t\t// // @ts-ignore\n\t\t\t// if (hasTransform(validator.cookie.schema))\n\t\t\t// \tfnLiteral += `\\nc.cookie = params.Decode(c.cookie)\\n`\n\t\t}\n\t}\n\n\tif (hooks?.beforeHandle) {\n\t\tconst endBeforeHandle = report('beforeHandle', {\n\t\t\tunit: hooks.beforeHandle.length\n\t\t})\n\n\t\tfor (let i = 0; i < hooks.beforeHandle.length; i++) {\n\t\t\tconst beforeHandle = hooks.beforeHandle[i]\n\n\t\t\tconst endUnit = report('beforeHandle.unit', {\n\t\t\t\tname: beforeHandle.name\n\t\t\t})\n\n\t\t\tconst returning = hasReturn(beforeHandle.toString())\n\n\t\t\t// @ts-ignore\n\t\t\tif (beforeHandle.$elysia === 'resolve') {\n\t\t\t\tfnLiteral += isAsync(beforeHandle)\n\t\t\t\t\t? `Object.assign(c, await beforeHandle[${i}](c));`\n\t\t\t\t\t: `Object.assign(c, beforeHandle[${i}](c));`\n\t\t\t} else if (!returning) {\n\t\t\t\tfnLiteral += isAsync(beforeHandle)\n\t\t\t\t\t? `await beforeHandle[${i}](c);\\n`\n\t\t\t\t\t: `beforeHandle[${i}](c);\\n`\n\n\t\t\t\tendUnit()\n\t\t\t} else {\n\t\t\t\tfnLiteral += isAsync(beforeHandle)\n\t\t\t\t\t? `be = await beforeHandle[${i}](c);\\n`\n\t\t\t\t\t: `be = beforeHandle[${i}](c);\\n`\n\n\t\t\t\tendUnit()\n\n\t\t\t\tfnLiteral += `if(be !== undefined) {\\n`\n\t\t\t\tconst endAfterHandle = report('afterHandle', {\n\t\t\t\t\tunit: hooks.transform.length\n\t\t\t\t})\n\t\t\t\tif (hooks.afterHandle) {\n\t\t\t\t\treport('handle', {\n\t\t\t\t\t\tname: isHandleFn\n\t\t\t\t\t\t\t? (handler as Function).name\n\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t})()\n\n\t\t\t\t\tfor (let i = 0; i < hooks.afterHandle.length; i++) {\n\t\t\t\t\t\tconst returning = hasReturn(\n\t\t\t\t\t\t\thooks.afterHandle[i].toString()\n\t\t\t\t\t\t)\n\n\t\t\t\t\t\tconst endUnit = report('afterHandle.unit', {\n\t\t\t\t\t\t\tname: hooks.afterHandle[i].name\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tfnLiteral += `c.response = be\\n`\n\n\t\t\t\t\t\tif (!returning) {\n\t\t\t\t\t\t\tfnLiteral += isAsync(hooks.afterHandle[i])\n\t\t\t\t\t\t\t\t? `await afterHandle[${i}](c, be)\\n`\n\t\t\t\t\t\t\t\t: `afterHandle[${i}](c, be)\\n`\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfnLiteral += isAsync(hooks.afterHandle[i])\n\t\t\t\t\t\t\t\t? `af = await afterHandle[${i}](c)\\n`\n\t\t\t\t\t\t\t\t: `af = afterHandle[${i}](c)\\n`\n\n\t\t\t\t\t\t\tfnLiteral += `if(af !== undefined) { c.response = be = af }\\n`\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tendUnit()\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tendBeforeHandle()\n\t\t\t\tendAfterHandle()\n\n\t\t\t\tif (validator.response)\n\t\t\t\t\tfnLiteral += composeResponseValidation('be')\n\n\t\t\t\tif (hooks.mapResponse.length) {\n\t\t\t\t\tfnLiteral += `c.response = be`\n\n\t\t\t\t\tfor (let i = 0; i < hooks.mapResponse.length; i++) {\n\t\t\t\t\t\tfnLiteral += `\\nif(mr === undefined) {\n\t\t\t\t\t\t\tmr = onMapResponse[${i}](c)\n\t\t\t\t\t\t\tif(mr instanceof Promise) mr = await mr\n\t\t\t\t\t\t\tif(mr !== undefined) c.response = mr\n\t\t\t\t\t\t}\\n`\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfnLiteral += encodeCookie\n\t\t\t\tfnLiteral += `return mapEarlyResponse(be, c.set, c.request)}\\n`\n\t\t\t}\n\t\t}\n\n\t\tendBeforeHandle()\n\t}\n\n\tif (hooks?.afterHandle.length) {\n\t\tconst endHandle = report('handle', {\n\t\t\tname: isHandleFn ? (handler as Function).name : undefined\n\t\t})\n\n\t\tif (hooks.afterHandle.length)\n\t\t\tfnLiteral += isAsyncHandler\n\t\t\t\t? `let r = c.response = await ${handle};\\n`\n\t\t\t\t: `let r = c.response = ${handle};\\n`\n\t\telse\n\t\t\tfnLiteral += isAsyncHandler\n\t\t\t\t? `let r = await ${handle};\\n`\n\t\t\t\t: `let r = ${handle};\\n`\n\n\t\tendHandle()\n\n\t\tconst endAfterHandle = report('afterHandle', {\n\t\t\tunit: hooks.afterHandle.length\n\t\t})\n\n\t\tfor (let i = 0; i < hooks.afterHandle.length; i++) {\n\t\t\tconst returning = hasReturn(hooks.afterHandle[i].toString())\n\n\t\t\tconst endUnit = report('afterHandle.unit', {\n\t\t\t\tname: hooks.afterHandle[i].name\n\t\t\t})\n\n\t\t\tif (!returning) {\n\t\t\t\tfnLiteral += isAsync(hooks.afterHandle[i])\n\t\t\t\t\t? `await afterHandle[${i}](c)\\n`\n\t\t\t\t\t: `afterHandle[${i}](c)\\n`\n\n\t\t\t\tendUnit()\n\t\t\t} else {\n\t\t\t\tfnLiteral += isAsync(hooks.afterHandle[i])\n\t\t\t\t\t? `af = await afterHandle[${i}](c)\\n`\n\t\t\t\t\t: `af = afterHandle[${i}](c)\\n`\n\n\t\t\t\tendUnit()\n\n\t\t\t\tif (validator.response) {\n\t\t\t\t\tfnLiteral += `if(af !== undefined) {`\n\t\t\t\t\tendAfterHandle()\n\n\t\t\t\t\tfnLiteral += composeResponseValidation('af')\n\n\t\t\t\t\tfnLiteral += `c.response = af }`\n\t\t\t\t} else {\n\t\t\t\t\tfnLiteral += `if(af !== undefined) {`\n\t\t\t\t\tendAfterHandle()\n\n\t\t\t\t\tfnLiteral += `c.response = af}\\n`\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tendAfterHandle()\n\n\t\tfnLiteral += `r = c.response\\n`\n\n\t\tif (validator.response) fnLiteral += composeResponseValidation()\n\n\t\tfnLiteral += encodeCookie\n\n\t\tif (hooks.mapResponse.length) {\n\t\t\tfor (let i = 0; i < hooks.mapResponse.length; i++) {\n\t\t\t\tfnLiteral += `\\nmr = onMapResponse[${i}](c)\n\t\t\t\tif(mr instanceof Promise) mr = await mr\n\t\t\t\tif(mr !== undefined) c.response = mr\\n`\n\t\t\t}\n\t\t}\n\n\t\tif (hasSet) fnLiteral += `return mapResponse(r, c.set, c.request)\\n`\n\t\telse fnLiteral += `return mapCompactResponse(r, c.request)\\n`\n\t} else {\n\t\tconst endHandle = report('handle', {\n\t\t\tname: isHandleFn ? (handler as Function).name : undefined\n\t\t})\n\n\t\tif (validator.response || hooks.mapResponse.length) {\n\t\t\tfnLiteral += isAsyncHandler\n\t\t\t\t? `let r = await ${handle};\\n`\n\t\t\t\t: `let r = ${handle};\\n`\n\n\t\t\tendHandle()\n\n\t\t\tif (validator.response) fnLiteral += composeResponseValidation()\n\n\t\t\treport('afterHandle')()\n\n\t\t\tif (hooks.mapResponse.length) {\n\t\t\t\tfnLiteral += 'c.response = r'\n\t\t\t\tfor (let i = 0; i < hooks.mapResponse.length; i++) {\n\t\t\t\t\tfnLiteral += `\\nif(mr === undefined) { \n\t\t\t\t\t\tmr = onMapResponse[${i}](c)\n\t\t\t\t\t\tif(mr instanceof Promise) mr = await mr\n    \t\t\t\t\tif(mr !== undefined) r = c.response = mr\n\t\t\t\t\t}\\n`\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfnLiteral += encodeCookie\n\n\t\t\tif (handler instanceof Response) {\n\t\t\t\tfnLiteral +=\n\t\t\t\t\tinference.set || hasDefaultHeaders\n\t\t\t\t\t\t? `if(\n\t\t\t\t\tisNotEmpty(c.set.headers) ||\n\t\t\t\t\tc.set.status !== 200 ||\n\t\t\t\t\tc.set.redirect ||\n\t\t\t\t\tc.set.cookie\n\t\t\t\t)\n\t\t\t\t\treturn mapResponse(${handle}.clone(), c.set, c.request)\n\t\t\t\telse\n\t\t\t\t\treturn ${handle}.clone()`\n\t\t\t\t\t\t: `return ${handle}.clone()`\n\n\t\t\t\tfnLiteral += '\\n'\n\t\t\t} else if (hasSet)\n\t\t\t\tfnLiteral += `return mapResponse(r, c.set, c.request)\\n`\n\t\t\telse fnLiteral += `return mapCompactResponse(r, c.request)\\n`\n\t\t} else if (traceConditions.handle || hasCookie) {\n\t\t\tfnLiteral += isAsyncHandler\n\t\t\t\t? `let r = await ${handle};\\n`\n\t\t\t\t: `let r = ${handle};\\n`\n\n\t\t\tendHandle()\n\n\t\t\treport('afterHandle')()\n\n\t\t\tif (hooks.mapResponse.length) {\n\t\t\t\tfnLiteral += 'c.response = r'\n\t\t\t\tfor (let i = 0; i < hooks.mapResponse.length; i++) {\n\t\t\t\t\tfnLiteral += `\\nif(mr === undefined) {\n\t\t\t\t\t\t\tmr = onMapResponse[${i}](c)\n\t\t\t\t\t\t\tif(mr instanceof Promise) mr = await mr\n    \t\t\t\t\t\tif(mr !== undefined) r = c.response = mr\n\t\t\t\t\t\t}\\n`\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfnLiteral += encodeCookie\n\n\t\t\tif (hasSet) fnLiteral += `return mapResponse(r, c.set, c.request)\\n`\n\t\t\telse fnLiteral += `return mapCompactResponse(r, c.request)\\n`\n\t\t} else {\n\t\t\tendHandle()\n\n\t\t\tconst handled = isAsyncHandler ? `await ${handle}` : handle\n\n\t\t\treport('afterHandle')()\n\n\t\t\tif (handler instanceof Response) {\n\t\t\t\tfnLiteral +=\n\t\t\t\t\tinference.set || hasDefaultHeaders\n\t\t\t\t\t\t? `if(\n\t\t\t\t\tisNotEmpty(c.set.headers) ||\n\t\t\t\t\tc.set.status !== 200 ||\n\t\t\t\t\tc.set.redirect ||\n\t\t\t\t\tc.set.cookie\n\t\t\t\t)\n\t\t\t\t\treturn mapResponse(${handle}.clone(), c.set, c.request)\n\t\t\t\telse\n\t\t\t\t\treturn ${handle}.clone()`\n\t\t\t\t\t\t: `return ${handle}.clone()`\n\n\t\t\t\tfnLiteral += '\\n'\n\t\t\t} else if (hasSet)\n\t\t\t\tfnLiteral += `return mapResponse(${handled}, c.set, c.request)\\n`\n\t\t\telse\n\t\t\t\tfnLiteral += `return mapCompactResponse(${handled}, c.request)\\n`\n\t\t}\n\t}\n\n\tif (hasErrorHandler || handleResponse) {\n\t\tfnLiteral += `\\n} catch(error) {`\n\t\tif (!maybeAsync) fnLiteral += `return (async () => {`\n\n\t\tfnLiteral += `const set = c.set\\nif (!set.status || set.status < 300) set.status = error?.status || 500\\n`\n\n\t\tconst endError = report('error', {\n\t\t\tunit: hooks.error.length\n\t\t})\n\n\t\tif (hooks.error.length) {\n\t\t\tfnLiteral += `\n\t\t\t\tc.error = error\n\t\t\t\tc.code = error.code ?? error[ERROR_CODE] ?? \"UNKNOWN\"\n\t\t\t`\n\n\t\t\tfor (let i = 0; i < hooks.error.length; i++) {\n\t\t\t\tconst name = `er${i}`\n\t\t\t\tconst endUnit = report('error.unit', {\n\t\t\t\t\tname: hooks.error[i].name\n\t\t\t\t})\n\n\t\t\t\tfnLiteral += `\\nlet ${name} = handleErrors[${i}](c)\\n`\n\n\t\t\t\tif (isAsync(hooks.error[i]))\n\t\t\t\t\tfnLiteral += `if (${name} instanceof Promise) ${name} = await ${name}\\n`\n\n\t\t\t\tendUnit()\n\n\t\t\t\tfnLiteral += `${name} = mapEarlyResponse(${name}, set, c.request)\\n`\n\t\t\t\tfnLiteral += `if (${name}) {`\n\t\t\t\tfnLiteral += `return ${name} }\\n`\n\t\t\t}\n\t\t}\n\n\t\tendError()\n\n\t\tfnLiteral += `return handleError(c, error, true)\\n\\n`\n\n\t\tif (!maybeAsync) fnLiteral += '})()'\n\n\t\tfnLiteral += '}'\n\n\t\tif (handleResponse || hasTrace) {\n\t\t\tfnLiteral += ` finally { `\n\n\t\t\tconst endResponse = report('response', {\n\t\t\t\tunit: hooks.onResponse.length\n\t\t\t})\n\n\t\t\tfnLiteral += handleResponse\n\n\t\t\tendResponse()\n\n\t\t\tfnLiteral += `}`\n\t\t}\n\t}\n\n\tfnLiteral = `const {\n\t\thandler,\n\t\thandleError,\n\t\thooks: {\n\t\t\ttransform,\n\t\t\tresolve,\n\t\t\tbeforeHandle,\n\t\t\tafterHandle,\n\t\t\tmapResponse: onMapResponse,\n\t\t\tparse,\n\t\t\terror: handleErrors,\n\t\t\tonResponse\n\t\t},\n\t\tvalidator: {\n\t\t\tbody,\n\t\t\theaders,\n\t\t\tparams,\n\t\t\tquery,\n\t\t\tresponse,\n\t\t\tcookie\n\t\t},\n\t\tutils: {\n\t\t\tmapResponse,\n\t\t\tmapCompactResponse,\n\t\t\tmapEarlyResponse,\n\t\t\tparseQuery,\n\t\t\tisNotEmpty\n\t\t},\n\t\terror: {\n\t\t\tNotFoundError,\n\t\t\tValidationError,\n\t\t\tInternalServerError,\n\t\t\tParseError\n\t\t},\n\t\tschema,\n\t\tdefinitions,\n\t\tERROR_CODE,\n\t\tgetReporter,\n\t\trequestId,\n\t\tparseCookie,\n\t\tsignCookie,\n\t\tdecodeURIComponent,\n\t\tELYSIA_RESPONSE\n\t} = hooks\n\n\t${\n\t\thooks.onResponse.length\n\t\t\t? `const ${hooks.onResponse\n\t\t\t\t\t.map((x, i) => `res${i} = onResponse[${i}]`)\n\t\t\t\t\t.join(',')}`\n\t\t\t: ''\n\t}\n\n\treturn ${maybeAsync ? 'async' : ''} function handle(c) {\n\t\t${hooks.beforeHandle.length ? 'let be' : ''}\n\t\t${hooks.afterHandle.length ? 'let af' : ''}\n\t\t${hooks.mapResponse.length ? 'let mr' : ''}\n\n\t\t${allowMeta ? 'c.schema = schema; c.defs = definitions' : ''}\n\t\t${fnLiteral}\n\t}`\n\n\tconst createHandler = Function('hooks', fnLiteral)\n\n\treturn createHandler({\n\t\thandler,\n\t\thooks,\n\t\tvalidator,\n\t\t// @ts-expect-error\n\t\thandleError: app.handleError,\n\t\tutils: {\n\t\t\tmapResponse,\n\t\t\tmapCompactResponse,\n\t\t\tmapEarlyResponse,\n\t\t\tparseQuery,\n\t\t\tisNotEmpty\n\t\t},\n\t\terror: {\n\t\t\tNotFoundError,\n\t\t\tValidationError,\n\t\t\tInternalServerError,\n\t\t\tParseError\n\t\t},\n\t\tschema: app.router.history,\n\t\t// @ts-expect-error\n\t\tdefinitions: app.definitions.type,\n\t\tERROR_CODE,\n\t\t// @ts-expect-error\n\t\tgetReporter: () => app.reporter,\n\t\trequestId,\n\t\tparseCookie,\n\t\tsignCookie,\n\t\tdecodeURIComponent,\n\t\tELYSIA_RESPONSE\n\t})\n}\n\nexport const composeGeneralHandler = (\n\tapp: Elysia<any, any, any, any, any, any, any, any>\n) => {\n\tconst inference = {\n\t\tevent: {\n\t\t\t// @ts-expect-error\n\t\t\t...app.inference.event,\n\t\t\t// @ts-expect-error\n\t\t\tqueries: [...app.inference.event.queries]\n\t\t},\n\t\t// @ts-expect-error\n\t\ttrace: { ...app.inference.trace }\n\t}\n\n\tlet decoratorsLiteral = ''\n\tlet fnLiteral = ''\n\n\t// @ts-expect-error private\n\tconst defaultHeaders = app.setHeaders\n\n\t// @ts-ignore\n\tfor (const key of Object.keys(app.singleton.decorator))\n\t\tdecoratorsLiteral += `,${key}: app.singleton.decorator.${key}`\n\n\tconst router = app.router\n\tconst hasTrace = app.event.trace.length > 0\n\n\tlet findDynamicRoute = `\n\tconst route = router.find(request.method, path) ${\n\t\trouter.http.root.ALL ? '?? router.find(\"ALL\", path)' : ''\n\t}\n\n\tif (route === null)\n\t\treturn ${\n\t\t\tapp.event.error.length\n\t\t\t\t? `app.handleError(ctx, notFound)`\n\t\t\t\t: app.event.request.length\n\t\t\t\t? `new Response(error404Message, {\n\t\t\t\t\tstatus: ctx.set.status === 200 ? 404 : ctx.set.status,\n\t\t\t\t\theaders: ctx.set.headers\n\t\t\t\t})`\n\t\t\t\t: `error404.clone()`\n\t\t}\n\n\tctx.params = route.params\\n`\n\n\tconst shouldPrecompile =\n\t\tapp.config.precompile === true ||\n\t\t(typeof app.config.precompile === 'object' &&\n\t\t\tapp.config.precompile.compose === true)\n\n\tif (!shouldPrecompile)\n\t\tfindDynamicRoute += `\n\t\t\tif(route.store.composed)\n\t\t\t\treturn route.store.composed(ctx)\n\n\t\t\tif(route.store.compose)\n\t\t\t\treturn (route.store.compose())(ctx)`\n\telse findDynamicRoute += `return route.store(ctx)`\n\n\tfindDynamicRoute += '\\n'\n\n\tlet switchMap = ``\n\tfor (const [path, { code, all }] of Object.entries(router.static.http.map))\n\t\tswitchMap += `case '${path}':\\nswitch(request.method) {\\n${code}\\n${\n\t\t\tall ?? `default: break map`\n\t\t}}\\n\\n`\n\n\tconst maybeAsync = app.event.request.some(isAsync)\n\n\tconst init = `\\n\n\tconst url = request.url\n\tconst s = url.indexOf('/', 11)\n\tconst qi = url.indexOf('?', s + 1)\n\tlet path\n\tif(qi === -1)\n\t\tpath = url.substring(s)\n\telse \n\t\tpath = url.substring(s, qi)\\n`\n\n\tfnLiteral += `const {\n\t\tapp,\n\t\tmapEarlyResponse,\n\t\tNotFoundError,\n\t\trequestId,\n\t\tgetReporter,\n\t\thandleError,\n\t\terror\n\t} = data\n\n\tconst store = app.singleton.store\n\tconst staticRouter = app.router.static.http\n\tconst wsRouter = app.router.ws\n\tconst router = app.router.http\n\n\tconst notFound = new NotFoundError()\n\n\t${app.event.request.length ? `const onRequest = app.event.request` : ''}\n\t${router.static.http.variables}\n\t${\n\t\tapp.event.error.length\n\t\t\t? ''\n\t\t\t: `\n\tconst error404Message = notFound.message.toString()\n\tconst error404 = new Response(error404Message, { status: 404 });\n\t`\n\t}\n\n\treturn ${maybeAsync ? 'async' : ''} function map(request) {\\n`\n\n\tif (app.event.request.length) fnLiteral += `let re`\n\n\tconst report = createReport({\n\t\thasTrace,\n\t\thasTraceSet: inference.trace.set,\n\t\tcondition: {\n\t\t\trequest: inference.trace.request\n\t\t},\n\t\taddFn: (word) => {\n\t\t\tfnLiteral += word\n\t\t}\n\t})\n\n\tif (app.event.request.length) {\n\t\tfnLiteral += `\n\t\t\t${hasTrace ? 'const id = +requestId.value++' : ''}\n\n\t\t\tconst ctx = {\n\t\t\t\trequest,\n\t\t\t\tstore,\n\t\t\t\tset: {\n\t\t\t\t\theaders: ${\n\t\t\t\t\t\tObject.keys(defaultHeaders ?? {}).length\n\t\t\t\t\t\t\t? 'Object.assign({}, app.setHeaders)'\n\t\t\t\t\t\t\t: '{}'\n\t\t\t\t\t},\n\t\t\t\t\tstatus: 200\n\t\t\t\t},\n\t\t\t\terror\n\t\t\t\t${hasTrace ? ',$$requestId: +id' : ''}\n\t\t\t\t${decoratorsLiteral}\n\t\t\t}\n\t\t`\n\n\t\tconst endReport = report('request', {\n\t\t\tattribute: 'ctx',\n\t\t\tunit: app.event.request.length\n\t\t})\n\n\t\tfnLiteral += `\\n try {\\n`\n\n\t\tfor (let i = 0; i < app.event.request.length; i++) {\n\t\t\tconst fn = app.event.request[i]\n\t\t\tconst withReturn = hasReturn(fn.toString())\n\t\t\tconst maybeAsync = isAsync(fn)\n\n\t\t\tconst endUnit = report('request.unit', {\n\t\t\t\tname: app.event.request[i].name\n\t\t\t})\n\n\t\t\tif (withReturn) {\n\t\t\t\tfnLiteral += `re = mapEarlyResponse(\n\t\t\t\t\t${maybeAsync ? 'await' : ''} onRequest[${i}](ctx),\n\t\t\t\t\tctx.set,\n\t\t\t\t\trequest\n\t\t\t\t)\\n`\n\n\t\t\t\tendUnit()\n\n\t\t\t\tfnLiteral += `if(re !== undefined) return re\\n`\n\t\t\t} else {\n\t\t\t\tfnLiteral += `${\n\t\t\t\t\tmaybeAsync ? 'await' : ''\n\t\t\t\t} onRequest[${i}](ctx)\\n`\n\t\t\t\tendUnit()\n\t\t\t}\n\t\t}\n\n\t\tfnLiteral += `} catch (error) {\n\t\t\treturn app.handleError(ctx, error)\n\t\t}`\n\n\t\tendReport()\n\n\t\tfnLiteral += init\n\t\tfnLiteral += `\\nctx.qi = qi\\n ctx.path = path\\n`\n\t} else {\n\t\tfnLiteral += init\n\t\tfnLiteral += `${hasTrace ? 'const id = +requestId.value++' : ''}\n\t\tconst ctx = {\n\t\t\trequest,\n\t\t\tstore,\n\t\t\tqi,\n\t\t\tpath,\n\t\t\tset: {\n\t\t\t\theaders: ${\n\t\t\t\t\tObject.keys(defaultHeaders ?? {}).length\n\t\t\t\t\t\t? 'Object.assign({}, app.setHeaders)'\n\t\t\t\t\t\t: '{}'\n\t\t\t\t},\n\t\t\t\tstatus: 200\n\t\t\t},\n\t\t\terror\n\t\t\t${hasTrace ? ',$$requestId: id' : ''}\n\t\t\t${decoratorsLiteral}\n\t\t}`\n\n\t\treport('request', {\n\t\t\tunit: app.event.request.length,\n\t\t\tattribute:\n\t\t\t\tinference.trace.context ||\n\t\t\t\tinference.trace.store ||\n\t\t\t\tinference.trace.set\n\t\t\t\t\t? 'ctx'\n\t\t\t\t\t: ''\n\t\t})()\n\t}\n\n\tconst wsPaths = app.router.static.ws\n\tconst wsRouter = app.router.ws\n\n\tif (Object.keys(wsPaths).length || wsRouter.history.length) {\n\t\tfnLiteral += `\n\t\t\tif(request.method === 'GET') {\n\t\t\t\tswitch(path) {`\n\n\t\tfor (const [path, index] of Object.entries(wsPaths)) {\n\t\t\tfnLiteral += `\n\t\t\t\t\tcase '${path}':\n\t\t\t\t\t\tif(request.headers.get('upgrade') === 'websocket')\n\t\t\t\t\t\t\treturn st${index}(ctx)\n\n\t\t\t\t\t\tbreak`\n\t\t}\n\n\t\tfnLiteral += `\n\t\t\t\tdefault:\n\t\t\t\t\tif(request.headers.get('upgrade') === 'websocket') {\n\t\t\t\t\t\tconst route = wsRouter.find('ws', path)\n\n\t\t\t\t\t\tif(route) {\n\t\t\t\t\t\t\tctx.params = route.params\n\n\t\t\t\t\t\t\treturn route.store(ctx)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\\n`\n\t}\n\n\tfnLiteral += `\n\t\tmap: switch(path) {\n\t\t\t${switchMap}\n\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\n\t\t${findDynamicRoute}\n\t}`\n\n\tconst handleError = composeErrorHandler(app) as any\n\n\t// @ts-ignore\n\tapp.handleError = handleError\n\n\treturn Function(\n\t\t'data',\n\t\tfnLiteral\n\t)({\n\t\tapp,\n\t\tmapEarlyResponse,\n\t\tNotFoundError,\n\t\t// @ts-ignore\n\t\tgetReporter: () => app.reporter,\n\t\trequestId,\n\t\thandleError,\n\t\terror\n\t})\n}\n\nexport const composeErrorHandler = (\n\tapp: Elysia<any, any, any, any, any, any, any, any>\n) => {\n\tlet fnLiteral = `const {\n\t\tapp: { event: { error: onError, onResponse: res } },\n\t\tmapResponse,\n\t\tERROR_CODE,\n\t\tELYSIA_RESPONSE\n\t} = inject\n\n\treturn ${\n\t\tapp.event.error.find(isAsync) ? 'async' : ''\n\t} function(context, error, skipGlobal) {\n\t\tlet r\n\n\t\tconst { set } = context\n\n\t\tcontext.code = error.code\n\t\tcontext.error = error\n\n\t\tif(error[ELYSIA_RESPONSE]) {\n\t\t\terror.status = error[ELYSIA_RESPONSE]\n\t\t\terror.message = error.response\n\t\t}\\n`\n\n\tfor (let i = 0; i < app.event.error.length; i++) {\n\t\tconst handler = app.event.error[i]\n\n\t\tconst response = `${\n\t\t\tisAsync(handler) ? 'await ' : ''\n\t\t}onError[${i}](context)`\n\n\t\tfnLiteral += '\\nif(skipGlobal !== true) {\\n'\n\n\t\tif (hasReturn(handler.toString()))\n\t\t\tfnLiteral += `r = ${response}; if(r !== undefined) {\n\t\t\t\tif(r instanceof Response) return r\n\n\t\t\t\tif(r[ELYSIA_RESPONSE]) {\n\t\t\t\t\terror.status = error[ELYSIA_RESPONSE]\n\t\t\t\t\terror.message = error.response\n\t\t\t\t}\n\t\t\n\t\t\t\tif(set.status === 200) set.status = error.status\n\t\t\t\treturn mapResponse(r, set, context.request)\n\t\t\t}\\n`\n\t\telse fnLiteral += response + '\\n'\n\n\t\tfnLiteral += '\\n}\\n'\n\t}\n\n\tfnLiteral += `if(error.constructor.name === \"ValidationError\" || error.constructor.name === \"TransformDecodeError\") {\n\t\tset.status = error.status ?? 422\n\t\treturn new Response(\n\t\t\terror.message,\n\t\t\t{ \n\t\t\t\theaders: Object.assign(\n\t\t\t\t\t{ 'content-type': 'application/json'}, \n\t\t\t\t\tset.headers\n\t\t\t\t), \n\t\t\t\tstatus: set.status\n\t\t\t}\n\t\t)\n\t} else {\n\t\tif(error.code && typeof error.status === \"number\")\n\t\t\treturn new Response(\n\t\t\t\terror.message,\n\t\t\t\t{ headers: set.headers, status: error.status }\n\t\t\t)\n\n\t\treturn mapResponse(error, set, context.request)\n\t}\n}`\n\n\treturn Function(\n\t\t'inject',\n\t\tfnLiteral\n\t)({\n\t\tapp,\n\t\tmapResponse,\n\t\tERROR_CODE,\n\t\tELYSIA_RESPONSE\n\t})\n}\n\nexport const jitRoute = (\n\tindex: number\n) => `if(stc${index}) return stc${index}(ctx)\nif(st${index}.compose) return (stc${index} = st${index}.compose())(ctx)\n\nreturn st${index}(ctx)`\n",
  "import { type Elysia } from '.'\n\nimport { Value } from '@sinclair/typebox/value'\nimport { TypeCheck } from '@sinclair/typebox/compiler'\nimport type { TAnySchema } from '@sinclair/typebox'\n\nimport { parse as parseQuery } from 'fast-querystring'\n\n// @ts-expect-error\nimport decodeURIComponent from 'fast-decode-uri-component'\n\nimport { signCookie } from './utils'\nimport { ParseError, error } from './error'\n\nimport {\n\tmapEarlyResponse,\n\tmapResponse,\n\tmapCompactResponse,\n\tisNotEmpty\n} from './handler'\nimport {\n\tNotFoundError,\n\tValidationError,\n\tInternalServerError,\n\tERROR_CODE,\n\tELYSIA_RESPONSE\n} from './error'\n\nimport { Sucrose, sucrose } from './sucrose'\nimport { parseCookie, type CookieOptions } from './cookies'\n\nimport type {\n\tComposedHandler,\n\tHandler,\n\tLifeCycleStore,\n\tSchemaValidator,\n\tTraceEvent\n} from './types'\n\nconst headersHasToJSON = (new Headers() as Headers).toJSON\nconst requestId = { value: 0 }\n\nconst createReport = ({\n\thasTrace,\n\thasTraceSet = false,\n\taddFn,\n\tcondition = {}\n}: {\n\thasTrace: boolean | number\n\thasTraceSet?: boolean\n\taddFn(string: string): void\n\tcondition: Partial<Record<TraceEvent, boolean>>\n}) => {\n\tif (hasTrace) {\n\t\taddFn(`\\nconst reporter = getReporter()\\n`)\n\n\t\treturn (\n\t\t\tevent: TraceEvent,\n\t\t\t{\n\t\t\t\tname,\n\t\t\t\tattribute = '',\n\t\t\t\tunit = 0\n\t\t\t}: {\n\t\t\t\tname?: string\n\t\t\t\tattribute?: string\n\t\t\t\tunit?: number\n\t\t\t} = {}\n\t\t) => {\n\t\t\tconst dotIndex = event.indexOf('.')\n\t\t\tconst isGroup = dotIndex === -1\n\n\t\t\tif (\n\t\t\t\tevent !== 'request' &&\n\t\t\t\tevent !== 'response' &&\n\t\t\t\t!condition[\n\t\t\t\t\t(isGroup\n\t\t\t\t\t\t? event\n\t\t\t\t\t\t: event.slice(0, dotIndex)) as keyof typeof condition\n\t\t\t\t]\n\t\t\t)\n\t\t\t\treturn () => {\n\t\t\t\t\tif (hasTraceSet && event === 'afterHandle')\n\t\t\t\t\t\taddFn(`\\nawait traceDone\\n`)\n\t\t\t\t}\n\n\t\t\tif (isGroup) name ||= event\n\t\t\telse name ||= 'anonymous'\n\n\t\t\taddFn(\n\t\t\t\t'\\n' +\n\t\t\t\t\t`reporter.emit('event', {\n\t\t\t\t\tid,\n\t\t\t\t\tevent: '${event}',\n\t\t\t\t\ttype: 'begin',\n\t\t\t\t\tname: '${name}',\n\t\t\t\t\ttime: performance.now(),\n\t\t\t\t\t${isGroup ? `unit: ${unit},` : ''}\n\t\t\t\t\t${attribute}\n\t\t\t\t})`.replace(/(\\t| |\\n)/g, '') +\n\t\t\t\t\t'\\n'\n\t\t\t)\n\n\t\t\tlet handled = false\n\n\t\t\treturn () => {\n\t\t\t\tif (handled) return\n\n\t\t\t\thandled = true\n\t\t\t\taddFn(\n\t\t\t\t\t'\\n' +\n\t\t\t\t\t\t`reporter.emit('event', {\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\tevent: '${event}',\n\t\t\t\t\t\t\ttype: 'end',\n\t\t\t\t\t\t\ttime: performance.now()\n\t\t\t\t\t\t})`.replace(/(\\t| |\\n)/g, '') +\n\t\t\t\t\t\t'\\n'\n\t\t\t\t)\n\n\t\t\t\tif (hasTraceSet && event === 'afterHandle')\n\t\t\t\t\taddFn(`\\nawait traceDone\\n`)\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn () => () => {}\n\t}\n}\n\nexport const hasReturn = (fnLiteral: string) => {\n\tconst parenthesisEnd = fnLiteral.indexOf(')')\n\n\t// Is direct arrow function return eg. () => 1\n\tif (\n\t\tfnLiteral.charCodeAt(parenthesisEnd + 2) === 61 &&\n\t\tfnLiteral.charCodeAt(parenthesisEnd + 5) !== 123\n\t) {\n\t\treturn true\n\t}\n\n\treturn fnLiteral.includes('return')\n}\n\nconst composeValidationFactory = (\n\thasErrorHandler: boolean,\n\t{\n\t\tinjectResponse = ''\n\t}: {\n\t\tinjectResponse?: string\n\t} = {}\n) => ({\n\tcomposeValidation: (type: string, value = `c.${type}`) =>\n\t\thasErrorHandler\n\t\t\t? `c.set.status = 422; throw new ValidationError('${type}', ${type}, ${value})`\n\t\t\t: `c.set.status = 422; return new ValidationError('${type}', ${type}, ${value}).toResponse(c.set.headers)`,\n\tcomposeResponseValidation: (name = 'r') => {\n\t\tconst returnError = hasErrorHandler\n\t\t\t? `throw new ValidationError('response', response[c.set.status], ${name})`\n\t\t\t: `return new ValidationError('response', response[c.set.status], ${name}).toResponse(c.set.headers)`\n\n\t\treturn `\\n${injectResponse}\n\n\t\t\tif(typeof ${name} === \"object\" && ELYSIA_RESPONSE in ${name}) {\n\t\t\t\tif(!(${name} instanceof Response) && response[${name}[ELYSIA_RESPONSE]]?.Check(${name}.response) === false) {\n\t\t\t\t\tif(!(response instanceof Error)) {\n\t\t\t\t\t\tc.set.status = ${name}[ELYSIA_RESPONSE]\n\n\t\t\t\t\t\t${returnError}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if(!(${name} instanceof Response) && response[c.set.status]?.Check(${name}) === false) {\n\t\t\t\tif(!(response instanceof Error))\n\t\t\t\t\t${returnError}\n\t\t\t}\\n`\n\t}\n})\n\nconst KindSymbol = Symbol.for('TypeBox.Kind')\n\nexport const hasType = (type: string, schema: TAnySchema) => {\n\tif (!schema) return\n\n\tif (KindSymbol in schema && schema[KindSymbol] === type) return true\n\n\tif (schema.type === 'object') {\n\t\tconst properties = schema.properties as Record<string, TAnySchema>\n\t\tfor (const key of Object.keys(properties)) {\n\t\t\tconst property = properties[key]\n\n\t\t\tif (property.type === 'object') {\n\t\t\t\tif (hasType(type, property)) return true\n\t\t\t} else if (property.anyOf) {\n\t\t\t\tfor (let i = 0; i < property.anyOf.length; i++)\n\t\t\t\t\tif (hasType(type, property.anyOf[i])) return true\n\t\t\t}\n\n\t\t\tif (KindSymbol in property && property[KindSymbol] === type)\n\t\t\t\treturn true\n\t\t}\n\n\t\treturn false\n\t}\n\n\treturn (\n\t\tschema.properties &&\n\t\tKindSymbol in schema.properties &&\n\t\tschema.properties[KindSymbol] === type\n\t)\n}\n\nexport const hasProperty = (expectedProperty: string, schema: TAnySchema) => {\n\tif (!schema) return\n\n\tif (schema.type === 'object') {\n\t\tconst properties = schema.properties as Record<string, TAnySchema>\n\n\t\tif (!properties) return false\n\n\t\tfor (const key of Object.keys(properties)) {\n\t\t\tconst property = properties[key]\n\n\t\t\tif (expectedProperty in property) return true\n\n\t\t\tif (property.type === 'object') {\n\t\t\t\tif (hasProperty(expectedProperty, property)) return true\n\t\t\t} else if (property.anyOf) {\n\t\t\t\tfor (let i = 0; i < property.anyOf.length; i++) {\n\t\t\t\t\tif (hasProperty(expectedProperty, property.anyOf[i]))\n\t\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false\n\t}\n\n\treturn expectedProperty in schema\n}\n\nconst TransformSymbol = Symbol.for('TypeBox.Transform')\n\nexport const hasTransform = (schema: TAnySchema) => {\n\tif (!schema) return\n\n\tif (schema.type === 'object' && schema.properties) {\n\t\tconst properties = schema.properties as Record<string, TAnySchema>\n\t\tfor (const key of Object.keys(properties)) {\n\t\t\tconst property = properties[key]\n\n\t\t\tif (property.type === 'object') {\n\t\t\t\tif (hasTransform(property)) return true\n\t\t\t} else if (property.anyOf) {\n\t\t\t\tfor (let i = 0; i < property.anyOf.length; i++)\n\t\t\t\t\tif (hasTransform(property.anyOf[i])) return true\n\t\t\t}\n\n\t\t\tconst hasTransformSymbol = TransformSymbol in property\n\t\t\tif (hasTransformSymbol) return true\n\t\t}\n\n\t\treturn false\n\t}\n\n\treturn (\n\t\tTransformSymbol in schema ||\n\t\t(schema.properties && TransformSymbol in schema.properties)\n\t)\n}\n\n/**\n * This function will return the type of unioned if all unioned type is the same.\n * It's intent to use for content-type mapping only\n *\n * ```ts\n * t.Union([\n *   t.Object({\n *     password: t.String()\n *   }),\n *   t.Object({\n *     token: t.String()\n *   })\n * ])\n * ```\n */\nconst getUnionedType = (validator: TypeCheck<any> | undefined) => {\n\tif (!validator) return\n\n\t// @ts-ignore\n\tconst schema = validator?.schema\n\n\tif (schema && 'anyOf' in schema) {\n\t\tlet foundDifference = false\n\t\tconst type: string = schema.anyOf[0].type\n\n\t\tfor (const validator of schema.anyOf as { type: string }[]) {\n\t\t\tif (validator.type !== type) {\n\t\t\t\tfoundDifference = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif (!foundDifference) return type\n\t}\n\n\t// @ts-ignore\n\treturn validator.schema?.type\n}\n\nconst matchFnReturn = /(?:return|=>) \\S+\\(/g\n\nexport const isAsync = (fn: Function) => {\n\tif (fn.constructor.name === 'AsyncFunction') return true\n\n\tconst literal = fn.toString()\n\tif (literal.includes('=> response.clone(')) return false\n\n\treturn !!literal.match(matchFnReturn)\n}\n\nexport const composeHandler = ({\n\tapp,\n\tpath,\n\tmethod,\n\tlocalHook,\n\thooks,\n\tvalidator,\n\thandler,\n\tallowMeta = false,\n\tappInference: { event: eventInference, trace: traceInference }\n}: {\n\tapp: Elysia<any, any, any, any, any, any, any, any>\n\tpath: string\n\tmethod: string\n\thooks: LifeCycleStore\n\tlocalHook: LifeCycleStore\n\tvalidator: SchemaValidator\n\thandler: unknown | Handler<any, any>\n\tallowMeta?: boolean\n\tappInference: {\n\t\tevent: Sucrose.Inference\n\t\ttrace: Sucrose.TraceInference\n\t}\n}): ComposedHandler => {\n\tconst isHandleFn = typeof handler === 'function'\n\tif (!isHandleFn) handler = mapCompactResponse(handler)\n\n\tconst hasErrorHandler =\n\t\t(app.config.forceErrorEncapsulation &&\n\t\t\t(isHandleFn ||\n\t\t\t\thooks.afterHandle.length > 0 ||\n\t\t\t\thooks.beforeHandle.length > 0 ||\n\t\t\t\thooks.transform.length > 0)) ||\n\t\thooks.error.length > 0 ||\n\t\tapp.event.error.length > 0 ||\n\t\ttypeof Bun === 'undefined' ||\n\t\thooks.onResponse.length > 0 ||\n\t\thooks.onResponse.length > 0 ||\n\t\t!!hooks.trace.length\n\n\tconst handle = isHandleFn ? `handler(c)` : `handler`\n\tconst handleResponse = hooks.onResponse.length\n\t\t? `\\n;(async () => {${hooks.onResponse\n\t\t\t\t.map((_, i) => `await res${i}(c)`)\n\t\t\t\t.join(';')}})();\\n`\n\t\t: ''\n\n\tconst traceConditions: Record<\n\t\tExclude<TraceEvent, `${string}.unit` | 'request' | 'response' | 'exit'>,\n\t\tboolean\n\t> = traceInference\n\n\tconst hasTrace = hooks.trace.length > 0\n\tlet fnLiteral = ''\n\n\tconst inference = sucrose(\n\t\tObject.assign(localHook, {\n\t\t\thandler: handler as any\n\t\t}),\n\t\teventInference\n\t)\n\n\tconst hasQuery = inference.query || !!validator.query\n\n\tconst hasBody =\n\t\tmethod !== '$INTERNALWS' &&\n\t\tmethod !== 'GET' &&\n\t\tmethod !== 'HEAD' &&\n\t\thooks.type !== 'none' &&\n\t\t(inference.body || !!validator.body)\n\n\t// @ts-expect-error private\n\tconst defaultHeaders = app.setHeaders\n\tconst hasDefaultHeaders =\n\t\tdefaultHeaders && !!Object.keys(defaultHeaders).length\n\n\t// ? defaultHeaders doesn't imply that user will use headers in handler\n\tconst hasHeaders = inference.headers || validator.headers\n\tconst hasCookie = inference.cookie || !!validator.cookie\n\n\t// @ts-ignore private property\n\tconst cookieMeta = validator?.cookie?.schema as {\n\t\tsecrets?: string | string[]\n\t\tsign: string[] | true\n\t\tproperties: { [x: string]: Object }\n\t}\n\n\tlet encodeCookie = ''\n\n\tif (cookieMeta?.sign) {\n\t\tif (!cookieMeta.secrets)\n\t\t\tthrow new Error(\n\t\t\t\t`t.Cookie required secret which is not set in (${method}) ${path}.`\n\t\t\t)\n\n\t\tconst secret = !cookieMeta.secrets\n\t\t\t? undefined\n\t\t\t: typeof cookieMeta.secrets === 'string'\n\t\t\t? cookieMeta.secrets\n\t\t\t: cookieMeta.secrets[0]\n\n\t\tencodeCookie += `const _setCookie = c.set.cookie\n\t\tif(_setCookie) {`\n\n\t\tif (cookieMeta.sign === true) {\n\t\t\tencodeCookie += `for(const [key, cookie] of Object.entries(_setCookie)) {\n\t\t\t\tc.set.cookie[key].value = await signCookie(cookie.value, '${secret}')\n\t\t\t}`\n\t\t} else\n\t\t\tfor (const name of cookieMeta.sign) {\n\t\t\t\tencodeCookie += `if(_setCookie['${name}']?.value) { c.set.cookie['${name}'].value = await signCookie(_setCookie['${name}'].value, '${secret}') }\\n`\n\t\t\t}\n\n\t\tencodeCookie += '}\\n'\n\t}\n\n\tconst { composeValidation, composeResponseValidation } =\n\t\tcomposeValidationFactory(hasErrorHandler)\n\n\tif (hasHeaders) {\n\t\t// This function is Bun specific\n\t\t// @ts-ignore\n\t\tfnLiteral += headersHasToJSON\n\t\t\t? `c.headers = c.request.headers.toJSON()\\n`\n\t\t\t: `c.headers = {}\n                for (const [key, value] of c.request.headers.entries())\n\t\t\t\t\tc.headers[key] = value\n\t\t\t\t`\n\t}\n\n\tif (hasCookie) {\n\t\tconst get = (name: keyof CookieOptions, defaultValue?: unknown) => {\n\t\t\t// @ts-ignore\n\t\t\tconst value = cookieMeta?.[name] ?? defaultValue\n\t\t\tif (!value)\n\t\t\t\treturn typeof defaultValue === 'string'\n\t\t\t\t\t? `${name}: \"${defaultValue}\",`\n\t\t\t\t\t: `${name}: ${defaultValue},`\n\n\t\t\tif (typeof value === 'string') return `${name}: '${value}',`\n\t\t\tif (value instanceof Date)\n\t\t\t\treturn `${name}: new Date(${value.getTime()}),`\n\n\t\t\treturn `${name}: ${value},`\n\t\t}\n\n\t\tconst options = cookieMeta\n\t\t\t? `{\n\t\t\tsecret: ${\n\t\t\t\tcookieMeta.secrets !== undefined\n\t\t\t\t\t? typeof cookieMeta.secrets === 'string'\n\t\t\t\t\t\t? `'${cookieMeta.secrets}'`\n\t\t\t\t\t\t: '[' +\n\t\t\t\t\t\t  cookieMeta.secrets.reduce(\n\t\t\t\t\t\t\t\t(a, b) => a + `'${b}',`,\n\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t  ) +\n\t\t\t\t\t\t  ']'\n\t\t\t\t\t: 'undefined'\n\t\t\t},\n\t\t\tsign: ${\n\t\t\t\tcookieMeta.sign === true\n\t\t\t\t\t? true\n\t\t\t\t\t: cookieMeta.sign !== undefined\n\t\t\t\t\t? '[' +\n\t\t\t\t\t  cookieMeta.sign.reduce((a, b) => a + `'${b}',`, '') +\n\t\t\t\t\t  ']'\n\t\t\t\t\t: 'undefined'\n\t\t\t},\n\t\t\t${get('domain')}\n\t\t\t${get('expires')}\n\t\t\t${get('httpOnly')}\n\t\t\t${get('maxAge')}\n\t\t\t${get('path', '/')}\n\t\t\t${get('priority')}\n\t\t\t${get('sameSite')}\n\t\t\t${get('secure')}\n\t\t}`\n\t\t\t: 'undefined'\n\n\t\tif (hasHeaders)\n\t\t\tfnLiteral += `\\nc.cookie = await parseCookie(c.set, c.headers.cookie, ${options})\\n`\n\t\telse\n\t\t\tfnLiteral += `\\nc.cookie = await parseCookie(c.set, c.request.headers.get('cookie'), ${options})\\n`\n\t}\n\n\tif (hasQuery) {\n\t\tlet destructured = [] as string[]\n\n\t\t// @ts-ignore\n\t\tif (validator.query && validator.query.schema.type === 'object') {\n\t\t\t// @ts-ignore\n\t\t\tdestructured = Object.keys(validator.query.schema.properties)\n\t\t} else\n\t\t\tfor (const query of inference.queries)\n\t\t\t\tif (destructured.indexOf(query) === -1) destructured.push(query)\n\n\t\tif (\n\t\t\tapp.config.forceDynamicQuery === true ||\n\t\t\tinference.unknownQueries === true ||\n\t\t\t!destructured.length\n\t\t) {\n\t\t\tfnLiteral += `if(c.qi !== -1) {\n\t\t\t\tc.query = parseQuery(decodeURIComponent(c.request.url.slice(c.qi + 1)).replace(/\\\\+/g, ' '))\n\t\t\t} else c.query = {}`\n\t\t} else {\n\t\t\tfnLiteral += `if(c.qi !== -1) {\n\t\t\t\tlet url = decodeURIComponent(\n\t\t\t\t\tc.request.url.slice(c.qi)\n\t\t\t\t\t\t.replace(/\\\\+/g, ' ')\n\t\t\t\t\t)\n\n\t\t\t\t${destructured\n\t\t\t\t\t.map(\n\t\t\t\t\t\t(name, index) => `\n\t\t\t\t\t\t${index === 0 ? 'let' : ''} memory = url.indexOf('&${name}=')\n\t\t\t\t\t\tif(memory === -1) memory = url.indexOf('?${name}=')\n\t\t\t\t\t\tlet a${index}\n\n\t\t\t\t\t\tif(memory !== -1) {\n\t\t\t\t\t\t\tconst start = memory + ${name.length + 2}\n\t\t\t\t\t\t\tmemory = url.indexOf('&', start)\n\n\t\t\t\t\t\t\tif(memory === -1) a${index} = url.slice(start)\n\t\t\t\t\t\t\telse a${index} = url.slice(start, memory)\n\t\t\t\t\t\t}`\n\t\t\t\t\t)\n\t\t\t\t\t.join('\\n')}\n\n\t\t\t\tc.query = {\n\t\t\t\t\t${destructured.map((name, index) => `'${name}': a${index}`).join(', ')}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tc.query = {}\n\t\t\t}`\n\t\t}\n\t}\n\n\tconst hasTraceSet = traceInference.set\n\tconst hasSet =\n\t\tinference.cookie ||\n\t\tinference.set ||\n\t\thasTraceSet ||\n\t\thasHeaders ||\n\t\thasDefaultHeaders\n\n\tif (hasTrace) fnLiteral += '\\nconst id = c.$$requestId\\n'\n\n\tconst report = createReport({\n\t\thasTrace,\n\t\thasTraceSet,\n\t\tcondition: traceConditions,\n\t\taddFn: (word) => {\n\t\t\tfnLiteral += word\n\t\t}\n\t})\n\n\tfnLiteral += hasErrorHandler ? '\\n try {\\n' : ''\n\n\tif (hasTraceSet) {\n\t\tfnLiteral += `\\nconst traceDone = Promise.all([`\n\t\tfor (let i = 0; i < hooks.trace.length; i++) {\n\t\t\tfnLiteral += `new Promise(r => { reporter.once(\\`res\\${id}.${i}\\`, r) }),`\n\t\t}\n\t\tfnLiteral += `])\\n`\n\t}\n\n\tconst isAsyncHandler = typeof handler === 'function' && isAsync(handler)\n\n\tconst maybeAsync =\n\t\thasCookie ||\n\t\thasBody ||\n\t\thasTraceSet ||\n\t\tisAsyncHandler ||\n\t\t!!hooks.mapResponse.length ||\n\t\thooks.parse.length > 0 ||\n\t\thooks.afterHandle.some(isAsync) ||\n\t\thooks.beforeHandle.some(isAsync) ||\n\t\thooks.transform.some(isAsync)\n\n\tconst endParse = report('parse', {\n\t\tunit: hooks.parse.length\n\t})\n\n\tif (hasBody) {\n\t\tconst type = getUnionedType(validator?.body)\n\n\t\tif (hooks.type && !Array.isArray(hooks.type)) {\n\t\t\tif (hooks.type) {\n\t\t\t\tswitch (hooks.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tif (hasErrorHandler)\n\t\t\t\t\t\t\tfnLiteral += `const body = await c.request.text()\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tc.body = JSON.parse(body)\n\t\t\t\t\t\t\t} catch {\n\t\t\t\t\t\t\t\tthrow new ParseError('Failed to parse body as found: ' + (typeof body === \"string\" ? \"'\" + body + \"'\" : body), body)\n\t\t\t\t\t\t\t}`\n\t\t\t\t\t\telse fnLiteral += `c.body = await c.request.json()`\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'text':\n\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\tfnLiteral += `c.body = await c.request.text()\\n`\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\tfnLiteral += `c.body = parseQuery(await c.request.text())\\n`\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'arrayBuffer':\n\t\t\t\t\tcase 'application/octet-stream':\n\t\t\t\t\t\tfnLiteral += `c.body = await c.request.arrayBuffer()\\n`\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'formdata':\n\t\t\t\t\tcase 'multipart/form-data':\n\t\t\t\t\t\tfnLiteral += `c.body = {}\n\n\t\t\t\t\t\tconst form = await c.request.formData()\n\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\tif (c.body[key])\n\t\t\t\t\t\t\t\tcontinue\n\n\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\tif (value.length === 1)\n\t\t\t\t\t\t\t\tc.body[key] = value[0]\n\t\t\t\t\t\t\telse c.body[key] = value\n\t\t\t\t\t\t}\\n`\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hooks.parse.length) fnLiteral += '}}'\n\t\t} else {\n\t\t\tconst getAotParser = () => {\n\t\t\t\tif (hooks.parse.length && type && !Array.isArray(hooks.type)) {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst schema = validator?.body?.schema\n\n\t\t\t\t\tif (\n\t\t\t\t\t\ttypeof schema === 'object' &&\n\t\t\t\t\t\t(hasType('File', schema) || hasType('Files', schema))\n\t\t\t\t\t)\n\t\t\t\t\t\treturn `c.body = {}\n\n\t\t\t\t\t\t\t\tconst form = await c.request.formData()\n\t\t\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\t\t\tif (c.body[key])\n\t\t\t\t\t\t\t\t\t\tcontinue\n\n\t\t\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\t\t\tif (value.length === 1)\n\t\t\t\t\t\t\t\t\t\tc.body[key] = value[0]\n\t\t\t\t\t\t\t\t\telse c.body[key] = value\n\t\t\t\t\t\t\t\t}`\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst aotParse = getAotParser()\n\n\t\t\tif (aotParse) fnLiteral += aotParse\n\t\t\telse {\n\t\t\t\tfnLiteral += '\\n'\n\t\t\t\tfnLiteral += hasHeaders\n\t\t\t\t\t? `let contentType = c.headers['content-type']`\n\t\t\t\t\t: `let contentType = c.request.headers.get('content-type')`\n\n\t\t\t\tfnLiteral += `\n\t\t\t\tif (contentType) {\n\t\t\t\t\tconst index = contentType.indexOf(';')\n\t\t\t\t\tif (index !== -1) contentType = contentType.substring(0, index)\\n`\n\n\t\t\t\tif (hooks.parse.length) {\n\t\t\t\t\tfnLiteral += `let used = false\\n`\n\n\t\t\t\t\tconst endReport = report('parse', {\n\t\t\t\t\t\tunit: hooks.parse.length\n\t\t\t\t\t})\n\n\t\t\t\t\tfor (let i = 0; i < hooks.parse.length; i++) {\n\t\t\t\t\t\tconst endUnit = report('parse.unit', {\n\t\t\t\t\t\t\tname: hooks.parse[i].name\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tconst name = `bo${i}`\n\n\t\t\t\t\t\tif (i !== 0) fnLiteral += `if(!used) {\\n`\n\n\t\t\t\t\t\tfnLiteral += `let ${name} = parse[${i}](c, contentType)\\n`\n\t\t\t\t\t\tfnLiteral += `if(${name} instanceof Promise) ${name} = await ${name}\\n`\n\t\t\t\t\t\tfnLiteral += `if(${name} !== undefined) { c.body = ${name}; used = true }\\n`\n\n\t\t\t\t\t\tendUnit()\n\n\t\t\t\t\t\tif (i !== 0) fnLiteral += `}`\n\t\t\t\t\t}\n\n\t\t\t\t\tendReport()\n\t\t\t\t}\n\n\t\t\t\tif (hooks.parse.length) fnLiteral += `if (!used)`\n\n\t\t\t\tfnLiteral += `\n\t\t\t\tswitch (contentType) {\n\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\t${\n\t\t\t\t\t\t\thasErrorHandler\n\t\t\t\t\t\t\t\t? `\n\t\t\t\t\t\tconst body = await c.request.text()\n\t\t\t\t\t\t\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tc.body = JSON.parse(body)\n\t\t\t\t\t\t} catch {\n\t\t\t\t\t\t\tthrow new ParseError('Failed to parse body as found: ' + (typeof body === \"string\" ? \"'\" + body + \"'\" : body), body)\n\t\t\t\t\t\t}\n\t\t\t\t\t\t`\n\t\t\t\t\t\t\t\t: `c.body = await c.request.json()\\n`\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\tc.body = await c.request.text()\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\tc.body = parseQuery(await c.request.text())\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'application/octet-stream':\n\t\t\t\t\t\tc.body = await c.request.arrayBuffer();\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'multipart/form-data':\n\t\t\t\t\t\tc.body = {}\n\n\t\t\t\t\t\tconst form = await c.request.formData()\n\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\tif (c.body[key])\n\t\t\t\t\t\t\t\tcontinue\n\n\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\tif (value.length === 1)\n\t\t\t\t\t\t\t\tc.body[key] = value[0]\n\t\t\t\t\t\t\telse c.body[key] = value\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\\n`\n\n\t\t\t\tfnLiteral += '}\\n'\n\t\t\t}\n\t\t}\n\n\t\tfnLiteral += '\\n'\n\t}\n\n\tendParse()\n\n\tif (hooks?.transform) {\n\t\tconst endTransform = report('transform', {\n\t\t\tunit: hooks.transform.length\n\t\t})\n\n\t\tfor (let i = 0; i < hooks.transform.length; i++) {\n\t\t\tconst transform = hooks.transform[i]\n\n\t\t\tconst endUnit = report('transform.unit', {\n\t\t\t\tname: transform.name\n\t\t\t})\n\n\t\t\tif (transform.$elysia === 'derive')\n\t\t\t\tfnLiteral += isAsync(transform)\n\t\t\t\t\t? `Object.assign(c, await transform[${i}](c));`\n\t\t\t\t\t: `Object.assign(c, transform[${i}](c));`\n\t\t\telse\n\t\t\t\tfnLiteral += isAsync(transform)\n\t\t\t\t\t? `await transform[${i}](c);`\n\t\t\t\t\t: `transform[${i}](c);`\n\n\t\t\tendUnit()\n\t\t}\n\n\t\tendTransform()\n\t}\n\n\tif (validator) {\n\t\tfnLiteral += '\\n'\n\n\t\tif (validator.headers) {\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.headers.params))\n\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tvalidator.headers.schema,\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as Object\n\t\t\t\t)) {\n\t\t\t\t\tconst parsed =\n\t\t\t\t\t\ttypeof value === 'object'\n\t\t\t\t\t\t\t? JSON.stringify(value)\n\t\t\t\t\t\t\t: `'${value}'`\n\n\t\t\t\t\tif (parsed)\n\t\t\t\t\t\tfnLiteral += `c.headers['${key}'] ??= ${parsed}\\n`\n\t\t\t\t}\n\n\t\t\tfnLiteral += `if(headers.Check(c.headers) === false) {\n\t\t\t\t${composeValidation('headers')}\n\t\t\t}`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasTransform(validator.headers.schema))\n\t\t\t\tfnLiteral += `\\nc.headers = headers.Decode(c.headers)\\n`\n\t\t}\n\n\t\tif (validator.params) {\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.params.schema))\n\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tvalidator.params.schema,\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as Object\n\t\t\t\t)) {\n\t\t\t\t\tconst parsed =\n\t\t\t\t\t\ttypeof value === 'object'\n\t\t\t\t\t\t\t? JSON.stringify(value)\n\t\t\t\t\t\t\t: `'${value}'`\n\n\t\t\t\t\tif (parsed)\n\t\t\t\t\t\tfnLiteral += `c.params['${key}'] ??= ${parsed}\\n`\n\t\t\t\t}\n\n\t\t\tfnLiteral += `if(params.Check(c.params) === false) {\n\t\t\t\t${composeValidation('params')}\n\t\t\t}`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasTransform(validator.params.schema))\n\t\t\t\tfnLiteral += `\\nc.params = params.Decode(c.params)\\n`\n\t\t}\n\n\t\tif (validator.query) {\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.query.schema))\n\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tvalidator.query.schema,\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as Object\n\t\t\t\t)) {\n\t\t\t\t\tconst parsed =\n\t\t\t\t\t\ttypeof value === 'object'\n\t\t\t\t\t\t\t? JSON.stringify(value)\n\t\t\t\t\t\t\t: `'${value}'`\n\n\t\t\t\t\tif (parsed) fnLiteral += `c.query['${key}'] ??= ${parsed}\\n`\n\t\t\t\t}\n\n\t\t\tfnLiteral += `if(query.Check(c.query) === false) {\n\t\t\t\t${composeValidation('query')}\n\t\t\t}`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasTransform(validator.query.schema))\n\t\t\t\t// Decode doesn't work with Object.create(null)\n\t\t\t\tfnLiteral += `\\nc.query = query.Decode(Object.assign({}, c.query))\\n`\n\t\t}\n\n\t\tif (validator.body) {\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.body.schema))\n\t\t\t\tfnLiteral += `if(body.Check(c.body) === false) {\n    \t\t\t\tc.body = Object.assign(${JSON.stringify(\n\t\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tvalidator.body.schema,\n\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t) ?? {}\n\t\t\t\t\t)}, c.body)\n\n    \t\t\t\tif(body.Check(c.query) === false) {\n        \t\t\t\t${composeValidation('body')}\n     \t\t\t}\n            }`\n\t\t\telse\n\t\t\t\tfnLiteral += `if(body.Check(c.body) === false) {\n\t\t\t${composeValidation('body')}\n\t\t}`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasTransform(validator.body.schema))\n\t\t\t\tfnLiteral += `\\nc.body = body.Decode(c.body)\\n`\n\t\t}\n\n\t\t// @ts-ignore\n\t\tif (isNotEmpty(validator.cookie?.schema.properties ?? {})) {\n\t\t\tfnLiteral += `const cookieValue = {}\n    \t\t\tfor(const [key, value] of Object.entries(c.cookie))\n    \t\t\t\tcookieValue[key] = value.value\\n`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.cookie.schema))\n\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tvalidator.cookie.schema,\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as Object\n\t\t\t\t)) {\n\t\t\t\t\tfnLiteral += `cookieValue['${key}'] = ${\n\t\t\t\t\t\ttypeof value === 'object'\n\t\t\t\t\t\t\t? JSON.stringify(value)\n\t\t\t\t\t\t\t: value\n\t\t\t\t\t}\\n`\n\t\t\t\t}\n\n\t\t\tfnLiteral += `if(cookie.Check(cookieValue) === false) {\n\t\t\t\t${composeValidation('cookie', 'cookieValue')}\n\t\t\t}`\n\n\t\t\t// // @ts-ignore\n\t\t\t// if (hasTransform(validator.cookie.schema))\n\t\t\t// \tfnLiteral += `\\nc.cookie = params.Decode(c.cookie)\\n`\n\t\t}\n\t}\n\n\tif (hooks?.beforeHandle) {\n\t\tconst endBeforeHandle = report('beforeHandle', {\n\t\t\tunit: hooks.beforeHandle.length\n\t\t})\n\n\t\tfor (let i = 0; i < hooks.beforeHandle.length; i++) {\n\t\t\tconst beforeHandle = hooks.beforeHandle[i]\n\n\t\t\tconst endUnit = report('beforeHandle.unit', {\n\t\t\t\tname: beforeHandle.name\n\t\t\t})\n\n\t\t\tconst returning = hasReturn(beforeHandle.toString())\n\n\t\t\t// @ts-ignore\n\t\t\tif (beforeHandle.$elysia === 'resolve') {\n\t\t\t\tfnLiteral += isAsync(beforeHandle)\n\t\t\t\t\t? `Object.assign(c, await beforeHandle[${i}](c));`\n\t\t\t\t\t: `Object.assign(c, beforeHandle[${i}](c));`\n\t\t\t} else if (!returning) {\n\t\t\t\tfnLiteral += isAsync(beforeHandle)\n\t\t\t\t\t? `await beforeHandle[${i}](c);\\n`\n\t\t\t\t\t: `beforeHandle[${i}](c);\\n`\n\n\t\t\t\tendUnit()\n\t\t\t} else {\n\t\t\t\tfnLiteral += isAsync(beforeHandle)\n\t\t\t\t\t? `be = await beforeHandle[${i}](c);\\n`\n\t\t\t\t\t: `be = beforeHandle[${i}](c);\\n`\n\n\t\t\t\tendUnit()\n\n\t\t\t\tfnLiteral += `if(be !== undefined) {\\n`\n\t\t\t\tconst endAfterHandle = report('afterHandle', {\n\t\t\t\t\tunit: hooks.transform.length\n\t\t\t\t})\n\t\t\t\tif (hooks.afterHandle) {\n\t\t\t\t\treport('handle', {\n\t\t\t\t\t\tname: isHandleFn\n\t\t\t\t\t\t\t? (handler as Function).name\n\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t})()\n\n\t\t\t\t\tfor (let i = 0; i < hooks.afterHandle.length; i++) {\n\t\t\t\t\t\tconst returning = hasReturn(\n\t\t\t\t\t\t\thooks.afterHandle[i].toString()\n\t\t\t\t\t\t)\n\n\t\t\t\t\t\tconst endUnit = report('afterHandle.unit', {\n\t\t\t\t\t\t\tname: hooks.afterHandle[i].name\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tfnLiteral += `c.response = be\\n`\n\n\t\t\t\t\t\tif (!returning) {\n\t\t\t\t\t\t\tfnLiteral += isAsync(hooks.afterHandle[i])\n\t\t\t\t\t\t\t\t? `await afterHandle[${i}](c, be)\\n`\n\t\t\t\t\t\t\t\t: `afterHandle[${i}](c, be)\\n`\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfnLiteral += isAsync(hooks.afterHandle[i])\n\t\t\t\t\t\t\t\t? `af = await afterHandle[${i}](c)\\n`\n\t\t\t\t\t\t\t\t: `af = afterHandle[${i}](c)\\n`\n\n\t\t\t\t\t\t\tfnLiteral += `if(af !== undefined) { c.response = be = af }\\n`\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tendUnit()\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tendBeforeHandle()\n\t\t\t\tendAfterHandle()\n\n\t\t\t\tif (validator.response)\n\t\t\t\t\tfnLiteral += composeResponseValidation('be')\n\n\t\t\t\tif (hooks.mapResponse.length) {\n\t\t\t\t\tfnLiteral += `c.response = be`\n\n\t\t\t\t\tfor (let i = 0; i < hooks.mapResponse.length; i++) {\n\t\t\t\t\t\tfnLiteral += `\\nif(mr === undefined) {\n\t\t\t\t\t\t\tmr = onMapResponse[${i}](c)\n\t\t\t\t\t\t\tif(mr instanceof Promise) mr = await mr\n\t\t\t\t\t\t\tif(mr !== undefined) c.response = mr\n\t\t\t\t\t\t}\\n`\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfnLiteral += encodeCookie\n\t\t\t\tfnLiteral += `return mapEarlyResponse(be, c.set, c.request)}\\n`\n\t\t\t}\n\t\t}\n\n\t\tendBeforeHandle()\n\t}\n\n\tif (hooks?.afterHandle.length) {\n\t\tconst endHandle = report('handle', {\n\t\t\tname: isHandleFn ? (handler as Function).name : undefined\n\t\t})\n\n\t\tif (hooks.afterHandle.length)\n\t\t\tfnLiteral += isAsyncHandler\n\t\t\t\t? `let r = c.response = await ${handle};\\n`\n\t\t\t\t: `let r = c.response = ${handle};\\n`\n\t\telse\n\t\t\tfnLiteral += isAsyncHandler\n\t\t\t\t? `let r = await ${handle};\\n`\n\t\t\t\t: `let r = ${handle};\\n`\n\n\t\tendHandle()\n\n\t\tconst endAfterHandle = report('afterHandle', {\n\t\t\tunit: hooks.afterHandle.length\n\t\t})\n\n\t\tfor (let i = 0; i < hooks.afterHandle.length; i++) {\n\t\t\tconst returning = hasReturn(hooks.afterHandle[i].toString())\n\n\t\t\tconst endUnit = report('afterHandle.unit', {\n\t\t\t\tname: hooks.afterHandle[i].name\n\t\t\t})\n\n\t\t\tif (!returning) {\n\t\t\t\tfnLiteral += isAsync(hooks.afterHandle[i])\n\t\t\t\t\t? `await afterHandle[${i}](c)\\n`\n\t\t\t\t\t: `afterHandle[${i}](c)\\n`\n\n\t\t\t\tendUnit()\n\t\t\t} else {\n\t\t\t\tfnLiteral += isAsync(hooks.afterHandle[i])\n\t\t\t\t\t? `af = await afterHandle[${i}](c)\\n`\n\t\t\t\t\t: `af = afterHandle[${i}](c)\\n`\n\n\t\t\t\tendUnit()\n\n\t\t\t\tif (validator.response) {\n\t\t\t\t\tfnLiteral += `if(af !== undefined) {`\n\t\t\t\t\tendAfterHandle()\n\n\t\t\t\t\tfnLiteral += composeResponseValidation('af')\n\n\t\t\t\t\tfnLiteral += `c.response = af }`\n\t\t\t\t} else {\n\t\t\t\t\tfnLiteral += `if(af !== undefined) {`\n\t\t\t\t\tendAfterHandle()\n\n\t\t\t\t\tfnLiteral += `c.response = af}\\n`\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tendAfterHandle()\n\n\t\tfnLiteral += `r = c.response\\n`\n\n\t\tif (validator.response) fnLiteral += composeResponseValidation()\n\n\t\tfnLiteral += encodeCookie\n\n\t\tif (hooks.mapResponse.length) {\n\t\t\tfor (let i = 0; i < hooks.mapResponse.length; i++) {\n\t\t\t\tfnLiteral += `\\nmr = onMapResponse[${i}](c)\n\t\t\t\tif(mr instanceof Promise) mr = await mr\n\t\t\t\tif(mr !== undefined) c.response = mr\\n`\n\t\t\t}\n\t\t}\n\n\t\tif (hasSet) fnLiteral += `return mapResponse(r, c.set, c.request)\\n`\n\t\telse fnLiteral += `return mapCompactResponse(r, c.request)\\n`\n\t} else {\n\t\tconst endHandle = report('handle', {\n\t\t\tname: isHandleFn ? (handler as Function).name : undefined\n\t\t})\n\n\t\tif (validator.response || hooks.mapResponse.length) {\n\t\t\tfnLiteral += isAsyncHandler\n\t\t\t\t? `let r = await ${handle};\\n`\n\t\t\t\t: `let r = ${handle};\\n`\n\n\t\t\tendHandle()\n\n\t\t\tif (validator.response) fnLiteral += composeResponseValidation()\n\n\t\t\treport('afterHandle')()\n\n\t\t\tif (hooks.mapResponse.length) {\n\t\t\t\tfnLiteral += 'c.response = r'\n\t\t\t\tfor (let i = 0; i < hooks.mapResponse.length; i++) {\n\t\t\t\t\tfnLiteral += `\\nif(mr === undefined) { \n\t\t\t\t\t\tmr = onMapResponse[${i}](c)\n\t\t\t\t\t\tif(mr instanceof Promise) mr = await mr\n    \t\t\t\t\tif(mr !== undefined) r = c.response = mr\n\t\t\t\t\t}\\n`\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfnLiteral += encodeCookie\n\n\t\t\tif (handler instanceof Response) {\n\t\t\t\tfnLiteral +=\n\t\t\t\t\tinference.set || hasDefaultHeaders\n\t\t\t\t\t\t? `if(\n\t\t\t\t\tisNotEmpty(c.set.headers) ||\n\t\t\t\t\tc.set.status !== 200 ||\n\t\t\t\t\tc.set.redirect ||\n\t\t\t\t\tc.set.cookie\n\t\t\t\t)\n\t\t\t\t\treturn mapResponse(${handle}.clone(), c.set, c.request)\n\t\t\t\telse\n\t\t\t\t\treturn ${handle}.clone()`\n\t\t\t\t\t\t: `return ${handle}.clone()`\n\n\t\t\t\tfnLiteral += '\\n'\n\t\t\t} else if (hasSet)\n\t\t\t\tfnLiteral += `return mapResponse(r, c.set, c.request)\\n`\n\t\t\telse fnLiteral += `return mapCompactResponse(r, c.request)\\n`\n\t\t} else if (traceConditions.handle || hasCookie) {\n\t\t\tfnLiteral += isAsyncHandler\n\t\t\t\t? `let r = await ${handle};\\n`\n\t\t\t\t: `let r = ${handle};\\n`\n\n\t\t\tendHandle()\n\n\t\t\treport('afterHandle')()\n\n\t\t\tif (hooks.mapResponse.length) {\n\t\t\t\tfnLiteral += 'c.response = r'\n\t\t\t\tfor (let i = 0; i < hooks.mapResponse.length; i++) {\n\t\t\t\t\tfnLiteral += `\\nif(mr === undefined) {\n\t\t\t\t\t\t\tmr = onMapResponse[${i}](c)\n\t\t\t\t\t\t\tif(mr instanceof Promise) mr = await mr\n    \t\t\t\t\t\tif(mr !== undefined) r = c.response = mr\n\t\t\t\t\t\t}\\n`\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfnLiteral += encodeCookie\n\n\t\t\tif (hasSet) fnLiteral += `return mapResponse(r, c.set, c.request)\\n`\n\t\t\telse fnLiteral += `return mapCompactResponse(r, c.request)\\n`\n\t\t} else {\n\t\t\tendHandle()\n\n\t\t\tconst handled = isAsyncHandler ? `await ${handle}` : handle\n\n\t\t\treport('afterHandle')()\n\n\t\t\tif (handler instanceof Response) {\n\t\t\t\tfnLiteral +=\n\t\t\t\t\tinference.set || hasDefaultHeaders\n\t\t\t\t\t\t? `if(\n\t\t\t\t\tisNotEmpty(c.set.headers) ||\n\t\t\t\t\tc.set.status !== 200 ||\n\t\t\t\t\tc.set.redirect ||\n\t\t\t\t\tc.set.cookie\n\t\t\t\t)\n\t\t\t\t\treturn mapResponse(${handle}.clone(), c.set, c.request)\n\t\t\t\telse\n\t\t\t\t\treturn ${handle}.clone()`\n\t\t\t\t\t\t: `return ${handle}.clone()`\n\n\t\t\t\tfnLiteral += '\\n'\n\t\t\t} else if (hasSet)\n\t\t\t\tfnLiteral += `return mapResponse(${handled}, c.set, c.request)\\n`\n\t\t\telse\n\t\t\t\tfnLiteral += `return mapCompactResponse(${handled}, c.request)\\n`\n\t\t}\n\t}\n\n\tif (hasErrorHandler || handleResponse) {\n\t\tfnLiteral += `\\n} catch(error) {`\n\t\tif (!maybeAsync) fnLiteral += `return (async () => {`\n\n\t\tfnLiteral += `const set = c.set\\nif (!set.status || set.status < 300) set.status = error?.status || 500\\n`\n\n\t\tconst endError = report('error', {\n\t\t\tunit: hooks.error.length\n\t\t})\n\n\t\tif (hooks.error.length) {\n\t\t\tfnLiteral += `\n\t\t\t\tc.error = error\n\t\t\t\tc.code = error.code ?? error[ERROR_CODE] ?? \"UNKNOWN\"\n\t\t\t`\n\n\t\t\tfor (let i = 0; i < hooks.error.length; i++) {\n\t\t\t\tconst name = `er${i}`\n\t\t\t\tconst endUnit = report('error.unit', {\n\t\t\t\t\tname: hooks.error[i].name\n\t\t\t\t})\n\n\t\t\t\tfnLiteral += `\\nlet ${name} = handleErrors[${i}](c)\\n`\n\n\t\t\t\tif (isAsync(hooks.error[i]))\n\t\t\t\t\tfnLiteral += `if (${name} instanceof Promise) ${name} = await ${name}\\n`\n\n\t\t\t\tendUnit()\n\n\t\t\t\tfnLiteral += `${name} = mapEarlyResponse(${name}, set, c.request)\\n`\n\t\t\t\tfnLiteral += `if (${name}) {`\n\t\t\t\tfnLiteral += `return ${name} }\\n`\n\t\t\t}\n\t\t}\n\n\t\tendError()\n\n\t\tfnLiteral += `return handleError(c, error, true)\\n\\n`\n\n\t\tif (!maybeAsync) fnLiteral += '})()'\n\n\t\tfnLiteral += '}'\n\n\t\tif (handleResponse || hasTrace) {\n\t\t\tfnLiteral += ` finally { `\n\n\t\t\tconst endResponse = report('response', {\n\t\t\t\tunit: hooks.onResponse.length\n\t\t\t})\n\n\t\t\tfnLiteral += handleResponse\n\n\t\t\tendResponse()\n\n\t\t\tfnLiteral += `}`\n\t\t}\n\t}\n\n\tfnLiteral = `const {\n\t\thandler,\n\t\thandleError,\n\t\thooks: {\n\t\t\ttransform,\n\t\t\tresolve,\n\t\t\tbeforeHandle,\n\t\t\tafterHandle,\n\t\t\tmapResponse: onMapResponse,\n\t\t\tparse,\n\t\t\terror: handleErrors,\n\t\t\tonResponse\n\t\t},\n\t\tvalidator: {\n\t\t\tbody,\n\t\t\theaders,\n\t\t\tparams,\n\t\t\tquery,\n\t\t\tresponse,\n\t\t\tcookie\n\t\t},\n\t\tutils: {\n\t\t\tmapResponse,\n\t\t\tmapCompactResponse,\n\t\t\tmapEarlyResponse,\n\t\t\tparseQuery,\n\t\t\tisNotEmpty\n\t\t},\n\t\terror: {\n\t\t\tNotFoundError,\n\t\t\tValidationError,\n\t\t\tInternalServerError,\n\t\t\tParseError\n\t\t},\n\t\tschema,\n\t\tdefinitions,\n\t\tERROR_CODE,\n\t\tgetReporter,\n\t\trequestId,\n\t\tparseCookie,\n\t\tsignCookie,\n\t\tdecodeURIComponent,\n\t\tELYSIA_RESPONSE\n\t} = hooks\n\n\t${\n\t\thooks.onResponse.length\n\t\t\t? `const ${hooks.onResponse\n\t\t\t\t\t.map((x, i) => `res${i} = onResponse[${i}]`)\n\t\t\t\t\t.join(',')}`\n\t\t\t: ''\n\t}\n\n\treturn ${maybeAsync ? 'async' : ''} function handle(c) {\n\t\t${hooks.beforeHandle.length ? 'let be' : ''}\n\t\t${hooks.afterHandle.length ? 'let af' : ''}\n\t\t${hooks.mapResponse.length ? 'let mr' : ''}\n\n\t\t${allowMeta ? 'c.schema = schema; c.defs = definitions' : ''}\n\t\t${fnLiteral}\n\t}`\n\n\tconst createHandler = Function('hooks', fnLiteral)\n\n\treturn createHandler({\n\t\thandler,\n\t\thooks,\n\t\tvalidator,\n\t\t// @ts-expect-error\n\t\thandleError: app.handleError,\n\t\tutils: {\n\t\t\tmapResponse,\n\t\t\tmapCompactResponse,\n\t\t\tmapEarlyResponse,\n\t\t\tparseQuery,\n\t\t\tisNotEmpty\n\t\t},\n\t\terror: {\n\t\t\tNotFoundError,\n\t\t\tValidationError,\n\t\t\tInternalServerError,\n\t\t\tParseError\n\t\t},\n\t\tschema: app.router.history,\n\t\t// @ts-expect-error\n\t\tdefinitions: app.definitions.type,\n\t\tERROR_CODE,\n\t\t// @ts-expect-error\n\t\tgetReporter: () => app.reporter,\n\t\trequestId,\n\t\tparseCookie,\n\t\tsignCookie,\n\t\tdecodeURIComponent,\n\t\tELYSIA_RESPONSE\n\t})\n}\n\nexport const composeGeneralHandler = (\n\tapp: Elysia<any, any, any, any, any, any, any, any>\n) => {\n\tconst inference = {\n\t\tevent: {\n\t\t\t// @ts-expect-error\n\t\t\t...app.inference.event,\n\t\t\t// @ts-expect-error\n\t\t\tqueries: [...app.inference.event.queries]\n\t\t},\n\t\t// @ts-expect-error\n\t\ttrace: { ...app.inference.trace }\n\t}\n\n\tlet decoratorsLiteral = ''\n\tlet fnLiteral = ''\n\n\t// @ts-expect-error private\n\tconst defaultHeaders = app.setHeaders\n\n\t// @ts-ignore\n\tfor (const key of Object.keys(app.singleton.decorator))\n\t\tdecoratorsLiteral += `,${key}: app.singleton.decorator.${key}`\n\n\tconst router = app.router\n\tconst hasTrace = app.event.trace.length > 0\n\n\tlet findDynamicRoute = `\n\tconst route = router.find(request.method, path) ${\n\t\trouter.http.root.ALL ? '?? router.find(\"ALL\", path)' : ''\n\t}\n\n\tif (route === null)\n\t\treturn ${\n\t\t\tapp.event.error.length\n\t\t\t\t? `app.handleError(ctx, notFound)`\n\t\t\t\t: app.event.request.length\n\t\t\t\t? `new Response(error404Message, {\n\t\t\t\t\tstatus: ctx.set.status === 200 ? 404 : ctx.set.status,\n\t\t\t\t\theaders: ctx.set.headers\n\t\t\t\t})`\n\t\t\t\t: `error404.clone()`\n\t\t}\n\n\tctx.params = route.params\\n`\n\n\tconst shouldPrecompile =\n\t\tapp.config.precompile === true ||\n\t\t(typeof app.config.precompile === 'object' &&\n\t\t\tapp.config.precompile.compose === true)\n\n\tif (!shouldPrecompile)\n\t\tfindDynamicRoute += `\n\t\t\tif(route.store.composed)\n\t\t\t\treturn route.store.composed(ctx)\n\n\t\t\tif(route.store.compose)\n\t\t\t\treturn (route.store.compose())(ctx)`\n\telse findDynamicRoute += `return route.store(ctx)`\n\n\tfindDynamicRoute += '\\n'\n\n\tlet switchMap = ``\n\tfor (const [path, { code, all }] of Object.entries(router.static.http.map))\n\t\tswitchMap += `case '${path}':\\nswitch(request.method) {\\n${code}\\n${\n\t\t\tall ?? `default: break map`\n\t\t}}\\n\\n`\n\n\tconst maybeAsync = app.event.request.some(isAsync)\n\n\tconst init = `\\n\n\tconst url = request.url\n\tconst s = url.indexOf('/', 11)\n\tconst qi = url.indexOf('?', s + 1)\n\tlet path\n\tif(qi === -1)\n\t\tpath = url.substring(s)\n\telse \n\t\tpath = url.substring(s, qi)\\n`\n\n\tfnLiteral += `const {\n\t\tapp,\n\t\tmapEarlyResponse,\n\t\tNotFoundError,\n\t\trequestId,\n\t\tgetReporter,\n\t\thandleError,\n\t\terror\n\t} = data\n\n\tconst store = app.singleton.store\n\tconst staticRouter = app.router.static.http\n\tconst wsRouter = app.router.ws\n\tconst router = app.router.http\n\n\tconst notFound = new NotFoundError()\n\n\t${app.event.request.length ? `const onRequest = app.event.request` : ''}\n\t${router.static.http.variables}\n\t${\n\t\tapp.event.error.length\n\t\t\t? ''\n\t\t\t: `\n\tconst error404Message = notFound.message.toString()\n\tconst error404 = new Response(error404Message, { status: 404 });\n\t`\n\t}\n\n\treturn ${maybeAsync ? 'async' : ''} function map(request) {\\n`\n\n\tif (app.event.request.length) fnLiteral += `let re`\n\n\tconst report = createReport({\n\t\thasTrace,\n\t\thasTraceSet: inference.trace.set,\n\t\tcondition: {\n\t\t\trequest: inference.trace.request\n\t\t},\n\t\taddFn: (word) => {\n\t\t\tfnLiteral += word\n\t\t}\n\t})\n\n\tif (app.event.request.length) {\n\t\tfnLiteral += `\n\t\t\t${hasTrace ? 'const id = +requestId.value++' : ''}\n\n\t\t\tconst ctx = {\n\t\t\t\trequest,\n\t\t\t\tstore,\n\t\t\t\tset: {\n\t\t\t\t\theaders: ${\n\t\t\t\t\t\tObject.keys(defaultHeaders ?? {}).length\n\t\t\t\t\t\t\t? 'Object.assign({}, app.setHeaders)'\n\t\t\t\t\t\t\t: '{}'\n\t\t\t\t\t},\n\t\t\t\t\tstatus: 200\n\t\t\t\t},\n\t\t\t\terror\n\t\t\t\t${hasTrace ? ',$$requestId: +id' : ''}\n\t\t\t\t${decoratorsLiteral}\n\t\t\t}\n\t\t`\n\n\t\tconst endReport = report('request', {\n\t\t\tattribute: 'ctx',\n\t\t\tunit: app.event.request.length\n\t\t})\n\n\t\tfnLiteral += `\\n try {\\n`\n\n\t\tfor (let i = 0; i < app.event.request.length; i++) {\n\t\t\tconst fn = app.event.request[i]\n\t\t\tconst withReturn = hasReturn(fn.toString())\n\t\t\tconst maybeAsync = isAsync(fn)\n\n\t\t\tconst endUnit = report('request.unit', {\n\t\t\t\tname: app.event.request[i].name\n\t\t\t})\n\n\t\t\tif (withReturn) {\n\t\t\t\tfnLiteral += `re = mapEarlyResponse(\n\t\t\t\t\t${maybeAsync ? 'await' : ''} onRequest[${i}](ctx),\n\t\t\t\t\tctx.set,\n\t\t\t\t\trequest\n\t\t\t\t)\\n`\n\n\t\t\t\tendUnit()\n\n\t\t\t\tfnLiteral += `if(re !== undefined) return re\\n`\n\t\t\t} else {\n\t\t\t\tfnLiteral += `${\n\t\t\t\t\tmaybeAsync ? 'await' : ''\n\t\t\t\t} onRequest[${i}](ctx)\\n`\n\t\t\t\tendUnit()\n\t\t\t}\n\t\t}\n\n\t\tfnLiteral += `} catch (error) {\n\t\t\treturn app.handleError(ctx, error)\n\t\t}`\n\n\t\tendReport()\n\n\t\tfnLiteral += init\n\t\tfnLiteral += `\\nctx.qi = qi\\n ctx.path = path\\n`\n\t} else {\n\t\tfnLiteral += init\n\t\tfnLiteral += `${hasTrace ? 'const id = +requestId.value++' : ''}\n\t\tconst ctx = {\n\t\t\trequest,\n\t\t\tstore,\n\t\t\tqi,\n\t\t\tpath,\n\t\t\tset: {\n\t\t\t\theaders: ${\n\t\t\t\t\tObject.keys(defaultHeaders ?? {}).length\n\t\t\t\t\t\t? 'Object.assign({}, app.setHeaders)'\n\t\t\t\t\t\t: '{}'\n\t\t\t\t},\n\t\t\t\tstatus: 200\n\t\t\t},\n\t\t\terror\n\t\t\t${hasTrace ? ',$$requestId: id' : ''}\n\t\t\t${decoratorsLiteral}\n\t\t}`\n\n\t\treport('request', {\n\t\t\tunit: app.event.request.length,\n\t\t\tattribute:\n\t\t\t\tinference.trace.context ||\n\t\t\t\tinference.trace.store ||\n\t\t\t\tinference.trace.set\n\t\t\t\t\t? 'ctx'\n\t\t\t\t\t: ''\n\t\t})()\n\t}\n\n\tconst wsPaths = app.router.static.ws\n\tconst wsRouter = app.router.ws\n\n\tif (Object.keys(wsPaths).length || wsRouter.history.length) {\n\t\tfnLiteral += `\n\t\t\tif(request.method === 'GET') {\n\t\t\t\tswitch(path) {`\n\n\t\tfor (const [path, index] of Object.entries(wsPaths)) {\n\t\t\tfnLiteral += `\n\t\t\t\t\tcase '${path}':\n\t\t\t\t\t\tif(request.headers.get('upgrade') === 'websocket')\n\t\t\t\t\t\t\treturn st${index}(ctx)\n\n\t\t\t\t\t\tbreak`\n\t\t}\n\n\t\tfnLiteral += `\n\t\t\t\tdefault:\n\t\t\t\t\tif(request.headers.get('upgrade') === 'websocket') {\n\t\t\t\t\t\tconst route = wsRouter.find('ws', path)\n\n\t\t\t\t\t\tif(route) {\n\t\t\t\t\t\t\tctx.params = route.params\n\n\t\t\t\t\t\t\treturn route.store(ctx)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\\n`\n\t}\n\n\tfnLiteral += `\n\t\tmap: switch(path) {\n\t\t\t${switchMap}\n\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\n\t\t${findDynamicRoute}\n\t}`\n\n\tconst handleError = composeErrorHandler(app) as any\n\n\t// @ts-ignore\n\tapp.handleError = handleError\n\n\treturn Function(\n\t\t'data',\n\t\tfnLiteral\n\t)({\n\t\tapp,\n\t\tmapEarlyResponse,\n\t\tNotFoundError,\n\t\t// @ts-ignore\n\t\tgetReporter: () => app.reporter,\n\t\trequestId,\n\t\thandleError,\n\t\terror\n\t})\n}\n\nexport const composeErrorHandler = (\n\tapp: Elysia<any, any, any, any, any, any, any, any>\n) => {\n\tlet fnLiteral = `const {\n\t\tapp: { event: { error: onError, onResponse: res } },\n\t\tmapResponse,\n\t\tERROR_CODE,\n\t\tELYSIA_RESPONSE\n\t} = inject\n\n\treturn ${\n\t\tapp.event.error.find(isAsync) ? 'async' : ''\n\t} function(context, error, skipGlobal) {\n\t\tlet r\n\n\t\tconst { set } = context\n\n\t\tcontext.code = error.code\n\t\tcontext.error = error\n\n\t\tif(error[ELYSIA_RESPONSE]) {\n\t\t\terror.status = error[ELYSIA_RESPONSE]\n\t\t\terror.message = error.response\n\t\t}\\n`\n\n\tfor (let i = 0; i < app.event.error.length; i++) {\n\t\tconst handler = app.event.error[i]\n\n\t\tconst response = `${\n\t\t\tisAsync(handler) ? 'await ' : ''\n\t\t}onError[${i}](context)`\n\n\t\tfnLiteral += '\\nif(skipGlobal !== true) {\\n'\n\n\t\tif (hasReturn(handler.toString()))\n\t\t\tfnLiteral += `r = ${response}; if(r !== undefined) {\n\t\t\t\tif(r instanceof Response) return r\n\n\t\t\t\tif(r[ELYSIA_RESPONSE]) {\n\t\t\t\t\terror.status = error[ELYSIA_RESPONSE]\n\t\t\t\t\terror.message = error.response\n\t\t\t\t}\n\t\t\n\t\t\t\tif(set.status === 200) set.status = error.status\n\t\t\t\treturn mapResponse(r, set, context.request)\n\t\t\t}\\n`\n\t\telse fnLiteral += response + '\\n'\n\n\t\tfnLiteral += '\\n}\\n'\n\t}\n\n\tfnLiteral += `if(error.constructor.name === \"ValidationError\" || error.constructor.name === \"TransformDecodeError\") {\n\t\tset.status = error.status ?? 422\n\t\treturn new Response(\n\t\t\terror.message,\n\t\t\t{ \n\t\t\t\theaders: Object.assign(\n\t\t\t\t\t{ 'content-type': 'application/json'}, \n\t\t\t\t\tset.headers\n\t\t\t\t), \n\t\t\t\tstatus: set.status\n\t\t\t}\n\t\t)\n\t} else {\n\t\tif(error.code && typeof error.status === \"number\")\n\t\t\treturn new Response(\n\t\t\t\terror.message,\n\t\t\t\t{ headers: set.headers, status: error.status }\n\t\t\t)\n\n\t\treturn mapResponse(error, set, context.request)\n\t}\n}`\n\n\treturn Function(\n\t\t'inject',\n\t\tfnLiteral\n\t)({\n\t\tapp,\n\t\tmapResponse,\n\t\tERROR_CODE,\n\t\tELYSIA_RESPONSE\n\t})\n}\n\nexport const jitRoute = (\n\tindex: number\n) => `if(stc${index}) return stc${index}(ctx)\nif(st${index}.compose) return (stc${index} = st${index}.compose())(ctx)\n\nreturn st${index}(ctx)`\n",
  "import type { Elysia } from '.'\n\nimport { mapEarlyResponse, mapResponse } from './handler'\nimport { ElysiaErrors, NotFoundError, ValidationError } from './error'\n\nimport type { Context } from './context'\n\nimport { parse as parseQuery } from 'fast-querystring'\n\nimport { signCookie } from './utils'\nimport { parseCookie } from './cookies'\n\nimport type { Handler, LifeCycleStore, SchemaValidator } from './types'\n\n// JIT Handler\nexport type DynamicHandler = {\n\thandle: Handler<any, any>\n\tcontent?: string\n\thooks: LifeCycleStore\n\tvalidator?: SchemaValidator\n}\n\nexport const createDynamicHandler =\n\t(app: Elysia<any, any, any, any, any, any, any, any>) =>\n\tasync (request: Request): Promise<Response> => {\n\t\tconst url = request.url,\n\t\t\ts = url.indexOf('/', 11),\n\t\t\tqi = url.indexOf('?', s + 1),\n\t\t\tpath = qi === -1 ? url.substring(s) : url.substring(s, qi)\n\n\t\tconst set: Context['set'] = {\n\t\t\tcookie: {},\n\t\t\tstatus: 200,\n\t\t\theaders: {}\n\t\t}\n\n\t\tconst context = Object.assign(\n\t\t\t{},\n\t\t\t// @ts-expect-error\n\t\t\tapp.singleton.decorator,\n\t\t\t{\n\t\t\t\tset,\n\t\t\t\t// @ts-expect-error\n\t\t\t\tstore: app.singleton.store,\n\t\t\t\trequest,\n\t\t\t\tpath,\n\t\t\t\tqi\n\t\t\t}\n\t\t) as unknown as Context\n\n\t\ttry {\n\t\t\tfor (let i = 0; i < app.event.request.length; i++) {\n\t\t\t\t// @ts-ignore\n\t\t\t\tconst onRequest = app.event.request[i]\n\t\t\t\tlet response = onRequest(context as any)\n\t\t\t\tif (response instanceof Promise) response = await response\n\n\t\t\t\tresponse = mapEarlyResponse(response, set)\n\t\t\t\tif (response) return response\n\t\t\t}\n\n\t\t\tconst handler =\n\t\t\t\tapp.router.dynamic.find(request.method, path) ??\n\t\t\t\tapp.router.dynamic.find('ALL', path)\n\n\t\t\tif (!handler) throw new NotFoundError()\n\n\t\t\tconst { handle, hooks, validator, content } = handler.store\n\n\t\t\tlet body: string | Record<string, any> | undefined\n\t\t\tif (request.method !== 'GET' && request.method !== 'HEAD') {\n\t\t\t\tif (content) {\n\t\t\t\t\tswitch (content) {\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\t\tbody = (await request.json()) as any\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\t\tbody = await request.text()\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = parseQuery(await request.text())\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\tcase 'application/octet-stream':\n\t\t\t\t\t\t\tbody = await request.arrayBuffer()\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\tcase 'multipart/form-data':\n\t\t\t\t\t\t\tbody = {}\n\n\t\t\t\t\t\t\tconst form = await request.formData()\n\t\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\t\tif (body[key]) continue\n\n\t\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\t\tif (value.length === 1) body[key] = value[0]\n\t\t\t\t\t\t\t\telse body[key] = value\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet contentType = request.headers.get('content-type')\n\n\t\t\t\t\tif (contentType) {\n\t\t\t\t\t\tconst index = contentType.indexOf(';')\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\tcontentType = contentType.slice(0, index)\n\n\t\t\t\t\t\tfor (let i = 0; i < hooks.parse.length; i++) {\n\t\t\t\t\t\t\tlet temp = hooks.parse[i](context, contentType)\n\t\t\t\t\t\t\tif (temp instanceof Promise) temp = await temp\n\n\t\t\t\t\t\t\tif (temp) {\n\t\t\t\t\t\t\t\tbody = temp\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// body might be empty string thus can't use !body\n\t\t\t\t\t\tif (body === undefined) {\n\t\t\t\t\t\t\tswitch (contentType) {\n\t\t\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\t\t\t\tbody = (await request.json()) as any\n\t\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\t\t\t\tbody = await request.text()\n\t\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\t\t\tbody = parseQuery(await request.text())\n\t\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t\tcase 'application/octet-stream':\n\t\t\t\t\t\t\t\t\tbody = await request.arrayBuffer()\n\t\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t\tcase 'multipart/form-data':\n\t\t\t\t\t\t\t\t\tbody = {}\n\n\t\t\t\t\t\t\t\t\tconst form = await request.formData()\n\t\t\t\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\t\t\t\tif (body[key]) continue\n\n\t\t\t\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\t\t\t\tif (value.length === 1)\n\t\t\t\t\t\t\t\t\t\t\tbody[key] = value[0]\n\t\t\t\t\t\t\t\t\t\telse body[key] = value\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcontext.body = body\n\t\t\t// @ts-expect-error\n\t\t\tcontext.params = handler?.params || undefined\n\t\t\tcontext.query = qi === -1 ? {} : parseQuery(url.substring(qi + 1))\n\n\t\t\tcontext.headers = {}\n\t\t\tfor (const [key, value] of request.headers.entries())\n\t\t\t\tcontext.headers[key] = value\n\n\t\t\t// @ts-expect-error\n\t\t\tconst cookieMeta = validator?.cookie?.schema as {\n\t\t\t\tsecrets?: string | string[]\n\t\t\t\tsign: string[] | true\n\t\t\t\tproperties: { [x: string]: Object }\n\t\t\t}\n\n\t\t\tconst cookieHeaderValue = request.headers.get('cookie')\n\n\t\t\tif (cookieHeaderValue)\n\t\t\t\tcontext.cookie = await parseCookie(\n\t\t\t\t\tcontext.set,\n\t\t\t\t\tcookieHeaderValue,\n\t\t\t\t\tcookieMeta\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tsecret:\n\t\t\t\t\t\t\t\t\tcookieMeta.secrets !== undefined\n\t\t\t\t\t\t\t\t\t\t? typeof cookieMeta.secrets === 'string'\n\t\t\t\t\t\t\t\t\t\t\t? cookieMeta.secrets\n\t\t\t\t\t\t\t\t\t\t\t: cookieMeta.secrets.join(',')\n\t\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\tsign:\n\t\t\t\t\t\t\t\t\tcookieMeta.sign === true\n\t\t\t\t\t\t\t\t\t\t? true\n\t\t\t\t\t\t\t\t\t\t: cookieMeta.sign !== undefined\n\t\t\t\t\t\t\t\t\t\t? typeof cookieMeta.sign === 'string'\n\t\t\t\t\t\t\t\t\t\t\t? cookieMeta.sign\n\t\t\t\t\t\t\t\t\t\t\t: cookieMeta.sign.join(',')\n\t\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: undefined\n\t\t\t\t)\n\n\t\t\tfor (let i = 0; i < hooks.transform.length; i++) {\n\t\t\t\tconst operation = hooks.transform[i](context)\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (hooks.transform[i].$elysia === 'derive') {\n\t\t\t\t\tif (operation instanceof Promise)\n\t\t\t\t\t\tObject.assign(context, await operation)\n\t\t\t\t\telse Object.assign(context, operation)\n\t\t\t\t} else if (operation instanceof Promise) await operation\n\t\t\t}\n\n\t\t\tif (validator) {\n\t\t\t\tif (validator.headers) {\n\t\t\t\t\tconst _header: Record<string, string> = {}\n\t\t\t\t\tfor (const key in request.headers)\n\t\t\t\t\t\t_header[key] = request.headers.get(key)!\n\n\t\t\t\t\tif (validator.headers.Check(_header) === false)\n\t\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t\t'header',\n\t\t\t\t\t\t\tvalidator.headers,\n\t\t\t\t\t\t\t_header\n\t\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tif (validator.params?.Check(context.params) === false)\n\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t'params',\n\t\t\t\t\t\tvalidator.params,\n\t\t\t\t\t\tcontext.params\n\t\t\t\t\t)\n\n\t\t\t\tif (validator.query?.Check(context.query) === false)\n\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t'query',\n\t\t\t\t\t\tvalidator.query,\n\t\t\t\t\t\tcontext.query\n\t\t\t\t\t)\n\n\t\t\t\tif (validator.cookie) {\n\t\t\t\t\tconst cookieValue: Record<string, unknown> = {}\n\t\t\t\t\tfor (const [key, value] of Object.entries(context.cookie))\n\t\t\t\t\t\tcookieValue[key] = value.value\n\n\t\t\t\t\tif (validator.cookie?.Check(cookieValue) === false)\n\t\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t\t'cookie',\n\t\t\t\t\t\t\tvalidator.cookie,\n\t\t\t\t\t\t\tcookieValue\n\t\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tif (validator.body?.Check(body) === false)\n\t\t\t\t\tthrow new ValidationError('body', validator.body, body)\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < hooks.beforeHandle.length; i++) {\n\t\t\t\tlet response = hooks.beforeHandle[i](context)\n\t\t\t\tif (response instanceof Promise) response = await response\n\n\t\t\t\t// `false` is a falsey value, check for undefined instead\n\t\t\t\tif (response !== undefined) {\n\t\t\t\t\t;(\n\t\t\t\t\t\tcontext as Context & {\n\t\t\t\t\t\t\tresponse: unknown\n\t\t\t\t\t\t}\n\t\t\t\t\t).response = response\n\n\t\t\t\t\tfor (let i = 0; i < hooks.afterHandle.length; i++) {\n\t\t\t\t\t\tlet newResponse = hooks.afterHandle[i](\n\t\t\t\t\t\t\tcontext as Context & {\n\t\t\t\t\t\t\t\tresponse: unknown\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t\tif (newResponse instanceof Promise)\n\t\t\t\t\t\t\tnewResponse = await newResponse\n\n\t\t\t\t\t\tif (newResponse) response = newResponse\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = mapEarlyResponse(response, context.set)\n\t\t\t\t\tif (result) return result\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet response = handle(context)\n\t\t\tif (response instanceof Promise) response = await response\n\n\t\t\tif (!hooks.afterHandle.length) {\n\t\t\t\tconst responseValidator = validator?.response?.[response.status]\n\n\t\t\t\tif (responseValidator?.Check(response) === false)\n\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t'response',\n\t\t\t\t\t\tresponseValidator,\n\t\t\t\t\t\tresponse\n\t\t\t\t\t)\n\t\t\t} else {\n\t\t\t\t;(\n\t\t\t\t\tcontext as Context & {\n\t\t\t\t\t\tresponse: unknown\n\t\t\t\t\t}\n\t\t\t\t).response = response\n\n\t\t\t\tfor (let i = 0; i < hooks.afterHandle.length; i++) {\n\t\t\t\t\tlet newResponse = hooks.afterHandle[i](\n\t\t\t\t\t\tcontext as Context & {\n\t\t\t\t\t\t\tresponse: unknown\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t\tif (newResponse instanceof Promise)\n\t\t\t\t\t\tnewResponse = await newResponse\n\n\t\t\t\t\tconst result = mapEarlyResponse(newResponse, context.set)\n\t\t\t\t\tif (result !== undefined) {\n\t\t\t\t\t\tconst responseValidator =\n\t\t\t\t\t\t\tvalidator?.response?.[response.status]\n\n\t\t\t\t\t\tif (responseValidator?.Check(result) === false)\n\t\t\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t\t\t'response',\n\t\t\t\t\t\t\t\tresponseValidator,\n\t\t\t\t\t\t\t\tresult\n\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\treturn result\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (context.set.cookie && cookieMeta?.sign) {\n\t\t\t\tconst secret = !cookieMeta.secrets\n\t\t\t\t\t? undefined\n\t\t\t\t\t: typeof cookieMeta.secrets === 'string'\n\t\t\t\t\t? cookieMeta.secrets\n\t\t\t\t\t: cookieMeta.secrets[0]\n\n\t\t\t\tif (cookieMeta.sign === true)\n\t\t\t\t\tfor (const [key, cookie] of Object.entries(\n\t\t\t\t\t\tcontext.set.cookie\n\t\t\t\t\t))\n\t\t\t\t\t\tcontext.set.cookie[key].value = await signCookie(\n\t\t\t\t\t\t\tcookie.value as any,\n\t\t\t\t\t\t\t'${secret}'\n\t\t\t\t\t\t)\n\t\t\t\telse\n\t\t\t\t\tfor (const name of cookieMeta.sign) {\n\t\t\t\t\t\tif (!(name in cookieMeta.properties)) continue\n\n\t\t\t\t\t\tif (context.set.cookie[name]?.value) {\n\t\t\t\t\t\t\tcontext.set.cookie[name].value = await signCookie(\n\t\t\t\t\t\t\t\tcontext.set.cookie[name].value as any,\n\t\t\t\t\t\t\t\tsecret as any\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn mapResponse(response, context.set)\n\t\t} catch (error) {\n\t\t\tif ((error as ElysiaErrors).status)\n\t\t\t\tset.status = (error as ElysiaErrors).status\n\n\t\t\t// @ts-ignore\n\t\t\treturn app.handleError(context, error)\n\t\t} finally {\n\t\t\t// @ts-ignore\n\t\t\tfor (const onResponse of app.event.onResponse)\n\t\t\t\tawait onResponse(context)\n\t\t}\n\t}\n\nexport const createDynamicErrorHandler =\n\t(app: Elysia<any, any, any, any, any, any, any, any>) =>\n\tasync (context: Context, error: ElysiaErrors) => {\n\t\tconst errorContext = Object.assign(context, { error, code: error.code })\n\t\terrorContext.set = context.set\n\n\t\t// @ts-ignore\n\t\tfor (let i = 0; i < app.event.error.length; i++) {\n\t\t\tlet response = app.event.error[i](errorContext as any)\n\t\t\tif (response instanceof Promise) response = await response\n\t\t\tif (response !== undefined && response !== null)\n\t\t\t\treturn mapResponse(response, context.set)\n\t\t}\n\n\t\treturn new Response(\n\t\t\ttypeof error.cause === 'string' ? error.cause : error.message,\n\t\t\t{\n\t\t\t\theaders: context.set.headers,\n\t\t\t\tstatus: error.status ?? 500\n\t\t\t}\n\t\t)\n\t}\n",
  "import type { Elysia } from '.'\n\nimport { mapEarlyResponse, mapResponse } from './handler'\nimport { ElysiaErrors, NotFoundError, ValidationError } from './error'\n\nimport type { Context } from './context'\n\nimport { parse as parseQuery } from 'fast-querystring'\n\nimport { signCookie } from './utils'\nimport { parseCookie } from './cookies'\n\nimport type { Handler, LifeCycleStore, SchemaValidator } from './types'\n\n// JIT Handler\nexport type DynamicHandler = {\n\thandle: Handler<any, any>\n\tcontent?: string\n\thooks: LifeCycleStore\n\tvalidator?: SchemaValidator\n}\n\nexport const createDynamicHandler =\n\t(app: Elysia<any, any, any, any, any, any, any, any>) =>\n\tasync (request: Request): Promise<Response> => {\n\t\tconst url = request.url,\n\t\t\ts = url.indexOf('/', 11),\n\t\t\tqi = url.indexOf('?', s + 1),\n\t\t\tpath = qi === -1 ? url.substring(s) : url.substring(s, qi)\n\n\t\tconst set: Context['set'] = {\n\t\t\tcookie: {},\n\t\t\tstatus: 200,\n\t\t\theaders: {}\n\t\t}\n\n\t\tconst context = Object.assign(\n\t\t\t{},\n\t\t\t// @ts-expect-error\n\t\t\tapp.singleton.decorator,\n\t\t\t{\n\t\t\t\tset,\n\t\t\t\t// @ts-expect-error\n\t\t\t\tstore: app.singleton.store,\n\t\t\t\trequest,\n\t\t\t\tpath,\n\t\t\t\tqi\n\t\t\t}\n\t\t) as unknown as Context\n\n\t\ttry {\n\t\t\tfor (let i = 0; i < app.event.request.length; i++) {\n\t\t\t\t// @ts-ignore\n\t\t\t\tconst onRequest = app.event.request[i]\n\t\t\t\tlet response = onRequest(context as any)\n\t\t\t\tif (response instanceof Promise) response = await response\n\n\t\t\t\tresponse = mapEarlyResponse(response, set)\n\t\t\t\tif (response) return response\n\t\t\t}\n\n\t\t\tconst handler =\n\t\t\t\tapp.router.dynamic.find(request.method, path) ??\n\t\t\t\tapp.router.dynamic.find('ALL', path)\n\n\t\t\tif (!handler) throw new NotFoundError()\n\n\t\t\tconst { handle, hooks, validator, content } = handler.store\n\n\t\t\tlet body: string | Record<string, any> | undefined\n\t\t\tif (request.method !== 'GET' && request.method !== 'HEAD') {\n\t\t\t\tif (content) {\n\t\t\t\t\tswitch (content) {\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\t\tbody = (await request.json()) as any\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\t\tbody = await request.text()\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = parseQuery(await request.text())\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\tcase 'application/octet-stream':\n\t\t\t\t\t\t\tbody = await request.arrayBuffer()\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\tcase 'multipart/form-data':\n\t\t\t\t\t\t\tbody = {}\n\n\t\t\t\t\t\t\tconst form = await request.formData()\n\t\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\t\tif (body[key]) continue\n\n\t\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\t\tif (value.length === 1) body[key] = value[0]\n\t\t\t\t\t\t\t\telse body[key] = value\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet contentType = request.headers.get('content-type')\n\n\t\t\t\t\tif (contentType) {\n\t\t\t\t\t\tconst index = contentType.indexOf(';')\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\tcontentType = contentType.slice(0, index)\n\n\t\t\t\t\t\tfor (let i = 0; i < hooks.parse.length; i++) {\n\t\t\t\t\t\t\tlet temp = hooks.parse[i](context, contentType)\n\t\t\t\t\t\t\tif (temp instanceof Promise) temp = await temp\n\n\t\t\t\t\t\t\tif (temp) {\n\t\t\t\t\t\t\t\tbody = temp\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// body might be empty string thus can't use !body\n\t\t\t\t\t\tif (body === undefined) {\n\t\t\t\t\t\t\tswitch (contentType) {\n\t\t\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\t\t\t\tbody = (await request.json()) as any\n\t\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\t\t\t\tbody = await request.text()\n\t\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\t\t\tbody = parseQuery(await request.text())\n\t\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t\tcase 'application/octet-stream':\n\t\t\t\t\t\t\t\t\tbody = await request.arrayBuffer()\n\t\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t\tcase 'multipart/form-data':\n\t\t\t\t\t\t\t\t\tbody = {}\n\n\t\t\t\t\t\t\t\t\tconst form = await request.formData()\n\t\t\t\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\t\t\t\tif (body[key]) continue\n\n\t\t\t\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\t\t\t\tif (value.length === 1)\n\t\t\t\t\t\t\t\t\t\t\tbody[key] = value[0]\n\t\t\t\t\t\t\t\t\t\telse body[key] = value\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcontext.body = body\n\t\t\t// @ts-expect-error\n\t\t\tcontext.params = handler?.params || undefined\n\t\t\tcontext.query = qi === -1 ? {} : parseQuery(url.substring(qi + 1))\n\n\t\t\tcontext.headers = {}\n\t\t\tfor (const [key, value] of request.headers.entries())\n\t\t\t\tcontext.headers[key] = value\n\n\t\t\t// @ts-expect-error\n\t\t\tconst cookieMeta = validator?.cookie?.schema as {\n\t\t\t\tsecrets?: string | string[]\n\t\t\t\tsign: string[] | true\n\t\t\t\tproperties: { [x: string]: Object }\n\t\t\t}\n\n\t\t\tconst cookieHeaderValue = request.headers.get('cookie')\n\n\t\t\tif (cookieHeaderValue)\n\t\t\t\tcontext.cookie = await parseCookie(\n\t\t\t\t\tcontext.set,\n\t\t\t\t\tcookieHeaderValue,\n\t\t\t\t\tcookieMeta\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tsecret:\n\t\t\t\t\t\t\t\t\tcookieMeta.secrets !== undefined\n\t\t\t\t\t\t\t\t\t\t? typeof cookieMeta.secrets === 'string'\n\t\t\t\t\t\t\t\t\t\t\t? cookieMeta.secrets\n\t\t\t\t\t\t\t\t\t\t\t: cookieMeta.secrets.join(',')\n\t\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\tsign:\n\t\t\t\t\t\t\t\t\tcookieMeta.sign === true\n\t\t\t\t\t\t\t\t\t\t? true\n\t\t\t\t\t\t\t\t\t\t: cookieMeta.sign !== undefined\n\t\t\t\t\t\t\t\t\t\t? typeof cookieMeta.sign === 'string'\n\t\t\t\t\t\t\t\t\t\t\t? cookieMeta.sign\n\t\t\t\t\t\t\t\t\t\t\t: cookieMeta.sign.join(',')\n\t\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: undefined\n\t\t\t\t)\n\n\t\t\tfor (let i = 0; i < hooks.transform.length; i++) {\n\t\t\t\tconst operation = hooks.transform[i](context)\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (hooks.transform[i].$elysia === 'derive') {\n\t\t\t\t\tif (operation instanceof Promise)\n\t\t\t\t\t\tObject.assign(context, await operation)\n\t\t\t\t\telse Object.assign(context, operation)\n\t\t\t\t} else if (operation instanceof Promise) await operation\n\t\t\t}\n\n\t\t\tif (validator) {\n\t\t\t\tif (validator.headers) {\n\t\t\t\t\tconst _header: Record<string, string> = {}\n\t\t\t\t\tfor (const key in request.headers)\n\t\t\t\t\t\t_header[key] = request.headers.get(key)!\n\n\t\t\t\t\tif (validator.headers.Check(_header) === false)\n\t\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t\t'header',\n\t\t\t\t\t\t\tvalidator.headers,\n\t\t\t\t\t\t\t_header\n\t\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tif (validator.params?.Check(context.params) === false)\n\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t'params',\n\t\t\t\t\t\tvalidator.params,\n\t\t\t\t\t\tcontext.params\n\t\t\t\t\t)\n\n\t\t\t\tif (validator.query?.Check(context.query) === false)\n\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t'query',\n\t\t\t\t\t\tvalidator.query,\n\t\t\t\t\t\tcontext.query\n\t\t\t\t\t)\n\n\t\t\t\tif (validator.cookie) {\n\t\t\t\t\tconst cookieValue: Record<string, unknown> = {}\n\t\t\t\t\tfor (const [key, value] of Object.entries(context.cookie))\n\t\t\t\t\t\tcookieValue[key] = value.value\n\n\t\t\t\t\tif (validator.cookie?.Check(cookieValue) === false)\n\t\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t\t'cookie',\n\t\t\t\t\t\t\tvalidator.cookie,\n\t\t\t\t\t\t\tcookieValue\n\t\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tif (validator.body?.Check(body) === false)\n\t\t\t\t\tthrow new ValidationError('body', validator.body, body)\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < hooks.beforeHandle.length; i++) {\n\t\t\t\tlet response = hooks.beforeHandle[i](context)\n\t\t\t\tif (response instanceof Promise) response = await response\n\n\t\t\t\t// `false` is a falsey value, check for undefined instead\n\t\t\t\tif (response !== undefined) {\n\t\t\t\t\t;(\n\t\t\t\t\t\tcontext as Context & {\n\t\t\t\t\t\t\tresponse: unknown\n\t\t\t\t\t\t}\n\t\t\t\t\t).response = response\n\n\t\t\t\t\tfor (let i = 0; i < hooks.afterHandle.length; i++) {\n\t\t\t\t\t\tlet newResponse = hooks.afterHandle[i](\n\t\t\t\t\t\t\tcontext as Context & {\n\t\t\t\t\t\t\t\tresponse: unknown\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t\tif (newResponse instanceof Promise)\n\t\t\t\t\t\t\tnewResponse = await newResponse\n\n\t\t\t\t\t\tif (newResponse) response = newResponse\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = mapEarlyResponse(response, context.set)\n\t\t\t\t\tif (result) return result\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet response = handle(context)\n\t\t\tif (response instanceof Promise) response = await response\n\n\t\t\tif (!hooks.afterHandle.length) {\n\t\t\t\tconst responseValidator = validator?.response?.[response.status]\n\n\t\t\t\tif (responseValidator?.Check(response) === false)\n\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t'response',\n\t\t\t\t\t\tresponseValidator,\n\t\t\t\t\t\tresponse\n\t\t\t\t\t)\n\t\t\t} else {\n\t\t\t\t;(\n\t\t\t\t\tcontext as Context & {\n\t\t\t\t\t\tresponse: unknown\n\t\t\t\t\t}\n\t\t\t\t).response = response\n\n\t\t\t\tfor (let i = 0; i < hooks.afterHandle.length; i++) {\n\t\t\t\t\tlet newResponse = hooks.afterHandle[i](\n\t\t\t\t\t\tcontext as Context & {\n\t\t\t\t\t\t\tresponse: unknown\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t\tif (newResponse instanceof Promise)\n\t\t\t\t\t\tnewResponse = await newResponse\n\n\t\t\t\t\tconst result = mapEarlyResponse(newResponse, context.set)\n\t\t\t\t\tif (result !== undefined) {\n\t\t\t\t\t\tconst responseValidator =\n\t\t\t\t\t\t\tvalidator?.response?.[response.status]\n\n\t\t\t\t\t\tif (responseValidator?.Check(result) === false)\n\t\t\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t\t\t'response',\n\t\t\t\t\t\t\t\tresponseValidator,\n\t\t\t\t\t\t\t\tresult\n\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\treturn result\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (context.set.cookie && cookieMeta?.sign) {\n\t\t\t\tconst secret = !cookieMeta.secrets\n\t\t\t\t\t? undefined\n\t\t\t\t\t: typeof cookieMeta.secrets === 'string'\n\t\t\t\t\t? cookieMeta.secrets\n\t\t\t\t\t: cookieMeta.secrets[0]\n\n\t\t\t\tif (cookieMeta.sign === true)\n\t\t\t\t\tfor (const [key, cookie] of Object.entries(\n\t\t\t\t\t\tcontext.set.cookie\n\t\t\t\t\t))\n\t\t\t\t\t\tcontext.set.cookie[key].value = await signCookie(\n\t\t\t\t\t\t\tcookie.value as any,\n\t\t\t\t\t\t\t'${secret}'\n\t\t\t\t\t\t)\n\t\t\t\telse\n\t\t\t\t\tfor (const name of cookieMeta.sign) {\n\t\t\t\t\t\tif (!(name in cookieMeta.properties)) continue\n\n\t\t\t\t\t\tif (context.set.cookie[name]?.value) {\n\t\t\t\t\t\t\tcontext.set.cookie[name].value = await signCookie(\n\t\t\t\t\t\t\t\tcontext.set.cookie[name].value as any,\n\t\t\t\t\t\t\t\tsecret as any\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn mapResponse(response, context.set)\n\t\t} catch (error) {\n\t\t\tif ((error as ElysiaErrors).status)\n\t\t\t\tset.status = (error as ElysiaErrors).status\n\n\t\t\t// @ts-ignore\n\t\t\treturn app.handleError(context, error)\n\t\t} finally {\n\t\t\t// @ts-ignore\n\t\t\tfor (const onResponse of app.event.onResponse)\n\t\t\t\tawait onResponse(context)\n\t\t}\n\t}\n\nexport const createDynamicErrorHandler =\n\t(app: Elysia<any, any, any, any, any, any, any, any>) =>\n\tasync (context: Context, error: ElysiaErrors) => {\n\t\tconst errorContext = Object.assign(context, { error, code: error.code })\n\t\terrorContext.set = context.set\n\n\t\t// @ts-ignore\n\t\tfor (let i = 0; i < app.event.error.length; i++) {\n\t\t\tlet response = app.event.error[i](errorContext as any)\n\t\t\tif (response instanceof Promise) response = await response\n\t\t\tif (response !== undefined && response !== null)\n\t\t\t\treturn mapResponse(response, context.set)\n\t\t}\n\n\t\treturn new Response(\n\t\t\ttypeof error.cause === 'string' ? error.cause : error.message,\n\t\t\t{\n\t\t\t\theaders: context.set.headers,\n\t\t\t\tstatus: error.status ?? 500\n\t\t\t}\n\t\t)\n\t}\n",
  "import { DateOptions, NumberOptions, TDate } from '@sinclair/typebox'\nimport { TypeSystem } from '@sinclair/typebox/system'\nimport {\n\tType,\n\ttype SchemaOptions,\n\ttype TNull,\n\ttype TUnion,\n\ttype TSchema,\n\ttype TUndefined,\n\tTProperties,\n\tObjectOptions,\n\tTObject,\n\tTNumber,\n\tTBoolean,\n\tFormatRegistry\n} from '@sinclair/typebox'\n\nimport { type TypeCheck } from '@sinclair/typebox/compiler'\nimport { Value } from '@sinclair/typebox/value'\n\nimport type { CookieOptions } from './cookies'\nimport { ValidationError } from './error'\nimport type { MaybeArray } from './types'\n\ntry {\n\tTypeSystem.Format('email', (value) =>\n\t\t/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9]+(?:-[a-z0-9]+)*$/i.test(\n\t\t\tvalue\n\t\t)\n\t)\n\n\tTypeSystem.Format('uuid', (value) =>\n\t\t/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(\n\t\t\tvalue\n\t\t)\n\t)\n\n\tTypeSystem.Format(\n\t\t'date',\n\t\t(value) => !Number.isNaN(new Date(value).getTime())\n\t)\n\n\tTypeSystem.Format(\n\t\t'date-time',\n\t\t(value) => !Number.isNaN(new Date(value).getTime())\n\t)\n} catch {\n\t// Not empty\n}\n\nconst t = Object.assign({}, Type)\n\nexport namespace ElysiaTypeOptions {\n\texport type Numeric = NumberOptions\n\n\texport type FileUnit = number | `${number}${'k' | 'm'}`\n\n\texport interface File extends SchemaOptions {\n\t\ttype?: MaybeArray<\n\t\t\t| (string & {})\n\t\t\t| 'image'\n\t\t\t| 'image/jpeg'\n\t\t\t| 'image/png'\n\t\t\t| 'image/gif'\n\t\t\t| 'image/tiff'\n\t\t\t| 'image/x-icon'\n\t\t\t| 'image/svg'\n\t\t\t| 'image/webp'\n\t\t\t| 'image/avif'\n\t\t\t| 'audio'\n\t\t\t| 'audio/mpeg'\n\t\t\t| 'audio/x-ms-wma'\n\t\t\t| 'audio/vnd.rn-realaudio'\n\t\t\t| 'audio/x-wav'\n\t\t\t| 'video'\n\t\t\t| 'video/mpeg'\n\t\t\t| 'video/mp4'\n\t\t\t| 'video/quicktime'\n\t\t\t| 'video/x-ms-wmv'\n\t\t\t| 'video/x-msvideo'\n\t\t\t| 'video/x-flv'\n\t\t\t| 'video/webm'\n\t\t\t| 'text'\n\t\t\t| 'text/css'\n\t\t\t| 'text/csv'\n\t\t\t| 'text/html'\n\t\t\t| 'text/javascript'\n\t\t\t| 'text/plain'\n\t\t\t| 'text/xml'\n\t\t\t| 'application'\n\t\t\t| 'application/ogg'\n\t\t\t| 'application/pdf'\n\t\t\t| 'application/xhtml'\n\t\t\t| 'application/html'\n\t\t\t| 'application/json'\n\t\t\t| 'application/ld+json'\n\t\t\t| 'application/xml'\n\t\t\t| 'application/zip'\n\t\t\t| 'font'\n\t\t\t| 'font/woff2'\n\t\t\t| 'font/woff'\n\t\t\t| 'font/ttf'\n\t\t\t| 'font/otf'\n\t\t>\n\t\tminSize?: FileUnit\n\t\tmaxSize?: FileUnit\n\t}\n\n\texport interface Files extends File {\n\t\tminItems?: number\n\t\tmaxItems?: number\n\t}\n}\n\nconst parseFileUnit = (size: ElysiaTypeOptions.FileUnit) => {\n\tif (typeof size === 'string')\n\t\tswitch (size.slice(-1)) {\n\t\t\tcase 'k':\n\t\t\t\treturn +size.slice(0, size.length - 1) * 1024\n\n\t\t\tcase 'm':\n\t\t\t\treturn +size.slice(0, size.length - 1) * 1048576\n\n\t\t\tdefault:\n\t\t\t\treturn +size\n\t\t}\n\n\treturn size\n}\n\nconst validateFile = (options: ElysiaTypeOptions.File, value: any) => {\n\tif (!(value instanceof Blob)) return false\n\n\tif (options.minSize && value.size < parseFileUnit(options.minSize))\n\t\treturn false\n\n\tif (options.maxSize && value.size > parseFileUnit(options.maxSize))\n\t\treturn false\n\n\tif (options.extension)\n\t\tif (typeof options.extension === 'string') {\n\t\t\tif (!value.type.startsWith(options.extension)) return false\n\t\t} else {\n\t\t\tfor (let i = 0; i < options.extension.length; i++)\n\t\t\t\tif (value.type.startsWith(options.extension[i])) return true\n\n\t\t\treturn false\n\t\t}\n\n\treturn true\n}\n\nconst Files = TypeSystem.Type<File[], ElysiaTypeOptions.Files>(\n\t'Files',\n\t(options, value) => {\n\t\tif (!Array.isArray(value)) return validateFile(options, value)\n\n\t\tif (options.minItems && value.length < options.minItems) return false\n\n\t\tif (options.maxItems && value.length > options.maxItems) return false\n\n\t\tfor (let i = 0; i < value.length; i++)\n\t\t\tif (!validateFile(options, value[i])) return false\n\n\t\treturn true\n\t}\n)\n\nif (!FormatRegistry.Get('numeric'))\n\tFormatRegistry.Set('numeric', (value) => !!value && !isNaN(+value))\n\nif (!FormatRegistry.Get('boolean'))\n\tFormatRegistry.Set(\n\t\t'boolean',\n\t\t(value) => value === 'true' || value === 'false'\n\t)\n\nif (!FormatRegistry.Get('ObjectString'))\n\tFormatRegistry.Set('ObjectString', (value) => {\n\t\tlet start = value.charCodeAt(0)\n\n\t\t// If starts with ' ', '\\t', '\\n', then trim first\n\t\tif (start === 9 || start === 10 || start === 32)\n\t\t\tstart = value.trimStart().charCodeAt(0)\n\n\t\tif (start !== 123 && start !== 91) return false\n\n\t\ttry {\n\t\t\tJSON.parse(value)\n\n\t\t\treturn true\n\t\t} catch {\n\t\t\treturn false\n\t\t}\n\t})\n\nexport const ElysiaType = {\n\tNumeric: (property?: NumberOptions) => {\n\t\tconst schema = Type.Number(property)\n\n\t\treturn t\n\t\t\t.Transform(\n\t\t\t\tt.Union(\n\t\t\t\t\t[\n\t\t\t\t\t\tt.String({\n\t\t\t\t\t\t\tformat: 'numeric',\n\t\t\t\t\t\t\tdefault: 0\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tt.Number(property)\n\t\t\t\t\t],\n\t\t\t\t\tproperty\n\t\t\t\t)\n\t\t\t)\n\t\t\t.Decode((value) => {\n\t\t\t\tconst number = +value\n\t\t\t\tif (isNaN(number)) return value\n\n\t\t\t\tif (property && !Value.Check(schema, number))\n\t\t\t\t\tthrow new ValidationError('property', schema, number)\n\n\t\t\t\treturn number\n\t\t\t})\n\t\t\t.Encode((value) => value) as any as TNumber\n\t},\n\tDate: (property?: DateOptions) => {\n\t\tconst schema = Type.Date(property)\n\n\t\treturn t\n\t\t\t.Transform(\n\t\t\t\tt.Union(\n\t\t\t\t\t[\n\t\t\t\t\t\tType.Date(property),\n\t\t\t\t\t\tt.String({\n\t\t\t\t\t\t\tformat: 'date',\n\t\t\t\t\t\t\tdefault: new Date().toISOString()\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tt.String({\n\t\t\t\t\t\t\tformat: 'date-time',\n\t\t\t\t\t\t\tdefault: new Date().toISOString()\n\t\t\t\t\t\t})\n\t\t\t\t\t],\n\t\t\t\t\tproperty\n\t\t\t\t)\n\t\t\t)\n\t\t\t.Decode((value) => {\n\t\t\t\tif (value instanceof Date) return value\n\n\t\t\t\tconst date = new Date(value)\n\n\t\t\t\tif (!Value.Check(schema, date))\n\t\t\t\t\tthrow new ValidationError('property', schema, date)\n\n\t\t\t\treturn date\n\t\t\t})\n\t\t\t.Encode((value) => {\n\t\t\t\tif (typeof value === 'string') return new Date(value)\n\n\t\t\t\treturn value\n\t\t\t}) as any as TDate\n\t},\n\tBooleanString: (property?: SchemaOptions) => {\n\t\tconst schema = Type.Boolean(property)\n\n\t\treturn t\n\t\t\t.Transform(\n\t\t\t\tt.Union(\n\t\t\t\t\t[\n\t\t\t\t\t\tt.String({\n\t\t\t\t\t\t\tformat: 'boolean',\n\t\t\t\t\t\t\tdefault: false\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tt.Boolean(property)\n\t\t\t\t\t],\n\t\t\t\t\tproperty\n\t\t\t\t)\n\t\t\t)\n\t\t\t.Decode((value) => {\n\t\t\t\tif (typeof value === 'string') return value === 'true'\n\n\t\t\t\tif (property && !Value.Check(schema, value))\n\t\t\t\t\tthrow new ValidationError('property', schema, value)\n\n\t\t\t\treturn value\n\t\t\t})\n\t\t\t.Encode((value) => value) as any as TBoolean\n\t},\n\tObjectString: <T extends TProperties = {}>(\n\t\tproperties: T = {} as T,\n\t\toptions?: ObjectOptions\n\t) => {\n\t\tconst schema = t.Object(properties, options)\n\t\tconst defaultValue = JSON.stringify(Value.Create(schema))\n\n\t\treturn t\n\t\t\t.Transform(\n\t\t\t\tt.Union([\n\t\t\t\t\tt.String({\n\t\t\t\t\t\tformat: 'ObjectString',\n\t\t\t\t\t\tdefault: defaultValue\n\t\t\t\t\t}),\n\t\t\t\t\tschema\n\t\t\t\t])\n\t\t\t)\n\t\t\t.Decode((value) => {\n\t\t\t\tif (typeof value === 'string') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvalue = JSON.parse(value as string)\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tthrow new ValidationError('property', schema, value)\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!Value.Check(schema, value))\n\t\t\t\t\t\tthrow new ValidationError('property', schema, value)\n\n\t\t\t\t\treturn value\n\t\t\t\t}\n\n\t\t\t\treturn value\n\t\t\t})\n\t\t\t.Encode((value) => {\n\t\t\t\tif (typeof value === 'string')\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvalue = JSON.parse(value as string)\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tthrow new ValidationError('property', schema, value)\n\t\t\t\t\t}\n\n\t\t\t\tif (!Value.Check(schema, value))\n\t\t\t\t\tthrow new ValidationError('property', schema, value)\n\n\t\t\t\treturn JSON.stringify(value)\n\t\t\t}) as any as TObject<T>\n\t},\n\tFile: TypeSystem.Type<File, ElysiaTypeOptions.File>('File', validateFile),\n\tFiles: (options: ElysiaTypeOptions.Files = {}) =>\n\t\tt\n\t\t\t.Transform(Files(options))\n\t\t\t.Decode((value) => {\n\t\t\t\tif (Array.isArray(value)) return value\n\t\t\t\treturn [value]\n\t\t\t})\n\t\t\t.Encode((value) => value),\n\tNullable: <T extends TSchema>(schema: T): TUnion<[T, TNull]> =>\n\t\tt.Union([t.Null(), schema]) as any,\n\t/**\n\t * Allow Optional, Nullable and Undefined\n\t */\n\tMaybeEmpty: <T extends TSchema>(schema: T): TUnion<[T, TUndefined]> =>\n\t\tt.Union([t.Null(), t.Undefined(), schema]) as any,\n\tCookie: <T extends TProperties>(\n\t\tproperties: T,\n\t\toptions?: ObjectOptions &\n\t\t\tCookieOptions & {\n\t\t\t\t/**\n\t\t\t\t * Secret key for signing cookie\n\t\t\t\t *\n\t\t\t\t * If array is passed, will use Key Rotation.\n\t\t\t\t *\n\t\t\t\t * Key rotation is when an encryption key is retired\n\t\t\t\t * and replaced by generating a new cryptographic key.\n\t\t\t\t */\n\t\t\t\tsecrets?: string | string[]\n\t\t\t\t/**\n\t\t\t\t * Specified cookie name to be signed globally\n\t\t\t\t */\n\t\t\t\tsign?: Readonly<(keyof T | (string & {}))[]>\n\t\t\t}\n\t): TObject<T> => t.Object(properties, options)\n} as const\n\nexport type TCookie = (typeof ElysiaType)['Cookie']\n\ndeclare module '@sinclair/typebox' {\n\tinterface JavaScriptTypeBuilder {\n\t\tBooleanString: typeof ElysiaType.BooleanString\n\t\tObjectString: typeof ElysiaType.ObjectString\n\t\t// @ts-ignore\n\t\tNumeric: typeof ElysiaType.Numeric\n\t\t// @ts-ignore\n\t\tFile: typeof ElysiaType.File\n\t\t// @ts-ignore\n\t\tFiles: typeof ElysiaType.Files\n\t\tNullable: typeof ElysiaType.Nullable\n\t\tMaybeEmpty: typeof ElysiaType.MaybeEmpty\n\t\tCookie: typeof ElysiaType.Cookie\n\t}\n\n\tinterface SchemaOptions {\n\t\terror?:\n\t\t\t| string\n\t\t\t| ((\n\t\t\t\t\ttype: string,\n\t\t\t\t\tvalidator: TypeCheck<any>,\n\t\t\t\t\tvalue: unknown\n\t\t\t  ) => string | void)\n\t}\n}\n\n/**\n * A Boolean string\n *\n * Will be parse to Boolean\n */\nt.BooleanString = ElysiaType.BooleanString\n\nt.ObjectString = ElysiaType.ObjectString\n\n/**\n * A Numeric string\n *\n * Will be parse to Number\n */\nt.Numeric = ElysiaType.Numeric\n\nt.File = (arg = {}) =>\n\tElysiaType.File({\n\t\tdefault: 'File',\n\t\t...arg,\n\t\textension: arg?.type,\n\t\ttype: 'string',\n\t\tformat: 'binary'\n\t})\n\nt.Files = (arg = {}) =>\n\tElysiaType.Files({\n\t\t...arg,\n\t\telysiaMeta: 'Files',\n\t\tdefault: 'Files',\n\t\textension: arg?.type,\n\t\ttype: 'array',\n\t\titems: {\n\t\t\t...arg,\n\t\t\tdefault: 'Files',\n\t\t\ttype: 'string',\n\t\t\tformat: 'binary'\n\t\t}\n\t})\n\nt.Nullable = (schema) => ElysiaType.Nullable(schema)\nt.MaybeEmpty = ElysiaType.MaybeEmpty\n\nt.Cookie = ElysiaType.Cookie\nt.Date = ElysiaType.Date\n\nexport { t }\n\nexport {\n\tTypeSystemPolicy,\n\tTypeSystem,\n\tTypeSystemDuplicateFormat,\n\tTypeSystemDuplicateTypeKind\n} from '@sinclair/typebox/system'\nexport { TypeCompiler, TypeCheck } from '@sinclair/typebox/compiler'\n\n// type Template =\n// \t| string\n// \t| number\n// \t| bigint\n// \t| boolean\n// \t| StringConstructor\n// \t| NumberConstructor\n// \t| undefined\n\n// type Join<A> = A extends Readonly<[infer First, ...infer Rest]>\n// \t? (\n// \t\t\tFirst extends Readonly<Template[]>\n// \t\t\t\t? First[number]\n// \t\t\t\t: First extends StringConstructor\n// \t\t\t\t? string\n// \t\t\t\t: First extends NumberConstructor\n// \t\t\t\t? `${number}`\n// \t\t\t\t: First\n// \t  ) extends infer A\n// \t\t? Rest extends []\n// \t\t\t? A extends undefined\n// \t\t\t\t? NonNullable<A> | ''\n// \t\t\t\t: A\n// \t\t\t: // @ts-ignore\n// \t\t\tA extends undefined\n// \t\t\t? `${NonNullable<A>}${Join<Rest>}` | ''\n// \t\t\t: // @ts-ignore\n// \t\t\t  `${A}${Join<Rest>}`\n// \t\t: ''\n// \t: ''\n\n// const template = <\n// \tconst T extends Readonly<(Template | Readonly<Template[]>)[]>\n// >(\n// \t...p: T\n// ): Join<T> => {\n// \treturn a as any\n// }\n\n// const create =\n// \t<const T extends string>(t: T): ((t: T) => void) =>\n// \t(t) =>\n// \t\tt\n\n// const optional = <\n// \tconst T extends Readonly<(Template | Readonly<Template[]>)[]>\n// >(\n// \t...p: T\n// ): T | undefined => {\n// \treturn undefined\n// }\n\n// template.optional = optional\n\n// const hi = create(\n// \ttemplate(\n// \t\t['seminar', 'millennium'],\n// \t\t':',\n// \t\t['Rio', 'Yuuka', 'Noa', 'Koyuki'],\n// \t\ttemplate.optional(template(',', ['Rio', 'Yuuka', 'Noa', 'Koyuki'])),\n// \t\ttemplate.optional(template(',', ['Rio', 'Yuuka', 'Noa', 'Koyuki'])),\n// \t\ttemplate.optional(template(',', ['Rio', 'Yuuka', 'Noa', 'Koyuki']))\n// \t)\n// )\n\n// hi(`seminar:Noa,Koyuki,Yuuka`)\n\n// const a = TypeCompiler.Compile(t.String())\n\n// console.log(v.Decode.toString())\n\n// const T = t.Transform(v.schema)\n// \t.Decode((value) => new Date(value)) // required: number to Date\n// \t.Encode((value) => value.getTime()) // required: Date to number\n\n// const decoded = Value.Decode(T, 0) // const decoded = Date(1970-01-01T00:00:00.000Z)\n// const encoded = Value.Encode(T, decoded)\n",
  "import { DateOptions, NumberOptions, TDate } from '@sinclair/typebox'\nimport { TypeSystem } from '@sinclair/typebox/system'\nimport {\n\tType,\n\ttype SchemaOptions,\n\ttype TNull,\n\ttype TUnion,\n\ttype TSchema,\n\ttype TUndefined,\n\tTProperties,\n\tObjectOptions,\n\tTObject,\n\tTNumber,\n\tTBoolean,\n\tFormatRegistry\n} from '@sinclair/typebox'\n\nimport { type TypeCheck } from '@sinclair/typebox/compiler'\nimport { Value } from '@sinclair/typebox/value'\n\nimport type { CookieOptions } from './cookies'\nimport { ValidationError } from './error'\nimport type { MaybeArray } from './types'\n\ntry {\n\tTypeSystem.Format('email', (value) =>\n\t\t/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9]+(?:-[a-z0-9]+)*$/i.test(\n\t\t\tvalue\n\t\t)\n\t)\n\n\tTypeSystem.Format('uuid', (value) =>\n\t\t/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(\n\t\t\tvalue\n\t\t)\n\t)\n\n\tTypeSystem.Format(\n\t\t'date',\n\t\t(value) => !Number.isNaN(new Date(value).getTime())\n\t)\n\n\tTypeSystem.Format(\n\t\t'date-time',\n\t\t(value) => !Number.isNaN(new Date(value).getTime())\n\t)\n} catch {\n\t// Not empty\n}\n\nconst t = Object.assign({}, Type)\n\nexport namespace ElysiaTypeOptions {\n\texport type Numeric = NumberOptions\n\n\texport type FileUnit = number | `${number}${'k' | 'm'}`\n\n\texport interface File extends SchemaOptions {\n\t\ttype?: MaybeArray<\n\t\t\t| (string & {})\n\t\t\t| 'image'\n\t\t\t| 'image/jpeg'\n\t\t\t| 'image/png'\n\t\t\t| 'image/gif'\n\t\t\t| 'image/tiff'\n\t\t\t| 'image/x-icon'\n\t\t\t| 'image/svg'\n\t\t\t| 'image/webp'\n\t\t\t| 'image/avif'\n\t\t\t| 'audio'\n\t\t\t| 'audio/mpeg'\n\t\t\t| 'audio/x-ms-wma'\n\t\t\t| 'audio/vnd.rn-realaudio'\n\t\t\t| 'audio/x-wav'\n\t\t\t| 'video'\n\t\t\t| 'video/mpeg'\n\t\t\t| 'video/mp4'\n\t\t\t| 'video/quicktime'\n\t\t\t| 'video/x-ms-wmv'\n\t\t\t| 'video/x-msvideo'\n\t\t\t| 'video/x-flv'\n\t\t\t| 'video/webm'\n\t\t\t| 'text'\n\t\t\t| 'text/css'\n\t\t\t| 'text/csv'\n\t\t\t| 'text/html'\n\t\t\t| 'text/javascript'\n\t\t\t| 'text/plain'\n\t\t\t| 'text/xml'\n\t\t\t| 'application'\n\t\t\t| 'application/ogg'\n\t\t\t| 'application/pdf'\n\t\t\t| 'application/xhtml'\n\t\t\t| 'application/html'\n\t\t\t| 'application/json'\n\t\t\t| 'application/ld+json'\n\t\t\t| 'application/xml'\n\t\t\t| 'application/zip'\n\t\t\t| 'font'\n\t\t\t| 'font/woff2'\n\t\t\t| 'font/woff'\n\t\t\t| 'font/ttf'\n\t\t\t| 'font/otf'\n\t\t>\n\t\tminSize?: FileUnit\n\t\tmaxSize?: FileUnit\n\t}\n\n\texport interface Files extends File {\n\t\tminItems?: number\n\t\tmaxItems?: number\n\t}\n}\n\nconst parseFileUnit = (size: ElysiaTypeOptions.FileUnit) => {\n\tif (typeof size === 'string')\n\t\tswitch (size.slice(-1)) {\n\t\t\tcase 'k':\n\t\t\t\treturn +size.slice(0, size.length - 1) * 1024\n\n\t\t\tcase 'm':\n\t\t\t\treturn +size.slice(0, size.length - 1) * 1048576\n\n\t\t\tdefault:\n\t\t\t\treturn +size\n\t\t}\n\n\treturn size\n}\n\nconst validateFile = (options: ElysiaTypeOptions.File, value: any) => {\n\tif (!(value instanceof Blob)) return false\n\n\tif (options.minSize && value.size < parseFileUnit(options.minSize))\n\t\treturn false\n\n\tif (options.maxSize && value.size > parseFileUnit(options.maxSize))\n\t\treturn false\n\n\tif (options.extension)\n\t\tif (typeof options.extension === 'string') {\n\t\t\tif (!value.type.startsWith(options.extension)) return false\n\t\t} else {\n\t\t\tfor (let i = 0; i < options.extension.length; i++)\n\t\t\t\tif (value.type.startsWith(options.extension[i])) return true\n\n\t\t\treturn false\n\t\t}\n\n\treturn true\n}\n\nconst Files = TypeSystem.Type<File[], ElysiaTypeOptions.Files>(\n\t'Files',\n\t(options, value) => {\n\t\tif (!Array.isArray(value)) return validateFile(options, value)\n\n\t\tif (options.minItems && value.length < options.minItems) return false\n\n\t\tif (options.maxItems && value.length > options.maxItems) return false\n\n\t\tfor (let i = 0; i < value.length; i++)\n\t\t\tif (!validateFile(options, value[i])) return false\n\n\t\treturn true\n\t}\n)\n\nif (!FormatRegistry.Get('numeric'))\n\tFormatRegistry.Set('numeric', (value) => !!value && !isNaN(+value))\n\nif (!FormatRegistry.Get('boolean'))\n\tFormatRegistry.Set(\n\t\t'boolean',\n\t\t(value) => value === 'true' || value === 'false'\n\t)\n\nif (!FormatRegistry.Get('ObjectString'))\n\tFormatRegistry.Set('ObjectString', (value) => {\n\t\tlet start = value.charCodeAt(0)\n\n\t\t// If starts with ' ', '\\t', '\\n', then trim first\n\t\tif (start === 9 || start === 10 || start === 32)\n\t\t\tstart = value.trimStart().charCodeAt(0)\n\n\t\tif (start !== 123 && start !== 91) return false\n\n\t\ttry {\n\t\t\tJSON.parse(value)\n\n\t\t\treturn true\n\t\t} catch {\n\t\t\treturn false\n\t\t}\n\t})\n\nexport const ElysiaType = {\n\tNumeric: (property?: NumberOptions) => {\n\t\tconst schema = Type.Number(property)\n\n\t\treturn t\n\t\t\t.Transform(\n\t\t\t\tt.Union(\n\t\t\t\t\t[\n\t\t\t\t\t\tt.String({\n\t\t\t\t\t\t\tformat: 'numeric',\n\t\t\t\t\t\t\tdefault: 0\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tt.Number(property)\n\t\t\t\t\t],\n\t\t\t\t\tproperty\n\t\t\t\t)\n\t\t\t)\n\t\t\t.Decode((value) => {\n\t\t\t\tconst number = +value\n\t\t\t\tif (isNaN(number)) return value\n\n\t\t\t\tif (property && !Value.Check(schema, number))\n\t\t\t\t\tthrow new ValidationError('property', schema, number)\n\n\t\t\t\treturn number\n\t\t\t})\n\t\t\t.Encode((value) => value) as any as TNumber\n\t},\n\tDate: (property?: DateOptions) => {\n\t\tconst schema = Type.Date(property)\n\n\t\treturn t\n\t\t\t.Transform(\n\t\t\t\tt.Union(\n\t\t\t\t\t[\n\t\t\t\t\t\tType.Date(property),\n\t\t\t\t\t\tt.String({\n\t\t\t\t\t\t\tformat: 'date',\n\t\t\t\t\t\t\tdefault: new Date().toISOString()\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tt.String({\n\t\t\t\t\t\t\tformat: 'date-time',\n\t\t\t\t\t\t\tdefault: new Date().toISOString()\n\t\t\t\t\t\t})\n\t\t\t\t\t],\n\t\t\t\t\tproperty\n\t\t\t\t)\n\t\t\t)\n\t\t\t.Decode((value) => {\n\t\t\t\tif (value instanceof Date) return value\n\n\t\t\t\tconst date = new Date(value)\n\n\t\t\t\tif (!Value.Check(schema, date))\n\t\t\t\t\tthrow new ValidationError('property', schema, date)\n\n\t\t\t\treturn date\n\t\t\t})\n\t\t\t.Encode((value) => {\n\t\t\t\tif (typeof value === 'string') return new Date(value)\n\n\t\t\t\treturn value\n\t\t\t}) as any as TDate\n\t},\n\tBooleanString: (property?: SchemaOptions) => {\n\t\tconst schema = Type.Boolean(property)\n\n\t\treturn t\n\t\t\t.Transform(\n\t\t\t\tt.Union(\n\t\t\t\t\t[\n\t\t\t\t\t\tt.String({\n\t\t\t\t\t\t\tformat: 'boolean',\n\t\t\t\t\t\t\tdefault: false\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tt.Boolean(property)\n\t\t\t\t\t],\n\t\t\t\t\tproperty\n\t\t\t\t)\n\t\t\t)\n\t\t\t.Decode((value) => {\n\t\t\t\tif (typeof value === 'string') return value === 'true'\n\n\t\t\t\tif (property && !Value.Check(schema, value))\n\t\t\t\t\tthrow new ValidationError('property', schema, value)\n\n\t\t\t\treturn value\n\t\t\t})\n\t\t\t.Encode((value) => value) as any as TBoolean\n\t},\n\tObjectString: <T extends TProperties = {}>(\n\t\tproperties: T = {} as T,\n\t\toptions?: ObjectOptions\n\t) => {\n\t\tconst schema = t.Object(properties, options)\n\t\tconst defaultValue = JSON.stringify(Value.Create(schema))\n\n\t\treturn t\n\t\t\t.Transform(\n\t\t\t\tt.Union([\n\t\t\t\t\tt.String({\n\t\t\t\t\t\tformat: 'ObjectString',\n\t\t\t\t\t\tdefault: defaultValue\n\t\t\t\t\t}),\n\t\t\t\t\tschema\n\t\t\t\t])\n\t\t\t)\n\t\t\t.Decode((value) => {\n\t\t\t\tif (typeof value === 'string') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvalue = JSON.parse(value as string)\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tthrow new ValidationError('property', schema, value)\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!Value.Check(schema, value))\n\t\t\t\t\t\tthrow new ValidationError('property', schema, value)\n\n\t\t\t\t\treturn value\n\t\t\t\t}\n\n\t\t\t\treturn value\n\t\t\t})\n\t\t\t.Encode((value) => {\n\t\t\t\tif (typeof value === 'string')\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvalue = JSON.parse(value as string)\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tthrow new ValidationError('property', schema, value)\n\t\t\t\t\t}\n\n\t\t\t\tif (!Value.Check(schema, value))\n\t\t\t\t\tthrow new ValidationError('property', schema, value)\n\n\t\t\t\treturn JSON.stringify(value)\n\t\t\t}) as any as TObject<T>\n\t},\n\tFile: TypeSystem.Type<File, ElysiaTypeOptions.File>('File', validateFile),\n\tFiles: (options: ElysiaTypeOptions.Files = {}) =>\n\t\tt\n\t\t\t.Transform(Files(options))\n\t\t\t.Decode((value) => {\n\t\t\t\tif (Array.isArray(value)) return value\n\t\t\t\treturn [value]\n\t\t\t})\n\t\t\t.Encode((value) => value),\n\tNullable: <T extends TSchema>(schema: T): TUnion<[T, TNull]> =>\n\t\tt.Union([t.Null(), schema]) as any,\n\t/**\n\t * Allow Optional, Nullable and Undefined\n\t */\n\tMaybeEmpty: <T extends TSchema>(schema: T): TUnion<[T, TUndefined]> =>\n\t\tt.Union([t.Null(), t.Undefined(), schema]) as any,\n\tCookie: <T extends TProperties>(\n\t\tproperties: T,\n\t\toptions?: ObjectOptions &\n\t\t\tCookieOptions & {\n\t\t\t\t/**\n\t\t\t\t * Secret key for signing cookie\n\t\t\t\t *\n\t\t\t\t * If array is passed, will use Key Rotation.\n\t\t\t\t *\n\t\t\t\t * Key rotation is when an encryption key is retired\n\t\t\t\t * and replaced by generating a new cryptographic key.\n\t\t\t\t */\n\t\t\t\tsecrets?: string | string[]\n\t\t\t\t/**\n\t\t\t\t * Specified cookie name to be signed globally\n\t\t\t\t */\n\t\t\t\tsign?: Readonly<(keyof T | (string & {}))[]>\n\t\t\t}\n\t): TObject<T> => t.Object(properties, options)\n} as const\n\nexport type TCookie = (typeof ElysiaType)['Cookie']\n\ndeclare module '@sinclair/typebox' {\n\tinterface JavaScriptTypeBuilder {\n\t\tBooleanString: typeof ElysiaType.BooleanString\n\t\tObjectString: typeof ElysiaType.ObjectString\n\t\t// @ts-ignore\n\t\tNumeric: typeof ElysiaType.Numeric\n\t\t// @ts-ignore\n\t\tFile: typeof ElysiaType.File\n\t\t// @ts-ignore\n\t\tFiles: typeof ElysiaType.Files\n\t\tNullable: typeof ElysiaType.Nullable\n\t\tMaybeEmpty: typeof ElysiaType.MaybeEmpty\n\t\tCookie: typeof ElysiaType.Cookie\n\t}\n\n\tinterface SchemaOptions {\n\t\terror?:\n\t\t\t| string\n\t\t\t| ((\n\t\t\t\t\ttype: string,\n\t\t\t\t\tvalidator: TypeCheck<any>,\n\t\t\t\t\tvalue: unknown\n\t\t\t  ) => string | void)\n\t}\n}\n\n/**\n * A Boolean string\n *\n * Will be parse to Boolean\n */\nt.BooleanString = ElysiaType.BooleanString\n\nt.ObjectString = ElysiaType.ObjectString\n\n/**\n * A Numeric string\n *\n * Will be parse to Number\n */\nt.Numeric = ElysiaType.Numeric\n\nt.File = (arg = {}) =>\n\tElysiaType.File({\n\t\tdefault: 'File',\n\t\t...arg,\n\t\textension: arg?.type,\n\t\ttype: 'string',\n\t\tformat: 'binary'\n\t})\n\nt.Files = (arg = {}) =>\n\tElysiaType.Files({\n\t\t...arg,\n\t\telysiaMeta: 'Files',\n\t\tdefault: 'Files',\n\t\textension: arg?.type,\n\t\ttype: 'array',\n\t\titems: {\n\t\t\t...arg,\n\t\t\tdefault: 'Files',\n\t\t\ttype: 'string',\n\t\t\tformat: 'binary'\n\t\t}\n\t})\n\nt.Nullable = (schema) => ElysiaType.Nullable(schema)\nt.MaybeEmpty = ElysiaType.MaybeEmpty\n\nt.Cookie = ElysiaType.Cookie\nt.Date = ElysiaType.Date\n\nexport { t }\n\nexport {\n\tTypeSystemPolicy,\n\tTypeSystem,\n\tTypeSystemDuplicateFormat,\n\tTypeSystemDuplicateTypeKind\n} from '@sinclair/typebox/system'\nexport { TypeCompiler, TypeCheck } from '@sinclair/typebox/compiler'\n\n// type Template =\n// \t| string\n// \t| number\n// \t| bigint\n// \t| boolean\n// \t| StringConstructor\n// \t| NumberConstructor\n// \t| undefined\n\n// type Join<A> = A extends Readonly<[infer First, ...infer Rest]>\n// \t? (\n// \t\t\tFirst extends Readonly<Template[]>\n// \t\t\t\t? First[number]\n// \t\t\t\t: First extends StringConstructor\n// \t\t\t\t? string\n// \t\t\t\t: First extends NumberConstructor\n// \t\t\t\t? `${number}`\n// \t\t\t\t: First\n// \t  ) extends infer A\n// \t\t? Rest extends []\n// \t\t\t? A extends undefined\n// \t\t\t\t? NonNullable<A> | ''\n// \t\t\t\t: A\n// \t\t\t: // @ts-ignore\n// \t\t\tA extends undefined\n// \t\t\t? `${NonNullable<A>}${Join<Rest>}` | ''\n// \t\t\t: // @ts-ignore\n// \t\t\t  `${A}${Join<Rest>}`\n// \t\t: ''\n// \t: ''\n\n// const template = <\n// \tconst T extends Readonly<(Template | Readonly<Template[]>)[]>\n// >(\n// \t...p: T\n// ): Join<T> => {\n// \treturn a as any\n// }\n\n// const create =\n// \t<const T extends string>(t: T): ((t: T) => void) =>\n// \t(t) =>\n// \t\tt\n\n// const optional = <\n// \tconst T extends Readonly<(Template | Readonly<Template[]>)[]>\n// >(\n// \t...p: T\n// ): T | undefined => {\n// \treturn undefined\n// }\n\n// template.optional = optional\n\n// const hi = create(\n// \ttemplate(\n// \t\t['seminar', 'millennium'],\n// \t\t':',\n// \t\t['Rio', 'Yuuka', 'Noa', 'Koyuki'],\n// \t\ttemplate.optional(template(',', ['Rio', 'Yuuka', 'Noa', 'Koyuki'])),\n// \t\ttemplate.optional(template(',', ['Rio', 'Yuuka', 'Noa', 'Koyuki'])),\n// \t\ttemplate.optional(template(',', ['Rio', 'Yuuka', 'Noa', 'Koyuki']))\n// \t)\n// )\n\n// hi(`seminar:Noa,Koyuki,Yuuka`)\n\n// const a = TypeCompiler.Compile(t.String())\n\n// console.log(v.Decode.toString())\n\n// const T = t.Transform(v.schema)\n// \t.Decode((value) => new Date(value)) // required: number to Date\n// \t.Encode((value) => value.getTime()) // required: Date to number\n\n// const decoded = Value.Decode(T, 0) // const decoded = Date(1970-01-01T00:00:00.000Z)\n// const encoded = Value.Encode(T, decoded)\n",
  "import type { Serve, Server, ServerWebSocket } from 'bun'\n\nimport { Memoirist } from 'memoirist'\nimport EventEmitter from 'eventemitter3'\nimport { type Static, type TSchema } from '@sinclair/typebox'\n\nimport { createTraceListener } from './trace'\nimport type { Context } from './context'\n\nimport { t, TypeCheck } from './type-system'\nimport { sucrose, sucroseTrace, type Sucrose } from './sucrose'\n\nimport { ElysiaWS, websocket } from './ws'\nimport type { WS } from './ws/types'\n\nimport { mergeDeep } from './utils'\nimport {\n\tcomposeHandler,\n\tcomposeGeneralHandler,\n\tcomposeErrorHandler,\n\tjitRoute\n} from './compose'\nimport {\n\tmergeHook,\n\tgetSchemaValidator,\n\tgetResponseSchemaValidator,\n\tchecksum,\n\tmergeLifeCycle,\n\tfilterGlobalHook,\n\tasHookType,\n\ttraceBackMacro,\n\treplaceUrlPath,\n\tisNumericString,\n\tcreateMacroManager,\n\tgetCookieValidator\n} from './utils'\n\nimport {\n\tcreateDynamicErrorHandler,\n\tcreateDynamicHandler,\n\ttype DynamicHandler\n} from './dynamic-handle'\n\nimport {\n\tERROR_CODE,\n\tisProduction,\n\tValidationError,\n\ttype ParseError,\n\ttype NotFoundError,\n\ttype InternalServerError\n} from './error'\n\nimport type {\n\tElysiaConfig,\n\tSingletonBase,\n\tDefinitionBase,\n\tHandler,\n\tComposedHandler,\n\tInputSchema,\n\tLocalHook,\n\tMergeSchema,\n\tRouteSchema,\n\tUnwrapRoute,\n\tInternalRoute,\n\tHTTPMethod,\n\tSchemaValidator,\n\tVoidHandler,\n\tPreHandler,\n\tBodyHandler,\n\tOptionalHandler,\n\tAfterHandler,\n\tErrorHandler,\n\tLifeCycleStore,\n\tMaybePromise,\n\tPrettify,\n\tPrettify2,\n\tListenCallback,\n\tAddPrefix,\n\tAddSuffix,\n\tAddPrefixCapitalize,\n\tAddSuffixCapitalize,\n\tTraceReporter,\n\tTraceHandler,\n\tMaybeArray,\n\tGracefulHandler,\n\tGetPathParameter,\n\tMapResponse,\n\tChecksum,\n\tMacroManager,\n\tBaseMacro,\n\tMacroToProperty,\n\tTransformHandler,\n\tMetadataBase,\n\tRouteBase,\n\tCreateEden,\n\tComposeElysiaResponse,\n\tInlineHandler,\n\tElysiaFn,\n\tLifeCycleType,\n\tPartial2,\n\tMacroQueue\n} from './types'\n\n/**\n * ### Elysia Server\n * Main instance to create web server using Elysia\n *\n * ---\n * @example\n * ```typescript\n * import { Elysia } from 'elysia'\n *\n * new Elysia()\n *     .get(\"/\", () => \"Hello\")\n *     .listen(8080)\n * ```\n */\nexport default class Elysia<\n\tconst in out BasePath extends string = '',\n\tconst in out Scoped extends boolean = false,\n\tconst in out Singleton extends SingletonBase = {\n\t\tdecorator: {}\n\t\tstore: {}\n\t\tderive: {}\n\t\tresolve: {}\n\t},\n\tconst in out Definitions extends DefinitionBase = {\n\t\ttype: {}\n\t\terror: {}\n\t},\n\tconst in out Metadata extends MetadataBase = {\n\t\tschema: {}\n\t\tmacro: {}\n\t},\n\tconst out Routes extends RouteBase = {},\n\tconst in out EphemeralSingleton extends SingletonBase = {\n\t\tdecorator: {}\n\t\tstore: {}\n\t\tderive: {}\n\t\tresolve: {}\n\t},\n\tconst in out EphemeralMetadata extends MetadataBase = {\n\t\tschema: {}\n\t\tmacro: {}\n\t}\n> {\n\tconfig: ElysiaConfig<BasePath, Scoped>\n\n\tserver: Server | null = null\n\tprivate dependencies: Record<string, Checksum[]> = {}\n\tprivate reporter: TraceReporter = new EventEmitter()\n\n\t_routes: Routes = {} as any\n\n\t_types = {\n\t\tPrefix: '' as BasePath,\n\t\tScoped: false as Scoped,\n\t\tSingleton: {} as Singleton,\n\t\tDefinitions: {} as Definitions,\n\t\tMetadata: {} as Metadata\n\t}\n\n\t_ephemeral = {\n\t\tSingleton: {} as EphemeralSingleton,\n\t\tMetadata: {} as EphemeralMetadata\n\t}\n\n\tprotected singleton = {\n\t\tdecorator: {},\n\t\tstore: {},\n\t\tderive: {},\n\t\tresolve: {}\n\t} as Singleton\n\n\tget store(): Singleton['store'] {\n\t\treturn this.singleton.store\n\t}\n\n\tget decorator(): Singleton['decorator'] {\n\t\treturn this.singleton.decorator\n\t}\n\n\tprotected definitions = {\n\t\ttype: {} as Record<string, TSchema>,\n\t\terror: {} as Record<string, Error>\n\t}\n\n\tprotected extender = {\n\t\tmacros: <MacroQueue>[]\n\t}\n\n\tprotected validator: SchemaValidator | null = null\n\n\tevent: LifeCycleStore = {\n\t\tstart: [],\n\t\trequest: [],\n\t\tparse: [],\n\t\ttransform: [],\n\t\tbeforeHandle: [],\n\t\tafterHandle: [],\n\t\tmapResponse: [],\n\t\tonResponse: [],\n\t\ttrace: [],\n\t\terror: [],\n\t\tstop: []\n\t}\n\n\ttelemetry = {\n\t\tstack: undefined as string | undefined\n\t}\n\n\trouter = {\n\t\thttp: new Memoirist<ComposedHandler>(),\n\t\tws: new Memoirist<ComposedHandler>(),\n\t\t// Use in non-AOT mode\n\t\tdynamic: new Memoirist<DynamicHandler>(),\n\t\tstatic: {\n\t\t\thttp: {\n\t\t\t\thandlers: [] as ComposedHandler[],\n\t\t\t\tvariables: '',\n\t\t\t\tmap: {} as Record<\n\t\t\t\t\tstring,\n\t\t\t\t\t{\n\t\t\t\t\t\tcode: string\n\t\t\t\t\t\tall?: string\n\t\t\t\t\t}\n\t\t\t\t>,\n\t\t\t\tall: ''\n\t\t\t},\n\t\t\t// Static WS Router is consists of pathname and websocket handler index to compose\n\t\t\tws: {} as Record<string, number>\n\t\t},\n\t\thistory: [] as InternalRoute[]\n\t}\n\n\tprotected inference = {\n\t\tevent: {\n\t\t\tbody: false,\n\t\t\tcookie: false,\n\t\t\theaders: false,\n\t\t\tqueries: [],\n\t\t\tquery: false,\n\t\t\tset: false,\n\t\t\tunknownQueries: false\n\t\t},\n\t\ttrace: {\n\t\t\trequest: false,\n\t\t\tparse: false,\n\t\t\ttransform: false,\n\t\t\thandle: false,\n\t\t\tbeforeHandle: false,\n\t\t\tafterHandle: false,\n\t\t\terror: false,\n\t\t\tcontext: false,\n\t\t\tstore: false,\n\t\t\tset: false\n\t\t}\n\t} as const satisfies {\n\t\tevent: Sucrose.Inference\n\t\ttrace: Sucrose.TraceInference\n\t}\n\n\tprivate lazyLoadModules: Promise<\n\t\tElysia<any, any, any, any, any, any, any, any>\n\t>[] = []\n\n\tconstructor(config?: ElysiaConfig<BasePath, Scoped>) {\n\t\tthis.config = {\n\t\t\tforceErrorEncapsulation: true,\n\t\t\tprefix: '',\n\t\t\taot: true,\n\t\t\tstrictPath: false,\n\t\t\tglobal: false,\n\t\t\tcookie: {},\n\t\t\tanalytic: false,\n\t\t\t...config,\n\t\t\texperimental: config?.experimental ?? { transpiler: false },\n\t\t\tseed: config?.seed === undefined ? '' : config?.seed\n\t\t} as any\n\n\t\tif (config?.analytic && (config?.name || config?.seed !== undefined))\n\t\t\tthis.telemetry.stack = new Error().stack\n\t}\n\n\tprivate getServer() {\n\t\treturn this.server\n\t}\n\n\tget routes(): InternalRoute[] {\n\t\treturn this.router.history\n\t}\n\n\tprotected routeTree = new Map<string, number>()\n\n\tprivate add(\n\t\tmethod: HTTPMethod,\n\t\tpath: string,\n\t\thandle: Handler<any, any, any> | any,\n\t\tlocalHook?: LocalHook<any, any, any, any, any, any>,\n\t\t{ allowMeta = false, skipPrefix = false } = {\n\t\t\tallowMeta: false as boolean | undefined,\n\t\t\tskipPrefix: false as boolean | undefined\n\t\t}\n\t) {\n\t\tif (path !== '' && path.charCodeAt(0) !== 47) path = '/' + path\n\n\t\tif (this.config.prefix && !skipPrefix && !this.config.scoped)\n\t\t\tpath = this.config.prefix + path\n\n\t\tif (localHook?.type)\n\t\t\tswitch (localHook.type) {\n\t\t\t\tcase 'text':\n\t\t\t\t\tlocalHook.type = 'text/plain'\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'json':\n\t\t\t\t\tlocalHook.type = 'application/json'\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'formdata':\n\t\t\t\t\tlocalHook.type = 'multipart/form-data'\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'urlencoded':\n\t\t\t\t\tlocalHook.type = 'application/x-www-form-urlencoded'\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'arrayBuffer':\n\t\t\t\t\tlocalHook.type = 'application/octet-stream'\n\t\t\t\t\tbreak\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak\n\t\t\t}\n\n\t\tconst models = this.definitions.type\n\n\t\tlet _body: TypeCheck<any> | undefined,\n\t\t\t_headers: TypeCheck<any> | undefined,\n\t\t\t_params: TypeCheck<any> | undefined,\n\t\t\t_query: TypeCheck<any> | undefined,\n\t\t\t_cookie: TypeCheck<any> | undefined,\n\t\t\t_response:\n\t\t\t\t| TypeCheck<any>\n\t\t\t\t| Record<string, TypeCheck<any>>\n\t\t\t\t| undefined\n\n\t\t// ? Clone is need because of JIT, so the context doesn't switch between instance\n\t\tconst dynamic = !this.config.aot\n\t\tconst cookieConfig = Object.assign({}, this.config.cookie)\n\n\t\tconst cloned = {\n\t\t\tbody: localHook?.body ?? (this.validator?.body as any),\n\t\t\theaders: localHook?.headers ?? (this.validator?.headers as any),\n\t\t\tparams: localHook?.params ?? (this.validator?.params as any),\n\t\t\tquery: localHook?.query ?? (this.validator?.query as any),\n\t\t\tcookie: localHook?.cookie ?? (this.validator?.cookie as any),\n\t\t\tresponse: localHook?.response ?? (this.validator?.response as any)\n\t\t}\n\n\t\tconst cookieValidator = () =>\n\t\t\tgetCookieValidator({\n\t\t\t\tvalidator: cloned.cookie,\n\t\t\t\tdefaultConfig: this.config.cookie,\n\t\t\t\tconfig: cookieConfig,\n\t\t\t\tdynamic,\n\t\t\t\tmodels\n\t\t\t})\n\n\t\tconst validator =\n\t\t\tthis.config.precompile === true ||\n\t\t\t(typeof this.config.precompile === 'object' &&\n\t\t\t\tthis.config.precompile.schema === true)\n\t\t\t\t? {\n\t\t\t\t\t\tbody: getSchemaValidator(cloned.body, {\n\t\t\t\t\t\t\tdynamic,\n\t\t\t\t\t\t\tmodels\n\t\t\t\t\t\t}),\n\t\t\t\t\t\theaders: getSchemaValidator(cloned.headers, {\n\t\t\t\t\t\t\tdynamic,\n\t\t\t\t\t\t\tmodels,\n\t\t\t\t\t\t\tadditionalProperties: true\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tparams: getSchemaValidator(cloned.params, {\n\t\t\t\t\t\t\tdynamic,\n\t\t\t\t\t\t\tmodels\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tquery: getSchemaValidator(cloned.query, {\n\t\t\t\t\t\t\tdynamic,\n\t\t\t\t\t\t\tmodels\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tcookie: cookieValidator(),\n\t\t\t\t\t\tresponse: getResponseSchemaValidator(cloned.response, {\n\t\t\t\t\t\t\tdynamic,\n\t\t\t\t\t\t\tmodels\n\t\t\t\t\t\t})\n\t\t\t\t  }\n\t\t\t\t: ({\n\t\t\t\t\t\tget body() {\n\t\t\t\t\t\t\tif (_body) return _body\n\n\t\t\t\t\t\t\treturn (_body = getSchemaValidator(cloned.body, {\n\t\t\t\t\t\t\t\tdynamic,\n\t\t\t\t\t\t\t\tmodels\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t},\n\t\t\t\t\t\tget headers() {\n\t\t\t\t\t\t\tif (_headers) return _headers\n\n\t\t\t\t\t\t\treturn getSchemaValidator(cloned.headers, {\n\t\t\t\t\t\t\t\tdynamic,\n\t\t\t\t\t\t\t\tmodels,\n\t\t\t\t\t\t\t\tadditionalProperties: true\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t},\n\t\t\t\t\t\tget params() {\n\t\t\t\t\t\t\tif (_params) return _params\n\n\t\t\t\t\t\t\treturn (_params = getSchemaValidator(\n\t\t\t\t\t\t\t\tcloned.params,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdynamic,\n\t\t\t\t\t\t\t\t\tmodels\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t},\n\t\t\t\t\t\tget query() {\n\t\t\t\t\t\t\tif (_query) return _query\n\n\t\t\t\t\t\t\treturn (_query = getSchemaValidator(cloned.query, {\n\t\t\t\t\t\t\t\tdynamic,\n\t\t\t\t\t\t\t\tmodels\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t},\n\t\t\t\t\t\tget cookie() {\n\t\t\t\t\t\t\tif (_cookie) return _cookie\n\n\t\t\t\t\t\t\treturn (_cookie = cookieValidator())\n\t\t\t\t\t\t},\n\t\t\t\t\t\tget response() {\n\t\t\t\t\t\t\tif (_response) return _response\n\n\t\t\t\t\t\t\treturn (_response = getResponseSchemaValidator(\n\t\t\t\t\t\t\t\tcloned.response,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdynamic,\n\t\t\t\t\t\t\t\t\tmodels\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t}\n\t\t\t\t  } as any)\n\n\t\tconst loosePath = path.endsWith('/')\n\t\t\t? path.slice(0, path.length - 1)\n\t\t\t: path + '/'\n\n\t\tif (this.extender.macros.length) {\n\t\t\tconst manage = createMacroManager({\n\t\t\t\tglobalHook: this.event,\n\t\t\t\tlocalHook\n\t\t\t})\n\n\t\t\tconst manager: MacroManager = {\n\t\t\t\tevents: {\n\t\t\t\t\tglobal: this.event,\n\t\t\t\t\tlocal: localHook\n\t\t\t\t},\n\t\t\t\tonParse: manage('parse'),\n\t\t\t\tonTransform: manage('transform'),\n\t\t\t\tonBeforeHandle: manage('beforeHandle'),\n\t\t\t\tonAfterHandle: manage('afterHandle'),\n\t\t\t\tonResponse: manage('onResponse'),\n\t\t\t\tonError: manage('error')\n\t\t\t}\n\n\t\t\tfor (const macro of this.extender.macros)\n\t\t\t\ttraceBackMacro(macro(manager), mergeHook(localHook) as any)\n\t\t}\n\n\t\tconst hooks = mergeHook(this.event, localHook)\n\n\t\tif (this.config.aot === false) {\n\t\t\tthis.router.dynamic.add(method, path, {\n\t\t\t\tvalidator,\n\t\t\t\thooks,\n\t\t\t\tcontent: localHook?.type as string,\n\t\t\t\thandle\n\t\t\t})\n\n\t\t\tif (this.config.strictPath === false) {\n\t\t\t\tthis.router.dynamic.add(method, loosePath, {\n\t\t\t\t\tvalidator,\n\t\t\t\t\thooks,\n\t\t\t\t\tcontent: localHook?.type as string,\n\t\t\t\t\thandle\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tthis.router.history.push({\n\t\t\t\tmethod,\n\t\t\t\tpath,\n\t\t\t\tcomposed: null,\n\t\t\t\thandler: handle,\n\t\t\t\thooks: hooks as any\n\t\t\t})\n\n\t\t\treturn\n\t\t}\n\n\t\tlet composed:\n\t\t\t| ((context: Context<any, any, any>) => MaybePromise<Response>)\n\t\t\t| undefined = undefined\n\n\t\tconst shouldPrecompile =\n\t\t\tthis.config.precompile === true ||\n\t\t\t(typeof this.config.precompile === 'object' &&\n\t\t\t\tthis.config.precompile.compose === true)\n\n\t\tconst mainHandler = shouldPrecompile\n\t\t\t? composeHandler({\n\t\t\t\t\tapp: this,\n\t\t\t\t\tpath,\n\t\t\t\t\tmethod,\n\t\t\t\t\tlocalHook: mergeHook(localHook),\n\t\t\t\t\thooks,\n\t\t\t\t\tvalidator,\n\t\t\t\t\thandler: handle,\n\t\t\t\t\tallowMeta,\n\t\t\t\t\tappInference: {\n\t\t\t\t\t\tevent: {\n\t\t\t\t\t\t\t...this.inference.event,\n\t\t\t\t\t\t\tqueries: [...this.inference.event.queries]\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrace: { ...this.inference.trace }\n\t\t\t\t\t}\n\t\t\t  })\n\t\t\t: (((context: Context) => {\n\t\t\t\t\tif (composed) return composed(context)\n\n\t\t\t\t\treturn (composed = composeHandler({\n\t\t\t\t\t\tapp: this,\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\tmethod,\n\t\t\t\t\t\tlocalHook: mergeHook(localHook),\n\t\t\t\t\t\thooks,\n\t\t\t\t\t\tvalidator,\n\t\t\t\t\t\thandler: handle,\n\t\t\t\t\t\tallowMeta,\n\t\t\t\t\t\tappInference: {\n\t\t\t\t\t\t\tevent: {\n\t\t\t\t\t\t\t\t...this.inference.event,\n\t\t\t\t\t\t\t\tqueries: [...this.inference.event.queries]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttrace: {\n\t\t\t\t\t\t\t\t...this.inference.trace\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}) as any)(context)\n\t\t\t  }) as ComposedHandler)\n\n\t\tif (!shouldPrecompile)\n\t\t\tmainHandler.compose = () => {\n\t\t\t\treturn (mainHandler.composed = composeHandler({\n\t\t\t\t\tapp: this,\n\t\t\t\t\tpath,\n\t\t\t\t\tmethod,\n\t\t\t\t\tlocalHook: mergeHook(localHook),\n\t\t\t\t\thooks,\n\t\t\t\t\tvalidator,\n\t\t\t\t\thandler: handle,\n\t\t\t\t\tallowMeta,\n\t\t\t\t\tappInference: Object.assign({}, this.inference)\n\t\t\t\t}) as any)\n\t\t\t}\n\n\t\tlet routeIndex = this.router.history.length\n\n\t\tif (this.routeTree.has(method + path)) {\n\t\t\trouteIndex = this.router.history.findIndex(\n\t\t\t\t(route) => route.path === path && route.method === method\n\t\t\t)\n\n\t\t\tif (routeIndex !== -1) {\n\t\t\t\t// remove route previously defined\n\t\t\t\tconst removed = this.router.history.splice(routeIndex, 1)[0]\n\n\t\t\t\tif (\n\t\t\t\t\tremoved &&\n\t\t\t\t\tthis.routeTree.has(removed?.method + removed?.path)\n\t\t\t\t)\n\t\t\t\t\tthis.routeTree.delete(removed.method + removed.path)\n\t\t\t}\n\t\t}\n\n\t\tthis.routeTree.set(method + path, routeIndex)\n\t\tthis.router.history.push({\n\t\t\tmethod,\n\t\t\tpath,\n\t\t\tcomposed: mainHandler,\n\t\t\thandler: handle,\n\t\t\thooks: hooks as any\n\t\t})\n\n\t\tconst staticRouter = this.router.static.http\n\n\t\tif (method === '$INTERNALWS') {\n\t\t\tconst loose = this.config.strictPath\n\t\t\t\t? undefined\n\t\t\t\t: path.endsWith('/')\n\t\t\t\t? path.slice(0, path.length - 1)\n\t\t\t\t: path + '/'\n\n\t\t\tif (path.indexOf(':') === -1 && path.indexOf('*') === -1) {\n\t\t\t\tconst index = staticRouter.handlers.length\n\t\t\t\tstaticRouter.handlers.push(mainHandler)\n\n\t\t\t\tstaticRouter.variables += `const st${index} = staticRouter.handlers[${index}]\\n`\n\n\t\t\t\tthis.router.static.ws[path] = index\n\t\t\t\tif (loose) this.router.static.ws[loose] = index\n\t\t\t} else {\n\t\t\t\tthis.router.ws.add('ws', path, mainHandler)\n\t\t\t\tif (loose) this.router.ws.add('ws', loose, mainHandler)\n\t\t\t}\n\n\t\t\treturn\n\t\t}\n\n\t\tif (path.indexOf(':') === -1 && path.indexOf('*') === -1) {\n\t\t\tconst index = staticRouter.handlers.length\n\t\t\tstaticRouter.handlers.push(mainHandler)\n\n\t\t\tstaticRouter.variables += shouldPrecompile\n\t\t\t\t? `const st${index} = staticRouter.handlers[${index}]\\n`\n\t\t\t\t: `let st${index} = staticRouter.handlers[${index}]\\nlet stc${index}\\n`\n\n\t\t\tif (!staticRouter.map[path])\n\t\t\t\tstaticRouter.map[path] = {\n\t\t\t\t\tcode: ''\n\t\t\t\t}\n\n\t\t\tif (method === 'ALL')\n\t\t\t\tstaticRouter.map[path].all = shouldPrecompile\n\t\t\t\t\t? `default: return st${index}(ctx)\\n`\n\t\t\t\t\t: `default: ${jitRoute(index)}\\n`\n\t\t\telse\n\t\t\t\tstaticRouter.map[path].code = shouldPrecompile\n\t\t\t\t\t? `case '${method}': return st${index}(ctx)\\n${staticRouter.map[path].code}`\n\t\t\t\t\t: `case '${method}': ${jitRoute(index)}\\n${\n\t\t\t\t\t\t\tstaticRouter.map[path].code\n\t\t\t\t\t  }`\n\n\t\t\tif (!this.config.strictPath) {\n\t\t\t\tif (!staticRouter.map[loosePath])\n\t\t\t\t\tstaticRouter.map[loosePath] = {\n\t\t\t\t\t\tcode: ''\n\t\t\t\t\t}\n\n\t\t\t\tif (method === 'ALL')\n\t\t\t\t\tstaticRouter.map[loosePath].all = shouldPrecompile\n\t\t\t\t\t\t? `default: return st${index}(ctx)\\n`\n\t\t\t\t\t\t: `default: ${jitRoute(index)}\\n`\n\t\t\t\telse\n\t\t\t\t\tstaticRouter.map[loosePath].code = shouldPrecompile\n\t\t\t\t\t\t? `case '${method}': return st${index}(ctx)\\n${staticRouter.map[loosePath].code}`\n\t\t\t\t\t\t: `case '${method}': ${jitRoute(index)}\\n${\n\t\t\t\t\t\t\t\tstaticRouter.map[loosePath].code\n\t\t\t\t\t\t  }`\n\t\t\t}\n\t\t} else {\n\t\t\tthis.router.http.add(method, path, mainHandler)\n\n\t\t\tif (!this.config.strictPath)\n\t\t\t\tthis.router.http.add(\n\t\t\t\t\tmethod,\n\t\t\t\t\tpath.endsWith('/')\n\t\t\t\t\t\t? path.slice(0, path.length - 1)\n\t\t\t\t\t\t: path + '/',\n\t\t\t\t\tmainHandler\n\t\t\t\t)\n\t\t}\n\t}\n\n\tprivate setHeaders?: Context['set']['headers']\n\theaders(header: Context['set']['headers'] | undefined) {\n\t\tif (!header) return this\n\n\t\tif (!this.setHeaders) this.setHeaders = {}\n\n\t\tthis.setHeaders = mergeDeep(this.setHeaders, header)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### start | Life cycle event\n\t * Called after server is ready for serving\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onStart(({ url, port }) => {\n\t *         console.log(\"Running at ${url}:${port}\")\n\t *     })\n\t *     .listen(8080)\n\t * ```\n\t */\n\tonStart(handler: MaybeArray<GracefulHandler<this>>) {\n\t\tthis.on('start', handler as any)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### request | Life cycle event\n\t * Called on every new request is accepted\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onRequest(({ method, url }) => {\n\t *         saveToAnalytic({ method, url })\n\t *     })\n\t * ```\n\t */\n\tonRequest<const Schema extends RouteSchema>(\n\t\thandler: MaybeArray<\n\t\t\tPreHandler<\n\t\t\t\tMergeSchema<\n\t\t\t\t\tSchema,\n\t\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t\t\t>,\n\t\t\t\tSingleton & EphemeralSingleton\n\t\t\t>\n\t\t>\n\t) {\n\t\tthis.on('request', handler)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### parse | Life cycle event\n\t * Callback function to handle body parsing\n\t *\n\t * If truthy value is returned, will be assigned to `context.body`\n\t * Otherwise will skip the callback and look for the next one.\n\t *\n\t * Equivalent to Express's body parser\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onParse((request, contentType) => {\n\t *         if(contentType === \"application/json\")\n\t *             return request.json()\n\t *     })\n\t * ```\n\t */\n\tonParse(\n\t\tparser: MaybeArray<\n\t\t\tBodyHandler<\n\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema'],\n\t\t\t\tSingleton\n\t\t\t>\n\t\t>\n\t): this\n\n\t/**\n\t * ### parse | Life cycle event\n\t * Callback function to handle body parsing\n\t *\n\t * If truthy value is returned, will be assigned to `context.body`\n\t * Otherwise will skip the callback and look for the next one.\n\t *\n\t * Equivalent to Express's body parser\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onParse((request, contentType) => {\n\t *         if(contentType === \"application/json\")\n\t *             return request.json()\n\t *     })\n\t * ```\n\t */\n\tonParse(\n\t\toptions: { as?: LifeCycleType },\n\t\tparser: MaybeArray<\n\t\t\tBodyHandler<\n\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema'],\n\t\t\t\tSingleton & EphemeralSingleton\n\t\t\t>\n\t\t>\n\t): this\n\n\tonParse(\n\t\toptions: { as?: LifeCycleType } | MaybeArray<Function>,\n\t\thandler?: MaybeArray<Function>\n\t) {\n\t\tif (!handler) return this.on('parse', options as any)\n\n\t\treturn this.on(\n\t\t\toptions as { as?: LifeCycleType },\n\t\t\t'parse',\n\t\t\thandler as any\n\t\t)\n\t}\n\n\t/**\n\t * ### transform | Life cycle event\n\t * Assign or transform anything related to context before validation.\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onTransform(({ params }) => {\n\t *         if(params.id)\n\t *             params.id = +params.id\n\t *     })\n\t * ```\n\t */\n\tonTransform<const Schema extends RouteSchema>(\n\t\thandler: MaybeArray<\n\t\t\tTransformHandler<\n\t\t\t\tMergeSchema<\n\t\t\t\t\tSchema,\n\t\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t\t\t>,\n\t\t\t\tSingleton & EphemeralSingleton\n\t\t\t>\n\t\t>\n\t): this\n\n\t/**\n\t * ### transform | Life cycle event\n\t * Assign or transform anything related to context before validation.\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onTransform(({ params }) => {\n\t *         if(params.id)\n\t *             params.id = +params.id\n\t *     })\n\t * ```\n\t */\n\tonTransform<const Schema extends RouteSchema>(\n\t\toptions: { as?: LifeCycleType },\n\t\thandler: MaybeArray<\n\t\t\tTransformHandler<\n\t\t\t\tMergeSchema<\n\t\t\t\t\tSchema,\n\t\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t\t\t>,\n\t\t\t\tSingleton & EphemeralSingleton\n\t\t\t>\n\t\t>\n\t): this\n\n\tonTransform(\n\t\toptions: { as?: LifeCycleType } | MaybeArray<Function>,\n\t\thandler?: MaybeArray<Function>\n\t) {\n\t\tif (!handler) return this.on('transform', options as any)\n\n\t\treturn this.on(\n\t\t\toptions as { as?: LifeCycleType },\n\t\t\t'transform',\n\t\t\thandler as any\n\t\t)\n\t}\n\n\t/**\n\t * Derive new property for each request with access to `Context`.\n\t *\n\t * If error is thrown, the scope will skip to handling error instead.\n\t *\n\t * ---\n\t * @example\n\t * new Elysia()\n\t *     .state('counter', 1)\n\t *     .derive(({ store }) => ({\n\t *         increase() {\n\t *             store.counter++\n\t *         }\n\t *     }))\n\t */\n\tresolve<\n\t\tconst Resolver extends Record<string, unknown>,\n\t\tconst Type extends Exclude<LifeCycleType, 'scoped'>\n\t>(\n\t\toptions: { as?: Type },\n\t\tresolver: (\n\t\t\tcontext: Prettify<\n\t\t\t\tContext<\n\t\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema'],\n\t\t\t\t\tSingleton & EphemeralSingleton\n\t\t\t\t>\n\t\t\t>\n\t\t) => MaybePromise<Resolver>\n\t): Type extends 'global'\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\t{\n\t\t\t\t\tdecorator: Singleton['decorator']\n\t\t\t\t\tstore: Singleton['store']\n\t\t\t\t\tderive: Singleton['resolve']\n\t\t\t\t\tresolve: Prettify<Singleton['resolve'] & Awaited<Resolver>>\n\t\t\t\t},\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\tEphemeralSingleton,\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\t\t: Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\t{\n\t\t\t\t\tdecorator: EphemeralSingleton['decorator']\n\t\t\t\t\tstore: EphemeralSingleton['store']\n\t\t\t\t\tderive: EphemeralSingleton['resolve']\n\t\t\t\t\tresolve: Prettify<\n\t\t\t\t\t\tEphemeralSingleton['resolve'] & Awaited<Resolver>\n\t\t\t\t\t>\n\t\t\t\t},\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\n\t/**\n\t * Derive new property for each request with access to `Context`.\n\t *\n\t * If error is thrown, the scope will skip to handling error instead.\n\t *\n\t * ---\n\t * @example\n\t * new Elysia()\n\t *     .state('counter', 1)\n\t *     .derive(({ store }) => ({\n\t *         increase() {\n\t *             store.counter++\n\t *         }\n\t *     }))\n\t */\n\tresolve<const Resolver extends Record<string, unknown>>(\n\t\tresolver: (\n\t\t\tcontext: Prettify<\n\t\t\t\tContext<\n\t\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema'],\n\t\t\t\t\tSingleton & EphemeralSingleton\n\t\t\t\t>\n\t\t\t>\n\t\t) => MaybePromise<Resolver>\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tRoutes,\n\t\t{\n\t\t\tdecorator: EphemeralSingleton['decorator']\n\t\t\tstore: EphemeralSingleton['store']\n\t\t\tderive: EphemeralSingleton['derive']\n\t\t\tresolve: Prettify<EphemeralSingleton['resolve'] & Awaited<Resolver>>\n\t\t},\n\t\tEphemeralMetadata\n\t>\n\n\tresolve(\n\t\toptionsOrResolve: { as?: LifeCycleType } | Function,\n\t\tresolve?: Function\n\t) {\n\t\tif (!resolve) {\n\t\t\tresolve = optionsOrResolve as any\n\t\t\toptionsOrResolve = { as: 'local' }\n\t\t}\n\n\t\t// @ts-ignore\n\t\tresolve.$elysia = 'resolve'\n\n\t\treturn this.onBeforeHandle(\n\t\t\toptionsOrResolve as any,\n\t\t\tresolve as any\n\t\t) as any\n\t}\n\n\tmapResolve<const NewResolver extends Record<string, unknown>>(\n\t\tmapper: (\n\t\t\tcontext: Context<\n\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema'],\n\t\t\t\tSingleton & EphemeralSingleton,\n\t\t\t\tBasePath\n\t\t\t>\n\t\t) => MaybePromise<NewResolver>\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tRoutes,\n\t\t{\n\t\t\tdecorator: EphemeralSingleton['decorator']\n\t\t\tstore: EphemeralSingleton['store']\n\t\t\tderive: EphemeralSingleton['derive']\n\t\t\tresolve: NewResolver\n\t\t},\n\t\tEphemeralMetadata\n\t>\n\n\tmapResolve<\n\t\tconst NewResolver extends Record<string, unknown>,\n\t\tconst Type extends Exclude<LifeCycleType, 'scoped'>\n\t>(\n\t\toptions: { as?: Type },\n\t\tmapper: (\n\t\t\tcontext: Context<\n\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema'],\n\t\t\t\tSingleton & EphemeralSingleton,\n\t\t\t\tBasePath\n\t\t\t>\n\t\t) => MaybePromise<NewResolver>\n\t): Type extends 'global'\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\t{\n\t\t\t\t\tdecorator: Singleton['decorator']\n\t\t\t\t\tstore: Singleton['store']\n\t\t\t\t\tderive: Singleton['derive']\n\t\t\t\t\tresolve: NewResolver\n\t\t\t\t},\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\tEphemeralSingleton,\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\t\t: Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\t{\n\t\t\t\t\tdecorator: EphemeralSingleton['decorator']\n\t\t\t\t\tstore: EphemeralSingleton['store']\n\t\t\t\t\tderive: EphemeralSingleton['derive']\n\t\t\t\t\tresolve: NewResolver\n\t\t\t\t},\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\n\tmapResolve(\n\t\toptionsOrResolve: Function | { as?: LifeCycleType },\n\t\tmapper?: Function\n\t) {\n\t\tif (!mapper) {\n\t\t\tmapper = optionsOrResolve as any\n\t\t\toptionsOrResolve = { as: 'local' }\n\t\t}\n\n\t\t// @ts-ignore\n\t\tmapper.$elysia = 'resolve'\n\n\t\treturn this.onBeforeHandle(\n\t\t\toptionsOrResolve as any,\n\t\t\tmapper as any\n\t\t) as any\n\t}\n\n\t/**\n\t * ### Before Handle | Life cycle event\n\t * Execute after validation and before the main route handler.\n\t *\n\t * If truthy value is returned, will be assigned as `Response` and skip the main handler\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onBeforeHandle(({ params: { id }, status }) => {\n\t *         if(id && !isExisted(id)) {\n\t * \t           status(401)\n\t *\n\t *             return \"Unauthorized\"\n\t * \t       }\n\t *     })\n\t * ```\n\t */\n\tonBeforeHandle<const Schema extends RouteSchema>(\n\t\thandler: MaybeArray<\n\t\t\tOptionalHandler<\n\t\t\t\tMergeSchema<\n\t\t\t\t\tSchema,\n\t\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t\t\t>,\n\t\t\t\tSingleton & EphemeralSingleton\n\t\t\t>\n\t\t>\n\t): this\n\n\t/**\n\t * ### Before Handle | Life cycle event\n\t * Execute after validation and before the main route handler.\n\t *\n\t * If truthy value is returned, will be assigned as `Response` and skip the main handler\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onBeforeHandle(({ params: { id }, status }) => {\n\t *         if(id && !isExisted(id)) {\n\t * \t           status(401)\n\t *\n\t *             return \"Unauthorized\"\n\t * \t       }\n\t *     })\n\t * ```\n\t */\n\tonBeforeHandle<\n\t\tconst Schema extends RouteSchema,\n\t\tconst Type extends LifeCycleType\n\t>(\n\t\toptions: { as?: Type },\n\t\thandler: MaybeArray<\n\t\t\tOptionalHandler<\n\t\t\t\tMergeSchema<\n\t\t\t\t\tSchema,\n\t\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t\t\t>,\n\t\t\t\tSingleton &\n\t\t\t\t\t('global' extends Type\n\t\t\t\t\t\t? Partial2<EphemeralSingleton>\n\t\t\t\t\t\t: EphemeralSingleton)\n\t\t\t>\n\t\t>\n\t): this\n\n\tonBeforeHandle(\n\t\toptions: { as?: LifeCycleType } | MaybeArray<Function>,\n\t\thandler?: MaybeArray<Function>\n\t) {\n\t\tif (!handler) return this.on('beforeHandle', options as any)\n\n\t\treturn this.on(\n\t\t\toptions as { as?: LifeCycleType },\n\t\t\t'beforeHandle',\n\t\t\thandler as any\n\t\t)\n\t}\n\n\t/**\n\t * ### After Handle | Life cycle event\n\t * Intercept request **after** main handler is called.\n\t *\n\t * If truthy value is returned, will be assigned as `Response`\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onAfterHandle((context, response) => {\n\t *         if(typeof response === \"object\")\n\t *             return JSON.stringify(response)\n\t *     })\n\t * ```\n\t */\n\tonAfterHandle<const Schema extends RouteSchema>(\n\t\thandler: MaybeArray<\n\t\t\tAfterHandler<\n\t\t\t\tMergeSchema<\n\t\t\t\t\tSchema,\n\t\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t\t\t>,\n\t\t\t\tSingleton & EphemeralSingleton\n\t\t\t>\n\t\t>\n\t): this\n\n\t/**\n\t * ### After Handle | Life cycle event\n\t * Intercept request **after** main handler is called.\n\t *\n\t * If truthy value is returned, will be assigned as `Response`\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onAfterHandle((context, response) => {\n\t *         if(typeof response === \"object\")\n\t *             return JSON.stringify(response)\n\t *     })\n\t * ```\n\t */\n\tonAfterHandle<const Schema extends RouteSchema>(\n\t\toptions: { as?: LifeCycleType },\n\t\thandler: MaybeArray<\n\t\t\tAfterHandler<\n\t\t\t\tMergeSchema<\n\t\t\t\t\tSchema,\n\t\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t\t\t>,\n\t\t\t\tSingleton & EphemeralSingleton\n\t\t\t>\n\t\t>\n\t): this\n\n\tonAfterHandle(\n\t\toptions: { as?: LifeCycleType } | MaybeArray<Function>,\n\t\thandler?: MaybeArray<Function>\n\t) {\n\t\tif (!handler) return this.on('afterHandle', options as any)\n\n\t\treturn this.on(\n\t\t\toptions as { as?: LifeCycleType },\n\t\t\t'afterHandle',\n\t\t\thandler as any\n\t\t)\n\t}\n\n\t/**\n\t * ### After Handle | Life cycle event\n\t * Intercept request **after** main handler is called.\n\t *\n\t * If truthy value is returned, will be assigned as `Response`\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .mapResponse((context, response) => {\n\t *         if(typeof response === \"object\")\n\t *             return JSON.stringify(response)\n\t *     })\n\t * ```\n\t */\n\tmapResponse<const Schema extends RouteSchema>(\n\t\thandler: MaybeArray<\n\t\t\tMapResponse<\n\t\t\t\tMergeSchema<\n\t\t\t\t\tSchema,\n\t\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t\t\t>,\n\t\t\t\tSingleton & EphemeralSingleton\n\t\t\t>\n\t\t>\n\t): this\n\n\t/**\n\t * ### After Handle | Life cycle event\n\t * Intercept request **after** main handler is called.\n\t *\n\t * If truthy value is returned, will be assigned as `Response`\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .mapResponse((context, response) => {\n\t *         if(typeof response === \"object\")\n\t *             return JSON.stringify(response)\n\t *     })\n\t * ```\n\t */\n\tmapResponse<const Schema extends RouteSchema>(\n\t\toptions: { as?: LifeCycleType },\n\t\thandler: MaybeArray<\n\t\t\tMapResponse<\n\t\t\t\tMergeSchema<\n\t\t\t\t\tSchema,\n\t\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t\t\t>,\n\t\t\t\tSingleton & EphemeralSingleton\n\t\t\t>\n\t\t>\n\t): this\n\n\tmapResponse(\n\t\toptions: { as?: LifeCycleType } | MaybeArray<Function>,\n\t\thandler?: MaybeArray<Function>\n\t) {\n\t\tif (!handler) return this.on('mapResponse', options as any)\n\n\t\treturn this.on(\n\t\t\toptions as { as?: LifeCycleType },\n\t\t\t'mapResponse',\n\t\t\thandler as any\n\t\t)\n\t}\n\n\t/**\n\t * ### response | Life cycle event\n\t * Called when handler is executed\n\t * Good for analytic metrics\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onError(({ code }) => {\n\t *         if(code === \"NOT_FOUND\")\n\t *             return \"Path not found :(\"\n\t *     })\n\t * ```\n\t */\n\n\tonResponse<const Schema extends RouteSchema>(\n\t\thandler: MaybeArray<\n\t\t\tVoidHandler<\n\t\t\t\tMergeSchema<\n\t\t\t\t\tSchema,\n\t\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t\t\t>,\n\t\t\t\tSingleton & EphemeralSingleton\n\t\t\t>\n\t\t>\n\t): this\n\n\t/**\n\t * ### response | Life cycle event\n\t * Called when handler is executed\n\t * Good for analytic metrics\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onError(({ code }) => {\n\t *         if(code === \"NOT_FOUND\")\n\t *             return \"Path not found :(\"\n\t *     })\n\t * ```\n\t */\n\n\tonResponse<const Schema extends RouteSchema>(\n\t\toptions: { as?: LifeCycleType },\n\t\thandler: MaybeArray<\n\t\t\tVoidHandler<\n\t\t\t\tMergeSchema<\n\t\t\t\t\tSchema,\n\t\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t\t\t>,\n\t\t\t\tSingleton & EphemeralSingleton\n\t\t\t>\n\t\t>\n\t): this\n\n\tonResponse(\n\t\toptions: { as?: LifeCycleType } | MaybeArray<Function>,\n\t\thandler?: MaybeArray<Function>\n\t) {\n\t\tif (!handler) return this.on('response', options as any)\n\n\t\treturn this.on(\n\t\t\toptions as { as?: LifeCycleType },\n\t\t\t'response',\n\t\t\thandler as any\n\t\t)\n\t}\n\n\t/**\n\t * ### After Handle | Life cycle event\n\t * Intercept request **after** main handler is called.\n\t *\n\t * If truthy value is returned, will be assigned as `Response`\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onAfterHandle((context, response) => {\n\t *         if(typeof response === \"object\")\n\t *             return JSON.stringify(response)\n\t *     })\n\t * ```\n\t */\n\ttrace<const Schema extends RouteSchema>(\n\t\thandler: MaybeArray<TraceHandler<Schema, Singleton>>\n\t): this\n\n\t/**\n\t * ### After Handle | Life cycle event\n\t * Intercept request **after** main handler is called.\n\t *\n\t * If truthy value is returned, will be assigned as `Response`\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onAfterHandle((context, response) => {\n\t *         if(typeof response === \"object\")\n\t *             return JSON.stringify(response)\n\t *     })\n\t * ```\n\t */\n\ttrace<const Schema extends RouteSchema>(\n\t\toptions: { as?: LifeCycleType },\n\t\thandler: MaybeArray<TraceHandler<Schema, Singleton>>\n\t): this\n\n\t/**\n\t * ### After Handle | Life cycle event\n\t * Intercept request **after** main handler is called.\n\t *\n\t * If truthy value is returned, will be assigned as `Response`\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onAfterHandle((context, response) => {\n\t *         if(typeof response === \"object\")\n\t *             return JSON.stringify(response)\n\t *     })\n\t * ```\n\t */\n\ttrace(\n\t\toptions: { as?: LifeCycleType } | MaybeArray<Function>,\n\t\thandler?: MaybeArray<Function>\n\t) {\n\t\tif (!handler) {\n\t\t\thandler = options as MaybeArray<Function>\n\t\t\toptions = { as: 'local' }\n\t\t}\n\n\t\tif (!Array.isArray(handler)) handler = [handler] as Function[]\n\n\t\tfor (const fn of handler)\n\t\t\tthis.reporter.on(\n\t\t\t\t'event',\n\t\t\t\tcreateTraceListener(\n\t\t\t\t\t() => this.reporter,\n\t\t\t\t\tthis.event.trace.length,\n\t\t\t\t\tfn as any\n\t\t\t\t)\n\t\t\t)\n\n\t\tthis.on(options as { as?: LifeCycleType }, 'trace', handler as any)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Register errors\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * class CustomError extends Error {\n\t *     constructor() {\n\t *         super()\n\t *     }\n\t * }\n\t *\n\t * new Elysia()\n\t *     .error('CUSTOM_ERROR', CustomError)\n\t * ```\n\t */\n\terror<\n\t\tconst Errors extends Record<\n\t\t\tstring,\n\t\t\t{\n\t\t\t\tprototype: Error\n\t\t\t}\n\t\t>\n\t>(\n\t\terrors: Errors\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\t{\n\t\t\ttype: Definitions['type']\n\t\t\terror: Definitions['error'] & {\n\t\t\t\t[K in keyof Errors]: Errors[K] extends {\n\t\t\t\t\tprototype: infer LiteralError extends Error\n\t\t\t\t}\n\t\t\t\t\t? LiteralError\n\t\t\t\t\t: Errors[K]\n\t\t\t}\n\t\t},\n\t\tMetadata,\n\t\tRoutes,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t>\n\n\t/**\n\t * Register errors\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * class CustomError extends Error {\n\t *     constructor() {\n\t *         super()\n\t *     }\n\t * }\n\t *\n\t * new Elysia()\n\t *     .error({\n\t *         CUSTOM_ERROR: CustomError\n\t *     })\n\t * ```\n\t */\n\terror<\n\t\tName extends string,\n\t\tconst CustomError extends {\n\t\t\tprototype: Error\n\t\t}\n\t>(\n\t\tname: Name,\n\t\terrors: CustomError\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\t{\n\t\t\ttype: Definitions['type']\n\t\t\terror: Definitions['error'] & {\n\t\t\t\t[name in Name]: CustomError extends {\n\t\t\t\t\tprototype: infer LiteralError extends Error\n\t\t\t\t}\n\t\t\t\t\t? LiteralError\n\t\t\t\t\t: CustomError\n\t\t\t}\n\t\t},\n\t\tMetadata,\n\t\tRoutes,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t>\n\n\t/**\n\t * Register errors\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * class CustomError extends Error {\n\t *     constructor() {\n\t *         super()\n\t *     }\n\t * }\n\t *\n\t * new Elysia()\n\t *     .error('CUSTOM_ERROR', CustomError)\n\t * ```\n\t */\n\terror<const NewErrors extends Record<string, Error>>(\n\t\tmapper: (decorators: Definitions['error']) => NewErrors\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\t{\n\t\t\ttype: Definitions['type']\n\t\t\terror: {\n\t\t\t\t[K in keyof NewErrors]: NewErrors[K] extends {\n\t\t\t\t\tprototype: infer LiteralError extends Error\n\t\t\t\t}\n\t\t\t\t\t? LiteralError\n\t\t\t\t\t: never\n\t\t\t}\n\t\t},\n\t\tMetadata,\n\t\tRoutes,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t>\n\n\terror(\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\tname:\n\t\t\t| string\n\t\t\t| Record<\n\t\t\t\t\tstring,\n\t\t\t\t\t{\n\t\t\t\t\t\tprototype: Error\n\t\t\t\t\t}\n\t\t\t  >\n\t\t\t| Function,\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\terror?: {\n\t\t\tprototype: Error\n\t\t}\n\t): Elysia<any, any, any, any, any, any, any, any> {\n\t\tswitch (typeof name) {\n\t\t\tcase 'string':\n\t\t\t\t// @ts-ignore\n\t\t\t\terror.prototype[ERROR_CODE] = name\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tthis.definitions.error[name] = error\n\n\t\t\t\treturn this\n\n\t\t\tcase 'function':\n\t\t\t\tthis.definitions.error = name(this.definitions.error)\n\n\t\t\t\treturn this as any\n\t\t}\n\n\t\tfor (const [code, error] of Object.entries(name)) {\n\t\t\t// @ts-ignore\n\t\t\terror.prototype[ERROR_CODE] = code as any\n\n\t\t\tthis.definitions.error[code] = error as any\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### Error | Life cycle event\n\t * Called when error is thrown during processing request\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onError(({ code }) => {\n\t *         if(code === \"NOT_FOUND\")\n\t *             return \"Path not found :(\"\n\t *     })\n\t * ```\n\t */\n\tonError<const Schema extends RouteSchema>(\n\t\thandler: ErrorHandler<\n\t\t\tDefinitions['error'],\n\t\t\tMergeSchema<\n\t\t\t\tSchema,\n\t\t\t\tMetadata['schema'] | EphemeralMetadata['schema']\n\t\t\t>,\n\t\t\tSingleton\n\t\t>\n\t): this\n\n\t/**\n\t * ### Error | Life cycle event\n\t * Called when error is thrown during processing request\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onError(({ code }) => {\n\t *         if(code === \"NOT_FOUND\")\n\t *             return \"Path not found :(\"\n\t *     })\n\t * ```\n\t */\n\tonError<const Schema extends RouteSchema>(\n\t\toptions: { as?: LifeCycleType },\n\t\thandler: ErrorHandler<\n\t\t\tDefinitions['error'],\n\t\t\tMergeSchema<\n\t\t\t\tSchema,\n\t\t\t\tMetadata['schema'] | EphemeralMetadata['schema']\n\t\t\t>,\n\t\t\tSingleton\n\t\t>\n\t): this\n\n\t/**\n\t * ### Error | Life cycle event\n\t * Called when error is thrown during processing request\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onError(({ code }) => {\n\t *         if(code === \"NOT_FOUND\")\n\t *             return \"Path not found :(\"\n\t *     })\n\t * ```\n\t */\n\tonError(\n\t\toptions: { as?: LifeCycleType } | MaybeArray<Function>,\n\t\thandler?: MaybeArray<Function>\n\t) {\n\t\tif (!handler) return this.on('error', options as any)\n\n\t\treturn this.on(\n\t\t\toptions as { as?: LifeCycleType },\n\t\t\t'error',\n\t\t\thandler as any\n\t\t)\n\t}\n\n\t/**\n\t * ### stop | Life cycle event\n\t * Called after server stop serving request\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onStop((app) => {\n\t *         cleanup()\n\t *     })\n\t * ```\n\t */\n\tonStop(handler: MaybeArray<GracefulHandler<this>>) {\n\t\tthis.on('stop', handler as any)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### on\n\t * Syntax sugar for attaching life cycle event by name\n\t *\n\t * Does the exact same thing as `.on[Event]()`\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .on('error', ({ code }) => {\n\t *         if(code === \"NOT_FOUND\")\n\t *             return \"Path not found :(\"\n\t *     })\n\t * ```\n\t */\n\ton<Event extends keyof LifeCycleStore>(\n\t\ttype: Exclude<Event, 'onResponse'> | 'response',\n\t\thandlers: MaybeArray<Extract<LifeCycleStore[Event], Function[]>[0]>\n\t): this\n\n\t/**\n\t * ### on\n\t * Syntax sugar for attaching life cycle event by name\n\t *\n\t * Does the exact same thing as `.on[Event]()`\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .on('error', ({ code }) => {\n\t *         if(code === \"NOT_FOUND\")\n\t *             return \"Path not found :(\"\n\t *     })\n\t * ```\n\t */\n\ton<const Event extends keyof LifeCycleStore>(\n\t\toptions: { as?: LifeCycleType },\n\t\ttype: Exclude<Event, 'onResponse'> | 'response',\n\t\thandlers: MaybeArray<Extract<LifeCycleStore[Event], Function[]>[0]>\n\t): this\n\n\ton(\n\t\toptionsOrType: { as?: LifeCycleType } | string,\n\t\ttypeOrHandlers: MaybeArray<ElysiaFn> | string,\n\t\thandlers?: MaybeArray<ElysiaFn>\n\t) {\n\t\tlet type: Exclude<keyof LifeCycleStore, 'onResponse'> | 'onResponse'\n\n\t\tswitch (typeof optionsOrType) {\n\t\t\tcase 'string':\n\t\t\t\ttype = optionsOrType as any\n\t\t\t\thandlers = typeOrHandlers as any\n\n\t\t\t\tbreak\n\n\t\t\tcase 'object':\n\t\t\t\ttype = typeOrHandlers as any\n\t\t\t\tbreak\n\t\t}\n\n\t\t// @ts-expect-error possible user error, leave it on\n\t\tif (type === 'response') type = 'onResponse'\n\n\t\tif (!Array.isArray(handlers)) handlers = [handlers!]\n\n\t\tfor (const handler of handlers)\n\t\t\thandler.$elysiaHookType =\n\t\t\t\ttypeof optionsOrType === 'string'\n\t\t\t\t\t? 'local'\n\t\t\t\t\t: optionsOrType?.as ?? 'local'\n\n\t\tif (type === 'trace')\n\t\t\tsucroseTrace(handlers as TraceHandler[], this.inference.trace)\n\t\telse\n\t\t\tsucrose(\n\t\t\t\t{\n\t\t\t\t\t[type]: handlers\n\t\t\t\t},\n\t\t\t\tthis.inference.event\n\t\t\t)\n\n\t\tfor (let handler of handlers) {\n\t\t\thandler = asHookType(handler, 'global', { skipIfHasType: true })\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 'start':\n\t\t\t\t\tthis.event.start.push(handler as any)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'request':\n\t\t\t\t\tthis.event.request.push(handler as any)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'parse':\n\t\t\t\t\tthis.event.parse.push(handler)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'transform':\n\t\t\t\t\tthis.event.transform.push(handler as any)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'beforeHandle':\n\t\t\t\t\tthis.event.beforeHandle.push(handler as any)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'afterHandle':\n\t\t\t\t\tthis.event.afterHandle.push(handler as any)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'mapResponse':\n\t\t\t\t\tthis.event.mapResponse.push(handler as any)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'onResponse':\n\t\t\t\t\tthis.event.onResponse.push(handler as any)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'trace':\n\t\t\t\t\tthis.event.trace.push(handler as any)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'error':\n\t\t\t\t\tthis.event.error.push(handler as any)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'stop':\n\t\t\t\t\tthis.event.stop.push(handler as any)\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\treturn this\n\t}\n\n\tgroup<\n\t\tconst Prefix extends string,\n\t\tconst NewElysia extends Elysia<any, any, any, any, any, any, any, any>\n\t>(\n\t\tprefix: Prefix,\n\t\trun: (\n\t\t\tgroup: Elysia<\n\t\t\t\t`${BasePath}${Prefix}`,\n\t\t\t\tScoped,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata\n\t\t\t>\n\t\t) => NewElysia\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tPrettify<Routes & NewElysia['_routes']>,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t>\n\n\tgroup<\n\t\tconst Prefix extends string,\n\t\tconst NewElysia extends Elysia<any, any, any, any, any, any, any, any>,\n\t\tconst Input extends InputSchema<\n\t\t\tExtract<keyof Definitions['type'], string>\n\t\t>,\n\t\tconst Schema extends MergeSchema<\n\t\t\tUnwrapRoute<Input, Definitions['type']>,\n\t\t\tMetadata['schema']\n\t\t>\n\t>(\n\t\tprefix: Prefix,\n\t\tschema: LocalHook<\n\t\t\tInput,\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\tDefinitions['error'],\n\t\t\tMetadata['macro'] & EphemeralMetadata['macro'],\n\t\t\t`${BasePath}${Prefix}`\n\t\t>,\n\t\trun: (\n\t\t\tgroup: Elysia<\n\t\t\t\t`${BasePath}${Prefix}`,\n\t\t\t\tfalse,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\t{\n\t\t\t\t\tschema: Schema\n\t\t\t\t\tmacro: Metadata['macro']\n\t\t\t\t},\n\t\t\t\t{},\n\t\t\t\tEphemeralSingleton,\n\t\t\t\tEphemeralMetadata\n\t\t\t>\n\t\t) => NewElysia\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tRoutes & NewElysia['_routes'],\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t>\n\n\t/**\n\t * ### group\n\t * Encapsulate and group path with prefix\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .group('/v1', app => app\n\t *         .get('/', () => 'Hi')\n\t *         .get('/name', () => 'Elysia')\n\t *     })\n\t * ```\n\t */\n\tgroup(\n\t\tprefix: string,\n\t\tschemaOrRun:\n\t\t\t| LocalHook<any, any, any, any, any, any>\n\t\t\t| ((\n\t\t\t\t\tgroup: Elysia<any, any, any, any, any, any, any, any>\n\t\t\t  ) => Elysia<any, any, any, any, any, any, any, any>),\n\t\trun?: (\n\t\t\tgroup: Elysia<any, any, any, any, any, any, any, any>\n\t\t) => Elysia<any, any, any, any, any, any, any, any>\n\t): Elysia<any, any, any, any, any, any, any, any> {\n\t\tconst instance = new Elysia({\n\t\t\t...(this.config || {}),\n\t\t\tprefix: ''\n\t\t})\n\n\t\tinstance.singleton = { ...this.singleton }\n\t\tinstance.definitions = { ...this.definitions }\n\t\tinstance.getServer = () => this.server\n\n\t\tconst isSchema = typeof schemaOrRun === 'object'\n\t\tconst sandbox = (isSchema ? run! : schemaOrRun)(instance)\n\t\tthis.singleton = mergeDeep(this.singleton, instance.singleton) as any\n\t\tthis.definitions = mergeDeep(this.definitions, instance.definitions)\n\n\t\tif (sandbox.event.request.length)\n\t\t\tthis.event.request = [\n\t\t\t\t...(this.event.request || []),\n\t\t\t\t...((sandbox.event.request || []) as any)\n\t\t\t]\n\n\t\tif (sandbox.event.onResponse.length)\n\t\t\tthis.event.onResponse = [\n\t\t\t\t...(this.event.onResponse || []),\n\t\t\t\t...((sandbox.event.onResponse || []) as any)\n\t\t\t]\n\n\t\tthis.model(sandbox.definitions.type)\n\n\t\tObject.values(instance.router.history).forEach(\n\t\t\t({ method, path, handler, hooks }) => {\n\t\t\t\tpath = (isSchema ? '' : this.config.prefix) + prefix + path\n\n\t\t\t\tif (isSchema) {\n\t\t\t\t\tconst hook = schemaOrRun\n\t\t\t\t\tconst localHook = hooks as LocalHook<\n\t\t\t\t\t\tany,\n\t\t\t\t\t\tany,\n\t\t\t\t\t\tany,\n\t\t\t\t\t\tany,\n\t\t\t\t\t\tany,\n\t\t\t\t\t\tany,\n\t\t\t\t\t\tany\n\t\t\t\t\t>\n\n\t\t\t\t\tthis.add(\n\t\t\t\t\t\tmethod,\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\thandler,\n\t\t\t\t\t\tmergeHook(hook, {\n\t\t\t\t\t\t\t...(localHook || {}),\n\t\t\t\t\t\t\terror: !localHook.error\n\t\t\t\t\t\t\t\t? sandbox.event.error\n\t\t\t\t\t\t\t\t: Array.isArray(localHook.error)\n\t\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\t\t...(localHook.error || {}),\n\t\t\t\t\t\t\t\t\t\t...(sandbox.event.error || {})\n\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t: [\n\t\t\t\t\t\t\t\t\t\tlocalHook.error,\n\t\t\t\t\t\t\t\t\t\t...(sandbox.event.error || {})\n\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\tthis.add(\n\t\t\t\t\t\tmethod,\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\thandler,\n\t\t\t\t\t\tmergeHook(\n\t\t\t\t\t\t\thooks as LocalHook<any, any, any, any, any, any>,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\terror: sandbox.event.error\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tskipPrefix: true\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t)\n\n\t\treturn this as any\n\t}\n\n\tguard<\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tExtract<keyof Definitions['type'], string>\n\t\t>,\n\t\tconst Schema extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tMetadata['schema']\n\t\t>\n\t>(\n\t\thook: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\tDefinitions['error'],\n\t\t\tMetadata['macro'] & EphemeralMetadata['macro'],\n\t\t\tBasePath\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tRoutes,\n\t\tEphemeralSingleton,\n\t\t{\n\t\t\tschema: MergeSchema<\n\t\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\t\tMetadata['schema'] & EphemeralMetadata['macro']\n\t\t\t>\n\t\t\tmacro: EphemeralMetadata['macro']\n\t\t}\n\t>\n\n\tguard<\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tExtract<keyof Definitions['type'], string>\n\t\t>,\n\t\tconst NewElysia extends Elysia<any, any, any, any, any, any, any, any>,\n\t\tconst Schema extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tMetadata['schema']\n\t\t>\n\t>(\n\t\trun: (\n\t\t\tgroup: Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\t{\n\t\t\t\t\tschema: Prettify<Schema>\n\t\t\t\t\tmacro: Metadata['macro']\n\t\t\t\t},\n\t\t\t\t{},\n\t\t\t\tEphemeralSingleton,\n\t\t\t\tEphemeralMetadata\n\t\t\t>\n\t\t) => NewElysia\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tPrettify<Routes & NewElysia['_routes']>,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t>\n\n\tguard<\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tExtract<keyof Definitions['type'], string>\n\t\t>,\n\t\tconst NewElysia extends Elysia<any, any, any, any, any, any, any, any>,\n\t\tconst Schema extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tMetadata['schema']\n\t\t>\n\t>(\n\t\tschema: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\tDefinitions['error'],\n\t\t\tMetadata['macro'] & EphemeralMetadata['macro'],\n\t\t\t''\n\t\t>,\n\t\trun: (\n\t\t\tgroup: Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\t{\n\t\t\t\t\tschema: Prettify<Schema>\n\t\t\t\t\tmacro: Metadata['macro']\n\t\t\t\t},\n\t\t\t\t{},\n\t\t\t\tEphemeralSingleton,\n\t\t\t\tEphemeralMetadata\n\t\t\t>\n\t\t) => NewElysia\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tPrettify<Routes & NewElysia['_routes']>,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t>\n\n\t/**\n\t * ### guard\n\t * Encapsulate and pass hook into all child handler\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .guard({\n\t *          schema: {\n\t *              body: t.Object({\n\t *                  username: t.String(),\n\t *                  password: t.String()\n\t *              })\n\t *          }\n\t *     }, app => app\n\t *         .get(\"/\", () => 'Hi')\n\t *         .get(\"/name\", () => 'Elysia')\n\t *     })\n\t * ```\n\t */\n\tguard(\n\t\thook:\n\t\t\t| LocalHook<any, any, any, any, any, any, any>\n\t\t\t| ((\n\t\t\t\t\tgroup: Elysia<any, any, any, any, any, any, any, any>\n\t\t\t  ) => Elysia<any, any, any, any, any, any, any, any>),\n\t\trun?: (\n\t\t\tgroup: Elysia<any, any, any, any, any, any, any, any>\n\t\t) => Elysia<any, any, any, any, any, any, any, any>\n\t): Elysia<any, any, any, any, any, any, any, any> {\n\t\tif (!run) {\n\t\t\tif (typeof hook === 'object') {\n\t\t\t\tthis.event = mergeLifeCycle(\n\t\t\t\t\tthis.event,\n\t\t\t\t\tmergeLifeCycle(hook, {})\n\t\t\t\t)\n\t\t\t\tthis.validator = {\n\t\t\t\t\tbody: hook.body ?? this.validator?.body,\n\t\t\t\t\theaders: hook.headers ?? this.validator?.headers,\n\t\t\t\t\tparams: hook.params ?? this.validator?.params,\n\t\t\t\t\tquery: hook.query ?? this.validator?.query,\n\t\t\t\t\tresponse: hook.response ?? this.validator?.response\n\t\t\t\t}\n\n\t\t\t\treturn this\n\t\t\t}\n\n\t\t\treturn this.guard({}, hook)\n\t\t}\n\n\t\tconst instance = new Elysia<any, any, any, any, any, any, any, any>({\n\t\t\t...this.config,\n\t\t\tprefix: ''\n\t\t})\n\t\tinstance.singleton = { ...this.singleton }\n\t\tinstance.definitions = { ...this.definitions }\n\n\t\tconst sandbox = run(instance)\n\t\tthis.singleton = mergeDeep(this.singleton, instance.singleton) as any\n\t\tthis.definitions = mergeDeep(this.definitions, instance.definitions)\n\n\t\t// ? Inject getServer for websocket and trace (important, do not remove)\n\t\tsandbox.getServer = () => this.server\n\n\t\tif (sandbox.event.request.length)\n\t\t\tthis.event.request = [\n\t\t\t\t...(this.event.request || []),\n\t\t\t\t...(sandbox.event.request || [])\n\t\t\t]\n\n\t\tif (sandbox.event.onResponse.length)\n\t\t\tthis.event.onResponse = [\n\t\t\t\t...(this.event.onResponse || []),\n\t\t\t\t...(sandbox.event.onResponse || [])\n\t\t\t]\n\n\t\tthis.model(sandbox.definitions.type)\n\n\t\tObject.values(instance.router.history).forEach(\n\t\t\t({ method, path, handler, hooks: localHook }) => {\n\t\t\t\tthis.add(\n\t\t\t\t\tmethod,\n\t\t\t\t\tpath,\n\t\t\t\t\thandler,\n\t\t\t\t\tmergeHook(hook as LocalHook<any, any, any, any, any>, {\n\t\t\t\t\t\t...((localHook || {}) as LocalHook<\n\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\tany\n\t\t\t\t\t\t>),\n\t\t\t\t\t\terror: !localHook.error\n\t\t\t\t\t\t\t? sandbox.event.error\n\t\t\t\t\t\t\t: Array.isArray(localHook.error)\n\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\t...(localHook.error || {}),\n\t\t\t\t\t\t\t\t\t...(sandbox.event.error || [])\n\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t: [localHook.error, ...(sandbox.event.error || [])]\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t}\n\t\t)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * Inline fn\n\t */\n\tuse<\n\t\tconst NewElysia extends Elysia<any, any, any, any, any, any, any, any>,\n\t\tconst Scoped extends boolean = false,\n\t\tconst Param extends Elysia<\n\t\t\tany,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany\n\t\t> = this\n\t>(\n\t\tplugin: MaybePromise<(app: Param) => MaybePromise<NewElysia>>,\n\t\toptions?: { scoped?: Scoped }\n\t): Scoped extends true\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes & NewElysia['_routes']\n\t\t  >\n\t\t: Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\t// @ts-expect-error - This is truly ideal\n\t\t\t\tPrettify2<Singleton & NewElysia['_types']['Singleton']>,\n\t\t\t\tPrettify2<Definitions & NewElysia['_types']['Definitions']>,\n\t\t\t\tPrettify2<Metadata & NewElysia['_types']['Metadata']>,\n\t\t\t\tRoutes & NewElysia['_routes']\n\t\t  >\n\n\t/**\n\t * Inline Fn with scoped\n\t **/\n\tuse<\n\t\tconst NewElysia extends Elysia<any, any, any, any, any, any, any, any>,\n\t\tconst Scoped extends boolean = false,\n\t\tconst Params extends Elysia<\n\t\t\tany,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany\n\t\t> = this\n\t>(\n\t\tplugin: MaybePromise<(app: Params) => MaybePromise<NewElysia>>,\n\t\toptions?: { scoped?: Scoped }\n\t): Scoped extends true\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes & NewElysia['_routes']\n\t\t  >\n\t\t: Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\t// @ts-expect-error - This is truly ideal\n\t\t\t\tPrettify2<Singleton & NewElysia['_types']['Singleton']>,\n\t\t\t\tPrettify2<Definitions & NewElysia['_types']['Definitions']>,\n\t\t\t\tPrettify2<Metadata & NewElysia['_types']['Metadata']>,\n\t\t\t\tRoutes & NewElysia['_routes']\n\t\t  >\n\n\t/**\n\t * Entire Instance where scoped is true\n\t **/\n\tuse<\n\t\tconst NewElysia extends Elysia<any, true, any, any, any, any, any, any>\n\t>(\n\t\tinstance: MaybePromise<NewElysia>,\n\t\toptions?: { scoped?: boolean }\n\t): Elysia<\n\t\tBasePath,\n\t\ttrue,\n\t\t// @ts-expect-error - This is truly ideal\n\t\tPrettify2<Singleton & NewElysia['_types']['Singleton']>,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tRoutes extends ``\n\t\t\t? Routes & NewElysia['_routes']\n\t\t\t: Routes & CreateEden<BasePath, NewElysia['_routes']>\n\t>\n\n\t/**\n\t * Entire Instance where scoped is false\n\t **/\n\tuse<\n\t\tconst NewElysia extends Elysia<\n\t\t\tany,\n\t\t\tfalse,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany\n\t\t>,\n\t\tconst Scoped extends boolean = false\n\t>(\n\t\tinstance: MaybePromise<NewElysia>,\n\t\toptions?: { scoped?: Scoped }\n\t): Scoped extends true\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes & NewElysia['_routes']\n\t\t  >\n\t\t: Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\t// @ts-expect-error - This is truly ideal\n\t\t\t\tPrettify2<Singleton & NewElysia['_types']['Singleton']>,\n\t\t\t\tPrettify2<Definitions & NewElysia['_types']['Definitions']>,\n\t\t\t\tPrettify2<Metadata & NewElysia['_types']['Metadata']>,\n\t\t\t\tBasePath extends ``\n\t\t\t\t\t? Routes & NewElysia['_routes']\n\t\t\t\t\t: Routes & CreateEden<BasePath, NewElysia['_routes']>\n\t\t  >\n\n\t/**\n\t * Import fn\n\t */\n\tuse<\n\t\tconst NewElysia extends Elysia<any, any, any, any, any, any, any, any>,\n\t\tconst Scoped extends boolean = false\n\t>(\n\t\tplugin: Promise<{\n\t\t\tdefault: (\n\t\t\t\telysia: Elysia<any, any, any, any, any, any, any, any>\n\t\t\t) => MaybePromise<NewElysia>\n\t\t}>,\n\t\toptions?: { scoped?: Scoped }\n\t): Scoped extends true\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes & NewElysia['_routes']\n\t\t  >\n\t\t: Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\t// @ts-expect-error - This is truly ideal\n\t\t\t\tPrettify2<Singleton & NewElysia['_types']['Singleton']>,\n\t\t\t\tPrettify2<Definitions & NewElysia['_types']['Definitions']>,\n\t\t\t\tPrettify2<Metadata & NewElysia['_types']['Metadata']>,\n\t\t\t\tBasePath extends ``\n\t\t\t\t\t? Routes & NewElysia['_routes']\n\t\t\t\t\t: Routes & CreateEden<BasePath, NewElysia['_routes']>\n\t\t  >\n\n\t/**\n\t * Import entire instance\n\t */\n\tuse<\n\t\tconst LazyLoadElysia extends Elysia<\n\t\t\tany,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany,\n\t\t\tany\n\t\t>,\n\t\tconst Type extends LifeCycleType\n\t>(\n\t\tplugin: Promise<{\n\t\t\tdefault: LazyLoadElysia\n\t\t}>,\n\t\toptions?: { scoped?: boolean }\n\t): Type extends 'global'\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\t// @ts-expect-error - This is truly ideal\n\t\t\t\tPrettify2<Singleton & LazyLoadElysia['_types']['Singleton']>,\n\t\t\t\tPrettify2<\n\t\t\t\t\tDefinitions & LazyLoadElysia['_types']['Definitions']\n\t\t\t\t>,\n\t\t\t\tPrettify2<Metadata & LazyLoadElysia['_types']['Metadata']>,\n\t\t\t\tBasePath extends ``\n\t\t\t\t\t? Routes & LazyLoadElysia['_routes']\n\t\t\t\t\t: Routes & CreateEden<BasePath, LazyLoadElysia['_routes']>\n\t\t  >\n\t\t: Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tPrettify<Routes & LazyLoadElysia['_routes']>\n\t\t  >\n\n\t/**\n\t * ### use\n\t * Merge separate logic of Elysia with current\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * const plugin = (app: Elysia) => app\n\t *     .get('/plugin', () => 'hi')\n\t *\n\t * new Elysia()\n\t *     .use(plugin)\n\t * ```\n\t */\n\tuse(\n\t\tplugin:\n\t\t\t| Elysia<any, any, any, any, any, any, any, any>\n\t\t\t| Elysia<any, any, any, any, any, any, any, any>[]\n\t\t\t| MaybePromise<\n\t\t\t\t\t(\n\t\t\t\t\t\tapp: Elysia<any, any, any, any, any, any, any, any>\n\t\t\t\t\t) => MaybePromise<\n\t\t\t\t\t\tElysia<any, any, any, any, any, any, any, any>\n\t\t\t\t\t>\n\t\t\t  >\n\t\t\t| Promise<{\n\t\t\t\t\tdefault: Elysia<any, any, any, any, any, any, any, any>\n\t\t\t  }>\n\t\t\t| Promise<{\n\t\t\t\t\tdefault: (\n\t\t\t\t\t\telysia: Elysia<any, any, any, any, any, any, any, any>\n\t\t\t\t\t) => MaybePromise<\n\t\t\t\t\t\tElysia<any, any, any, any, any, any, any, any>\n\t\t\t\t\t>\n\t\t\t  }>,\n\t\toptions?: { scoped?: boolean }\n\t): Elysia<any, any, any, any, any, any, any, any> {\n\t\tif (options?.scoped)\n\t\t\treturn this.guard({}, (app) => app.use(plugin as any))\n\n\t\tif (Array.isArray(plugin)) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\n\t\t\tlet current = this\n\n\t\t\tfor (const p of plugin) current = this.use(p) as any\n\n\t\t\treturn current\n\t\t}\n\n\t\tif (plugin instanceof Promise) {\n\t\t\tthis.lazyLoadModules.push(\n\t\t\t\tplugin\n\t\t\t\t\t.then((plugin) => {\n\t\t\t\t\t\tif (typeof plugin === 'function') {\n\t\t\t\t\t\t\treturn plugin(\n\t\t\t\t\t\t\t\tthis as unknown as any\n\t\t\t\t\t\t\t) as unknown as Elysia\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (typeof plugin.default === 'function')\n\t\t\t\t\t\t\treturn plugin.default(\n\t\t\t\t\t\t\t\tthis as unknown as any\n\t\t\t\t\t\t\t) as unknown as Elysia\n\n\t\t\t\t\t\treturn this._use(plugin as any)\n\t\t\t\t\t})\n\t\t\t\t\t.then((x) => x.compile())\n\t\t\t)\n\n\t\t\treturn this as unknown as any\n\t\t} else return this._use(plugin)\n\n\t\treturn this\n\t}\n\n\tprivate _use(\n\t\tplugin:\n\t\t\t| Elysia<any, any, any, any, any, any, any, any>\n\t\t\t| ((\n\t\t\t\t\tapp: Elysia<any, any, any, any, any, any, any, any>\n\t\t\t  ) => MaybePromise<Elysia<any, any, any, any, any, any, any, any>>)\n\t) {\n\t\tif (typeof plugin === 'function') {\n\t\t\tconst instance = plugin(this as unknown as any) as unknown as any\n\t\t\tif (instance instanceof Promise) {\n\t\t\t\tthis.lazyLoadModules.push(\n\t\t\t\t\tinstance\n\t\t\t\t\t\t.then((plugin) => {\n\t\t\t\t\t\t\tif (plugin instanceof Elysia) {\n\t\t\t\t\t\t\t\tthis.compile()\n\n\t\t\t\t\t\t\t\t// Recompile async plugin routes\n\t\t\t\t\t\t\t\tfor (const {\n\t\t\t\t\t\t\t\t\tmethod,\n\t\t\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t\t\thandler,\n\t\t\t\t\t\t\t\t\thooks\n\t\t\t\t\t\t\t\t} of Object.values(plugin.router.history)) {\n\t\t\t\t\t\t\t\t\tthis.add(\n\t\t\t\t\t\t\t\t\t\tmethod,\n\t\t\t\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t\t\t\thandler,\n\t\t\t\t\t\t\t\t\t\tmergeHook(\n\t\t\t\t\t\t\t\t\t\t\thooks as LocalHook<\n\t\t\t\t\t\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\t\t\t\t\t\tany\n\t\t\t\t\t\t\t\t\t\t\t>,\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\terror: plugin.event.error\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn plugin\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (typeof plugin === 'function')\n\t\t\t\t\t\t\t\treturn plugin(\n\t\t\t\t\t\t\t\t\tthis as unknown as any\n\t\t\t\t\t\t\t\t) as unknown as Elysia\n\n\t\t\t\t\t\t\tif (typeof plugin.default === 'function')\n\t\t\t\t\t\t\t\treturn plugin.default(\n\t\t\t\t\t\t\t\t\tthis as unknown as any\n\t\t\t\t\t\t\t\t) as unknown as Elysia\n\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn this._use(plugin)\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then((x) => x.compile())\n\t\t\t\t)\n\t\t\t\treturn this as unknown as any\n\t\t\t}\n\n\t\t\treturn instance\n\t\t}\n\n\t\tconst { name, seed } = plugin.config\n\n\t\tplugin.getServer = () => this.getServer()\n\n\t\t/**\n\t\t * Model and error is required for Swagger generation\n\t\t */\n\t\tplugin.model(this.definitions.type as any)\n\t\tplugin.error(this.definitions.error as any)\n\n\t\tconst isScoped = plugin.config.scoped as boolean\n\t\tif (isScoped) {\n\t\t\tif (name) {\n\t\t\t\tif (!(name in this.dependencies)) this.dependencies[name] = []\n\n\t\t\t\tconst current =\n\t\t\t\t\tseed !== undefined\n\t\t\t\t\t\t? checksum(name + JSON.stringify(seed))\n\t\t\t\t\t\t: 0\n\n\t\t\t\tif (\n\t\t\t\t\tthis.dependencies[name].some(\n\t\t\t\t\t\t({ checksum }) => current === checksum\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t\treturn this\n\n\t\t\t\tthis.dependencies[name].push(\n\t\t\t\t\t!this.config?.analytic\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tname: plugin.config.name,\n\t\t\t\t\t\t\t\tseed: plugin.config.seed,\n\t\t\t\t\t\t\t\tchecksum: current,\n\t\t\t\t\t\t\t\tdependencies: plugin.dependencies\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\tname: plugin.config.name,\n\t\t\t\t\t\t\t\tseed: plugin.config.seed,\n\t\t\t\t\t\t\t\tchecksum: current,\n\t\t\t\t\t\t\t\tdependencies: plugin.dependencies,\n\t\t\t\t\t\t\t\tstack: plugin.telemetry.stack,\n\t\t\t\t\t\t\t\troutes: plugin.router.history,\n\t\t\t\t\t\t\t\tdecorators: plugin.singleton.decorator,\n\t\t\t\t\t\t\t\tstore: plugin.singleton.store,\n\t\t\t\t\t\t\t\ttype: plugin.definitions.type,\n\t\t\t\t\t\t\t\terror: plugin.definitions.error,\n\t\t\t\t\t\t\t\tderive: plugin.event.transform\n\t\t\t\t\t\t\t\t\t.filter((x) => x.$elysia === 'derive')\n\t\t\t\t\t\t\t\t\t.map((x) => ({\n\t\t\t\t\t\t\t\t\t\tfn: x.toString(),\n\t\t\t\t\t\t\t\t\t\tstack: new Error().stack ?? ''\n\t\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\t\tresolve: plugin.event.transform\n\t\t\t\t\t\t\t\t\t.filter((x) => x.$elysia === 'derive')\n\t\t\t\t\t\t\t\t\t.map((x) => ({\n\t\t\t\t\t\t\t\t\t\tfn: x.toString(),\n\t\t\t\t\t\t\t\t\t\tstack: new Error().stack ?? ''\n\t\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t  }\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tplugin.extender.macros = this.extender.macros.concat(\n\t\t\t\tplugin.extender.macros\n\t\t\t)\n\n\t\t\tconst macroHashes = <(number | undefined)[]>[]\n\n\t\t\tfor (let i = 0; i < plugin.extender.macros.length; i++) {\n\t\t\t\tconst macro = this.extender.macros[i]\n\n\t\t\t\tif (macroHashes.includes(macro.$elysiaChecksum)) {\n\t\t\t\t\tplugin.extender.macros.splice(i, 1)\n\t\t\t\t\ti--\n\t\t\t\t}\n\n\t\t\t\tmacroHashes.push(macro.$elysiaChecksum)\n\t\t\t}\n\n\t\t\tplugin.onRequest((context) => {\n\t\t\t\tObject.assign(context, this.singleton.decorator)\n\t\t\t\tObject.assign(context.store, this.singleton.store)\n\t\t\t})\n\n\t\t\tif (plugin.event.trace.length)\n\t\t\t\tplugin.event.trace.push(...plugin.event.trace)\n\n\t\t\tif (!plugin.config.prefix)\n\t\t\t\tconsole.warn(\n\t\t\t\t\t\"It's recommended to use scoped instance with a prefix to prevent collision routing with other instance.\"\n\t\t\t\t)\n\n\t\t\tif (plugin.event.error.length)\n\t\t\t\tplugin.event.error.push(...this.event.error)\n\n\t\t\tif (plugin.config.aot) plugin.compile()\n\n\t\t\tif (isScoped === true && plugin.config.prefix) {\n\t\t\t\tthis.mount(plugin.config.prefix + '/', plugin.fetch)\n\n\t\t\t\t// Ensure that when using plugins routes are correctly showing up in the .routes property. Else plugins e.g. swagger will not correctly work.\n\t\t\t\t// This also avoids adding routes multiple times.\n\t\t\t\tfor (const route of plugin.router.history) {\n\t\t\t\t\tthis.routeTree.set(\n\t\t\t\t\t\troute.method + `${plugin.config.prefix}${route.path}`,\n\t\t\t\t\t\tthis.router.history.length\n\t\t\t\t\t)\n\n\t\t\t\t\tthis.router.history.push({\n\t\t\t\t\t\t...route,\n\t\t\t\t\t\tpath: `${plugin.config.prefix}${route.path}`,\n\t\t\t\t\t\thooks: mergeHook(route.hooks, {\n\t\t\t\t\t\t\terror: this.event.error\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.mount(plugin.fetch)\n\n\t\t\t\tfor (const route of plugin.router.history) {\n\t\t\t\t\tthis.routeTree.set(\n\t\t\t\t\t\troute.method + `${plugin.config.prefix}${route.path}`,\n\t\t\t\t\t\tthis.router.history.length\n\t\t\t\t\t)\n\n\t\t\t\t\tthis.router.history.push({\n\t\t\t\t\t\t...route,\n\t\t\t\t\t\tpath: `${plugin.config.prefix}${route.path}`,\n\t\t\t\t\t\thooks: mergeHook(route.hooks, {\n\t\t\t\t\t\t\terror: this.event.error\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this\n\t\t} else {\n\t\t\tthis.headers(plugin.setHeaders)\n\n\t\t\tplugin.reporter = this.reporter\n\t\t\tfor (const trace of plugin.event.trace)\n\t\t\t\tif (trace.$elysiaHookType && trace.$elysiaHookType !== 'local')\n\t\t\t\t\tthis.trace(trace)\n\n\t\t\tif (name) {\n\t\t\t\tif (!(name in this.dependencies)) this.dependencies[name] = []\n\n\t\t\t\tconst current =\n\t\t\t\t\tseed !== undefined\n\t\t\t\t\t\t? checksum(name + JSON.stringify(seed))\n\t\t\t\t\t\t: 0\n\n\t\t\t\tif (\n\t\t\t\t\t!this.dependencies[name].some(\n\t\t\t\t\t\t({ checksum }) => current === checksum\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t\tthis.extender.macros = this.extender.macros.concat(\n\t\t\t\t\t\tplugin.extender.macros\n\t\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tthis.extender.macros = this.extender.macros.concat(\n\t\t\t\t\tplugin.extender.macros\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tconst macroHashes: string[] = []\n\n\t\t\tfor (let i = 0; i < this.extender.macros.length; i++) {\n\t\t\t\tconst macro = this.extender.macros[i]\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (macroHashes.includes(macro.$elysiaChecksum)) {\n\t\t\t\t\tthis.extender.macros.splice(i, 1)\n\t\t\t\t\ti--\n\t\t\t\t}\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tmacroHashes.push(macro.$elysiaChecksum)\n\t\t\t}\n\n\t\t\tthis.inference = {\n\t\t\t\tevent: {\n\t\t\t\t\tbody:\n\t\t\t\t\t\tthis.inference.event.body ||\n\t\t\t\t\t\tplugin.inference.event.body,\n\t\t\t\t\tcookie:\n\t\t\t\t\t\tthis.inference.event.cookie ||\n\t\t\t\t\t\tplugin.inference.event.cookie,\n\t\t\t\t\theaders:\n\t\t\t\t\t\tthis.inference.event.headers ||\n\t\t\t\t\t\tplugin.inference.event.headers,\n\t\t\t\t\tqueries: [\n\t\t\t\t\t\t...this.inference.event.queries,\n\t\t\t\t\t\t...plugin.inference.event.queries\n\t\t\t\t\t],\n\t\t\t\t\tquery:\n\t\t\t\t\t\tthis.inference.event.query ||\n\t\t\t\t\t\tplugin.inference.event.query,\n\t\t\t\t\tset: this.inference.event.set || plugin.inference.event.set,\n\t\t\t\t\tunknownQueries:\n\t\t\t\t\t\tthis.inference.event.unknownQueries ||\n\t\t\t\t\t\tplugin.inference.event.unknownQueries\n\t\t\t\t},\n\t\t\t\ttrace: {\n\t\t\t\t\trequest:\n\t\t\t\t\t\tthis.inference.trace.request ||\n\t\t\t\t\t\tplugin.inference.trace.request,\n\t\t\t\t\tparse:\n\t\t\t\t\t\tthis.inference.trace.parse ||\n\t\t\t\t\t\tplugin.inference.trace.parse,\n\t\t\t\t\ttransform:\n\t\t\t\t\t\tthis.inference.trace.transform ||\n\t\t\t\t\t\tplugin.inference.trace.transform,\n\t\t\t\t\thandle:\n\t\t\t\t\t\tthis.inference.trace.handle ||\n\t\t\t\t\t\tplugin.inference.trace.handle,\n\t\t\t\t\tbeforeHandle:\n\t\t\t\t\t\tthis.inference.trace.beforeHandle ||\n\t\t\t\t\t\tplugin.inference.trace.beforeHandle,\n\t\t\t\t\tafterHandle:\n\t\t\t\t\t\tthis.inference.trace.afterHandle ||\n\t\t\t\t\t\tplugin.inference.trace.afterHandle,\n\t\t\t\t\terror:\n\t\t\t\t\t\tthis.inference.trace.error ||\n\t\t\t\t\t\tplugin.inference.trace.error,\n\t\t\t\t\tcontext:\n\t\t\t\t\t\tthis.inference.trace.context ||\n\t\t\t\t\t\tplugin.inference.trace.context,\n\t\t\t\t\tstore:\n\t\t\t\t\t\tthis.inference.trace.store ||\n\t\t\t\t\t\tplugin.inference.trace.store,\n\t\t\t\t\tset: this.inference.trace.set || plugin.inference.trace.set\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.decorate(plugin.singleton.decorator)\n\t\tthis.state(plugin.singleton.store)\n\t\tthis.model(plugin.definitions.type)\n\t\tthis.error(plugin.definitions.error as any)\n\n\t\tfor (const { method, path, handler, hooks } of Object.values(\n\t\t\tplugin.router.history\n\t\t)) {\n\t\t\tthis.add(\n\t\t\t\tmethod,\n\t\t\t\tpath,\n\t\t\t\thandler,\n\t\t\t\tmergeHook(\n\t\t\t\t\thooks as LocalHook<any, any, any, any, any, any, any>,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: plugin.event.error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t)\n\t\t}\n\n\t\tif (!isScoped)\n\t\t\tif (name) {\n\t\t\t\tif (!(name in this.dependencies)) this.dependencies[name] = []\n\n\t\t\t\tconst current =\n\t\t\t\t\tseed !== undefined\n\t\t\t\t\t\t? checksum(name + JSON.stringify(seed))\n\t\t\t\t\t\t: 0\n\n\t\t\t\tif (\n\t\t\t\t\tthis.dependencies[name].some(\n\t\t\t\t\t\t({ checksum }) => current === checksum\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t\treturn this\n\n\t\t\t\tthis.dependencies[name].push(\n\t\t\t\t\t!this.config?.analytic\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tname: plugin.config.name,\n\t\t\t\t\t\t\t\tseed: plugin.config.seed,\n\t\t\t\t\t\t\t\tchecksum: current,\n\t\t\t\t\t\t\t\tdependencies: plugin.dependencies\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\tname: plugin.config.name,\n\t\t\t\t\t\t\t\tseed: plugin.config.seed,\n\t\t\t\t\t\t\t\tchecksum: current,\n\t\t\t\t\t\t\t\tdependencies: plugin.dependencies,\n\t\t\t\t\t\t\t\tstack: plugin.telemetry.stack,\n\t\t\t\t\t\t\t\troutes: plugin.router.history,\n\t\t\t\t\t\t\t\tdecorators: plugin.singleton,\n\t\t\t\t\t\t\t\tstore: plugin.singleton.store,\n\t\t\t\t\t\t\t\ttype: plugin.definitions.type,\n\t\t\t\t\t\t\t\terror: plugin.definitions.error,\n\t\t\t\t\t\t\t\tderive: plugin.event.transform\n\t\t\t\t\t\t\t\t\t.filter((x) => x?.$elysia === 'derive')\n\t\t\t\t\t\t\t\t\t.map((x) => ({\n\t\t\t\t\t\t\t\t\t\tfn: x.toString(),\n\t\t\t\t\t\t\t\t\t\tstack: new Error().stack ?? ''\n\t\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\t\tresolve: plugin.event.transform\n\t\t\t\t\t\t\t\t\t.filter((x) => x?.$elysia === 'resolve')\n\t\t\t\t\t\t\t\t\t.map((x) => ({\n\t\t\t\t\t\t\t\t\t\tfn: x.toString(),\n\t\t\t\t\t\t\t\t\t\tstack: new Error().stack ?? ''\n\t\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t  }\n\t\t\t\t)\n\n\t\t\t\tthis.event = mergeLifeCycle(\n\t\t\t\t\tthis.event,\n\t\t\t\t\tfilterGlobalHook(plugin.event),\n\t\t\t\t\tcurrent\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tthis.event = mergeLifeCycle(\n\t\t\t\t\tthis.event,\n\t\t\t\t\tfilterGlobalHook(plugin.event)\n\t\t\t\t)\n\t\t\t}\n\n\t\treturn this\n\t}\n\n\tmacro<const NewMacro extends BaseMacro>(\n\t\tmacro: (\n\t\t\troute: MacroManager<\n\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema'],\n\t\t\t\tSingleton & EphemeralSingleton,\n\t\t\t\tDefinitions['error']\n\t\t\t>\n\t\t) => NewMacro\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\t{\n\t\t\tschema: Metadata['schema']\n\t\t\tmacro: Metadata['macro'] & Partial<MacroToProperty<NewMacro>>\n\t\t},\n\t\tRoutes,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t> {\n\t\t// @ts-ignore\n\t\tmacro.$elysiaChecksum = checksum(\n\t\t\tJSON.stringify({\n\t\t\t\tname: this.config.name,\n\t\t\t\tseed: this.config.seed,\n\t\t\t\tcontent: macro.toString()\n\t\t\t})\n\t\t)\n\n\t\tthis.extender.macros.push(macro as any)\n\n\t\treturn this as any\n\t}\n\n\tmount(\n\t\thandle:\n\t\t\t| ((request: Request) => MaybePromise<Response>)\n\t\t\t| Elysia<any, any, any, any, any, any, any, any>\n\t): this\n\tmount(\n\t\tpath: string,\n\t\thandle:\n\t\t\t| ((request: Request) => MaybePromise<Response>)\n\t\t\t| Elysia<any, any, any, any, any, any, any, any>\n\t): this\n\n\tmount(\n\t\tpath:\n\t\t\t| string\n\t\t\t| ((request: Request) => MaybePromise<Response>)\n\t\t\t| Elysia<any, any, any, any, any, any, any, any>,\n\t\thandle?:\n\t\t\t| ((request: Request) => MaybePromise<Response>)\n\t\t\t| Elysia<any, any, any, any, any, any, any, any>\n\t) {\n\t\tif (\n\t\t\tpath instanceof Elysia ||\n\t\t\ttypeof path === 'function' ||\n\t\t\tpath.length === 0 ||\n\t\t\tpath === '/'\n\t\t) {\n\t\t\tconst run =\n\t\t\t\ttypeof path === 'function'\n\t\t\t\t\t? path\n\t\t\t\t\t: path instanceof Elysia\n\t\t\t\t\t? path.compile().fetch\n\t\t\t\t\t: handle instanceof Elysia\n\t\t\t\t\t? handle.compile().fetch\n\t\t\t\t\t: handle!\n\n\t\t\tconst handler: Handler<any, any> = async ({ request, path }) =>\n\t\t\t\trun(\n\t\t\t\t\tnew Request(\n\t\t\t\t\t\treplaceUrlPath(request.url, path || '/'),\n\t\t\t\t\t\trequest\n\t\t\t\t\t)\n\t\t\t\t)\n\n\t\t\tthis.all(\n\t\t\t\t'/*',\n\t\t\t\thandler as any,\n\t\t\t\t{\n\t\t\t\t\ttype: 'none'\n\t\t\t\t} as any\n\t\t\t)\n\n\t\t\treturn this\n\t\t}\n\n\t\tconst length = path.length\n\n\t\tif (handle instanceof Elysia) handle = handle.compile().fetch\n\n\t\tconst handler: Handler<any, any> = async ({ request, path }) =>\n\t\t\t(handle as Function)!(\n\t\t\t\tnew Request(\n\t\t\t\t\treplaceUrlPath(request.url, path.slice(length) || '/'),\n\t\t\t\t\trequest\n\t\t\t\t)\n\t\t\t)\n\n\t\tthis.all(\n\t\t\tpath,\n\t\t\thandler as any,\n\t\t\t{\n\t\t\t\ttype: 'none'\n\t\t\t} as any\n\t\t)\n\n\t\tthis.all(\n\t\t\tpath + (path.endsWith('/') ? '*' : '/*'),\n\t\t\thandler as any,\n\t\t\t{\n\t\t\t\ttype: 'none'\n\t\t\t} as any\n\t\t)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### get\n\t * Register handler for path with method [GET]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .get('/', () => 'hi')\n\t *     .get('/with-hook', () => 'hi', {\n\t *         response: t.String()\n\t *     })\n\t * ```\n\t */\n\tget<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Schema extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t>,\n\t\tconst Handle extends InlineHandler<\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\t`${BasePath}${Path extends '/' ? '' : Path}`\n\t\t>\n\t>(\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\tDefinitions['error'],\n\t\t\tMetadata['macro'] & EphemeralMetadata['macro'],\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tRoutes &\n\t\t\tCreateEden<\n\t\t\t\t`${BasePath & string}${Path extends '/' ? '/index' : Path}`,\n\t\t\t\t{\n\t\t\t\t\tget: {\n\t\t\t\t\t\tbody: Schema['body']\n\t\t\t\t\t\tparams: undefined extends Schema['params']\n\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t: Schema['params']\n\t\t\t\t\t\tquery: Schema['query']\n\t\t\t\t\t\theaders: Schema['headers']\n\t\t\t\t\t\tresponse: ComposeElysiaResponse<\n\t\t\t\t\t\t\tSchema['response'],\n\t\t\t\t\t\t\tHandle\n\t\t\t\t\t\t>\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t>,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t> {\n\t\tthis.add('GET', path, handler as any, hook)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### post\n\t * Register handler for path with method [POST]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .post('/', () => 'hi')\n\t *     .post('/with-hook', () => 'hi', {\n\t *         response: t.String()\n\t *     })\n\t * ```\n\t */\n\tpost<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Schema extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t>,\n\t\tconst Handle extends InlineHandler<\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t>(\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\tDefinitions['error'],\n\t\t\tMetadata['macro'] & EphemeralMetadata['macro'],\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tRoutes &\n\t\t\tCreateEden<\n\t\t\t\t`${BasePath & string}${Path extends '/' ? '/index' : Path}`,\n\t\t\t\t{\n\t\t\t\t\tpost: {\n\t\t\t\t\t\tbody: Schema['body']\n\t\t\t\t\t\tparams: undefined extends Schema['params']\n\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t: Schema['params']\n\t\t\t\t\t\tquery: Schema['query']\n\t\t\t\t\t\theaders: Schema['headers']\n\t\t\t\t\t\tresponse: ComposeElysiaResponse<\n\t\t\t\t\t\t\tSchema['response'],\n\t\t\t\t\t\t\tHandle\n\t\t\t\t\t\t>\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t>,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t> {\n\t\tthis.add('POST', path, handler as any, hook)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### put\n\t * Register handler for path with method [PUT]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .put('/', () => 'hi')\n\t *     .put('/with-hook', () => 'hi', {\n\t *         response: t.String()\n\t *     })\n\t * ```\n\t */\n\tput<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Schema extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t>,\n\t\tconst Handle extends InlineHandler<\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t>(\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\tDefinitions['error'],\n\t\t\tMetadata['macro'] & EphemeralMetadata['macro'],\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tRoutes &\n\t\t\tCreateEden<\n\t\t\t\t`${BasePath & string}${Path extends '/' ? '/index' : Path}`,\n\t\t\t\t{\n\t\t\t\t\tput: {\n\t\t\t\t\t\tbody: Schema['body']\n\t\t\t\t\t\tparams: undefined extends Schema['params']\n\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t: Schema['params']\n\t\t\t\t\t\tquery: Schema['query']\n\t\t\t\t\t\theaders: Schema['headers']\n\t\t\t\t\t\tresponse: ComposeElysiaResponse<\n\t\t\t\t\t\t\tSchema['response'],\n\t\t\t\t\t\t\tHandle\n\t\t\t\t\t\t>\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t>,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t> {\n\t\tthis.add('PUT', path, handler as any, hook)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### patch\n\t * Register handler for path with method [PATCH]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .patch('/', () => 'hi')\n\t *     .patch('/with-hook', () => 'hi', {\n\t *         response: t.String()\n\t *     })\n\t * ```\n\t */\n\tpatch<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Schema extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t>,\n\t\tconst Handle extends InlineHandler<\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t>(\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\tDefinitions['error'],\n\t\t\tMetadata['macro'] & EphemeralMetadata['macro'],\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tRoutes &\n\t\t\tCreateEden<\n\t\t\t\t`${BasePath & string}${Path extends '/' ? '/index' : Path}`,\n\t\t\t\t{\n\t\t\t\t\tpatch: {\n\t\t\t\t\t\tbody: Schema['body']\n\t\t\t\t\t\tparams: undefined extends Schema['params']\n\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t: Schema['params']\n\t\t\t\t\t\tquery: Schema['query']\n\t\t\t\t\t\theaders: Schema['headers']\n\t\t\t\t\t\tresponse: ComposeElysiaResponse<\n\t\t\t\t\t\t\tSchema['response'],\n\t\t\t\t\t\t\tHandle\n\t\t\t\t\t\t>\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t>,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t> {\n\t\tthis.add('PATCH', path, handler as any, hook)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### delete\n\t * Register handler for path with method [DELETE]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .delete('/', () => 'hi')\n\t *     .delete('/with-hook', () => 'hi', {\n\t *         response: t.String()\n\t *     })\n\t * ```\n\t */\n\tdelete<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Schema extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t>,\n\t\tconst Handle extends InlineHandler<\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t>(\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\tDefinitions['error'],\n\t\t\tMetadata['macro'] & EphemeralMetadata['macro'],\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tRoutes &\n\t\t\tCreateEden<\n\t\t\t\t`${BasePath & string}${Path extends '/' ? '/index' : Path}`,\n\t\t\t\t{\n\t\t\t\t\tdelete: {\n\t\t\t\t\t\tbody: Schema['body']\n\t\t\t\t\t\tparams: undefined extends Schema['params']\n\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t: Schema['params']\n\t\t\t\t\t\tquery: Schema['query']\n\t\t\t\t\t\theaders: Schema['headers']\n\t\t\t\t\t\tresponse: ComposeElysiaResponse<\n\t\t\t\t\t\t\tSchema['response'],\n\t\t\t\t\t\t\tHandle\n\t\t\t\t\t\t>\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t>,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t> {\n\t\tthis.add('DELETE', path, handler as any, hook)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### options\n\t * Register handler for path with method [POST]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .options('/', () => 'hi')\n\t *     .options('/with-hook', () => 'hi', {\n\t *         response: t.String()\n\t *     })\n\t * ```\n\t */\n\toptions<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Schema extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t>,\n\t\tconst Handle extends InlineHandler<\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t>(\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\tDefinitions['error'],\n\t\t\tMetadata['macro'] & EphemeralMetadata['macro'],\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tRoutes &\n\t\t\tCreateEden<\n\t\t\t\t`${BasePath & string}${Path extends '/' ? '/index' : Path}`,\n\t\t\t\t{\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tbody: Schema['body']\n\t\t\t\t\t\tparams: undefined extends Schema['params']\n\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t: Schema['params']\n\t\t\t\t\t\tquery: Schema['query']\n\t\t\t\t\t\theaders: Schema['headers']\n\t\t\t\t\t\tresponse: ComposeElysiaResponse<\n\t\t\t\t\t\t\tSchema['response'],\n\t\t\t\t\t\t\tHandle\n\t\t\t\t\t\t>\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t>,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t> {\n\t\tthis.add('OPTIONS', path, handler as any, hook)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### all\n\t * Register handler for path with method [ALL]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .all('/', () => 'hi')\n\t *     .all('/with-hook', () => 'hi', {\n\t *         response: t.String()\n\t *     })\n\t * ```\n\t */\n\tall<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Schema extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t>,\n\t\tconst Handle extends InlineHandler<\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t>(\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\tDefinitions['error'],\n\t\t\tMetadata['macro'] & EphemeralMetadata['macro'],\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tRoutes &\n\t\t\tCreateEden<\n\t\t\t\t`${BasePath & string}${Path extends '/' ? '/index' : Path}`,\n\t\t\t\t{\n\t\t\t\t\t[method in string]: {\n\t\t\t\t\t\tbody: Schema['body']\n\t\t\t\t\t\tparams: undefined extends Schema['params']\n\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t: Schema['params']\n\t\t\t\t\t\tquery: Schema['query']\n\t\t\t\t\t\theaders: Schema['headers']\n\t\t\t\t\t\tresponse: ComposeElysiaResponse<\n\t\t\t\t\t\t\tSchema['response'],\n\t\t\t\t\t\t\tHandle\n\t\t\t\t\t\t>\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t>,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t> {\n\t\tthis.add('ALL', path, handler as any, hook)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### head\n\t * Register handler for path with method [HEAD]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .head('/', () => 'hi')\n\t *     .head('/with-hook', () => 'hi', {\n\t *         response: t.String()\n\t *     })\n\t * ```\n\t */\n\thead<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Schema extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t>,\n\t\tconst Handle extends InlineHandler<\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t>(\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\tDefinitions['error'],\n\t\t\tMetadata['macro'] & EphemeralMetadata['macro'],\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tRoutes &\n\t\t\tCreateEden<\n\t\t\t\t`${BasePath & string}${Path extends '/' ? '/index' : Path}`,\n\t\t\t\t{\n\t\t\t\t\thead: {\n\t\t\t\t\t\tbody: Schema['body']\n\t\t\t\t\t\tparams: undefined extends Schema['params']\n\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t: Schema['params']\n\t\t\t\t\t\tquery: Schema['query']\n\t\t\t\t\t\theaders: Schema['headers']\n\t\t\t\t\t\tresponse: ComposeElysiaResponse<\n\t\t\t\t\t\t\tSchema['response'],\n\t\t\t\t\t\t\tHandle\n\t\t\t\t\t\t>\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t>,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t> {\n\t\tthis.add('HEAD', path, handler as any, hook)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### connect\n\t * Register handler for path with method [CONNECT]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .connect('/', () => 'hi')\n\t *     .connect('/with-hook', () => 'hi', {\n\t *         response: t.String()\n\t *     })\n\t * ```\n\t */\n\tconnect<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Schema extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t>,\n\t\tconst Handle extends InlineHandler<\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t>(\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\tDefinitions['error'],\n\t\t\tMetadata['macro'] & EphemeralMetadata['macro'],\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tRoutes &\n\t\t\tCreateEden<\n\t\t\t\t`${BasePath & string}${Path extends '/' ? '/index' : Path}`,\n\t\t\t\t{\n\t\t\t\t\tconnect: {\n\t\t\t\t\t\tbody: Schema['body']\n\t\t\t\t\t\tparams: undefined extends Schema['params']\n\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t: Schema['params']\n\t\t\t\t\t\tquery: Schema['query']\n\t\t\t\t\t\theaders: Schema['headers']\n\t\t\t\t\t\tresponse: ComposeElysiaResponse<\n\t\t\t\t\t\t\tSchema['response'],\n\t\t\t\t\t\t\tHandle\n\t\t\t\t\t\t>\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t>,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t> {\n\t\tthis.add('CONNECT', path, handler as any, hook)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### route\n\t * Register handler for path with method [ROUTE]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .route('/', () => 'hi')\n\t *     .route('/with-hook', () => 'hi', {\n\t *         response: t.String()\n\t *     })\n\t * ```\n\t */\n\troute<\n\t\tconst Method extends HTTPMethod,\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Schema extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tMetadata['schema'] & EphemeralMetadata['schema']\n\t\t>,\n\t\tconst Handle extends InlineHandler<\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t>(\n\t\tmethod: Method,\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\tDefinitions['error'],\n\t\t\tMetadata['macro'] & EphemeralMetadata['macro'],\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t> & {\n\t\t\tconfig: {\n\t\t\t\tallowMeta?: boolean\n\t\t\t}\n\t\t}\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tRoutes &\n\t\t\tCreateEden<\n\t\t\t\t`${BasePath & string}${Path extends '/' ? '/index' : Path}`,\n\t\t\t\t{\n\t\t\t\t\t[method in Method]: {\n\t\t\t\t\t\tbody: Schema['body']\n\t\t\t\t\t\tparams: undefined extends Schema['params']\n\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t: Schema['params']\n\t\t\t\t\t\tquery: Schema['query']\n\t\t\t\t\t\theaders: Schema['headers']\n\t\t\t\t\t\tresponse: ComposeElysiaResponse<\n\t\t\t\t\t\t\tSchema['response'],\n\t\t\t\t\t\t\tHandle\n\t\t\t\t\t\t>\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t>,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t> {\n\t\tthis.add(method.toUpperCase(), path, handler as any, hook, hook?.config)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### ws\n\t * Register handler for path with method [ws]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .ws('/', {\n\t *         message(ws, message) {\n\t *             ws.send(message)\n\t *         }\n\t *     })\n\t * ```\n\t */\n\tws<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Schema extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tMetadata['schema']\n\t\t>\n\t>(\n\t\tpath: Path,\n\t\toptions: WS.LocalHook<\n\t\t\tLocalSchema,\n\t\t\tSchema,\n\t\t\tSingleton & EphemeralSingleton,\n\t\t\tDefinitions['error'],\n\t\t\tMetadata['macro'] & EphemeralMetadata['macro'],\n\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tRoutes &\n\t\t\tCreateEden<\n\t\t\t\t`${BasePath}${Path extends '/' ? '/index' : Path}`,\n\t\t\t\t{\n\t\t\t\t\tsubscribe: {\n\t\t\t\t\t\tbody: Schema['body']\n\t\t\t\t\t\tparams: undefined extends Schema['params']\n\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t: Schema['params']\n\t\t\t\t\t\tquery: Schema['query']\n\t\t\t\t\t\theaders: Schema['headers']\n\t\t\t\t\t\tresponse: Schema['response']\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t>,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t> {\n\t\tconst transform = options.transformMessage\n\t\t\t? Array.isArray(options.transformMessage)\n\t\t\t\t? options.transformMessage\n\t\t\t\t: [options.transformMessage]\n\t\t\t: undefined\n\n\t\tlet server: Server | null = null\n\n\t\tconst validateMessage = getSchemaValidator(options?.body, {\n\t\t\tmodels: this.definitions.type as Record<string, TSchema>\n\t\t})\n\n\t\tconst validateResponse = getSchemaValidator(options?.response as any, {\n\t\t\tmodels: this.definitions.type as Record<string, TSchema>\n\t\t})\n\n\t\tconst parseMessage = (message: any) => {\n\t\t\tif (typeof message === 'string') {\n\t\t\t\tconst start = message?.charCodeAt(0)\n\n\t\t\t\tif (start === 47 || start === 123)\n\t\t\t\t\ttry {\n\t\t\t\t\t\tmessage = JSON.parse(message)\n\t\t\t\t\t} catch {\n\t\t\t\t\t\t// Not empty\n\t\t\t\t\t}\n\t\t\t\telse if (isNumericString(message)) message = +message\n\t\t\t}\n\n\t\t\tif (transform?.length)\n\t\t\t\tfor (let i = 0; i < transform.length; i++) {\n\t\t\t\t\tconst temp = transform[i](message)\n\n\t\t\t\t\tif (temp !== undefined) message = temp\n\t\t\t\t}\n\n\t\t\treturn message\n\t\t}\n\n\t\tthis.route(\n\t\t\t'$INTERNALWS',\n\t\t\tpath as any,\n\t\t\t// @ts-expect-error\n\t\t\t(context) => {\n\t\t\t\t// ! Enable static code analysis just in case resolveUnknownFunction doesn't work, do not remove\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t\t\tconst { set, path, qi, headers, query, params } = context\n\n\t\t\t\tif (server === null) server = this.getServer()\n\n\t\t\t\tif (\n\t\t\t\t\tserver?.upgrade<any>(context.request, {\n\t\t\t\t\t\theaders: (typeof options.upgrade === 'function'\n\t\t\t\t\t\t\t? options.upgrade(context as any as Context)\n\t\t\t\t\t\t\t: options.upgrade) as Bun.HeadersInit,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tvalidator: validateResponse,\n\t\t\t\t\t\t\topen(ws: ServerWebSocket<any>) {\n\t\t\t\t\t\t\t\toptions.open?.(new ElysiaWS(ws, context as any))\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmessage: (ws: ServerWebSocket<any>, msg: any) => {\n\t\t\t\t\t\t\t\tconst message = parseMessage(msg)\n\n\t\t\t\t\t\t\t\tif (validateMessage?.Check(message) === false)\n\t\t\t\t\t\t\t\t\treturn void ws.send(\n\t\t\t\t\t\t\t\t\t\tnew ValidationError(\n\t\t\t\t\t\t\t\t\t\t\t'message',\n\t\t\t\t\t\t\t\t\t\t\tvalidateMessage,\n\t\t\t\t\t\t\t\t\t\t\tmessage\n\t\t\t\t\t\t\t\t\t\t).message as string\n\t\t\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t\toptions.message?.(\n\t\t\t\t\t\t\t\t\tnew ElysiaWS(ws, context as any),\n\t\t\t\t\t\t\t\t\tmessage as any\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdrain(ws: ServerWebSocket<any>) {\n\t\t\t\t\t\t\t\toptions.drain?.(\n\t\t\t\t\t\t\t\t\tnew ElysiaWS(ws, context as any)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tclose(\n\t\t\t\t\t\t\t\tws: ServerWebSocket<any>,\n\t\t\t\t\t\t\t\tcode: number,\n\t\t\t\t\t\t\t\treason: string\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\toptions.close?.(\n\t\t\t\t\t\t\t\t\tnew ElysiaWS(ws, context as any),\n\t\t\t\t\t\t\t\t\tcode,\n\t\t\t\t\t\t\t\t\treason\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t\treturn\n\n\t\t\t\tset.status = 400\n\n\t\t\t\treturn 'Expected a websocket connection'\n\t\t\t},\n\t\t\t{\n\t\t\t\tbeforeHandle: options.beforeHandle,\n\t\t\t\ttransform: options.transform,\n\t\t\t\theaders: options.headers,\n\t\t\t\tparams: options.params,\n\t\t\t\tquery: options.query\n\t\t\t} as any\n\t\t)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### state\n\t * Assign global mutatable state accessible for all handler\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .state({ counter: 0 })\n\t *     .get('/', (({ counter }) => ++counter)\n\t * ```\n\t */\n\tstate<const Name extends string | number | symbol, Value>(\n\t\tname: Name,\n\t\tvalue: Value\n\t): Scoped extends true\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\t{\n\t\t\t\t\tdecorator: EphemeralSingleton['decorator']\n\t\t\t\t\tstore: Prettify<\n\t\t\t\t\t\tEphemeralSingleton['store'] & {\n\t\t\t\t\t\t\t[name in Name]: Value\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\tderive: EphemeralSingleton['derive']\n\t\t\t\t\tresolve: EphemeralSingleton['resolve']\n\t\t\t\t},\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\t\t: Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\t{\n\t\t\t\t\tdecorator: Singleton['decorator']\n\t\t\t\t\tstore: Prettify<\n\t\t\t\t\t\tSingleton['store'] & {\n\t\t\t\t\t\t\t[name in Name]: Value\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\tderive: Singleton['derive']\n\t\t\t\t\tresolve: Singleton['resolve']\n\t\t\t\t},\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\tEphemeralSingleton,\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\n\t/**\n\t * ### state\n\t * Assign global mutatable state accessible for all handler\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .state('counter', 0)\n\t *     .get('/', (({ counter }) => ++counter)\n\t * ```\n\t */\n\tstate<Store extends Record<string, unknown>>(\n\t\tstore: Store\n\t): Scoped extends true\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\t{\n\t\t\t\t\tdecorator: EphemeralSingleton['decorator']\n\t\t\t\t\tstore: Prettify<EphemeralSingleton['store'] & Store>\n\t\t\t\t\tderive: EphemeralSingleton['derive']\n\t\t\t\t\tresolve: EphemeralSingleton['resolve']\n\t\t\t\t},\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\t\t: Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\t{\n\t\t\t\t\tdecorator: Singleton['decorator']\n\t\t\t\t\tstore: Prettify<Singleton['store'] & Store>\n\t\t\t\t\tderive: Singleton['derive']\n\t\t\t\t\tresolve: Singleton['resolve']\n\t\t\t\t},\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\tEphemeralSingleton,\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\n\tstate<NewStore extends Record<string, unknown>>(\n\t\tmapper: (\n\t\t\tdecorators: Singleton['store'] & EphemeralSingleton['store']\n\t\t) => NewStore\n\t): Scoped extends true\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\t{\n\t\t\t\t\tdecorator: EphemeralSingleton['decorator']\n\t\t\t\t\tstore: NewStore\n\t\t\t\t\tderive: EphemeralSingleton['derive']\n\t\t\t\t\tresolve: EphemeralSingleton['resolve']\n\t\t\t\t},\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\t\t: Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\t{\n\t\t\t\t\tdecorator: Singleton['decorator']\n\t\t\t\t\tstore: NewStore\n\t\t\t\t\tderive: Singleton['derive']\n\t\t\t\t\tresolve: Singleton['resolve']\n\t\t\t\t},\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\tEphemeralSingleton,\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\n\t/**\n\t * ### state\n\t * Assign global mutatable state accessible for all handler\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .state('counter', 0)\n\t *     .get('/', (({ counter }) => ++counter)\n\t * ```\n\t */\n\tstate(\n\t\tname: string | number | symbol | Record<string, unknown> | Function,\n\t\tvalue?: unknown\n\t) {\n\t\tswitch (typeof name) {\n\t\t\tcase 'object':\n\t\t\t\tthis.singleton.store = mergeDeep(this.singleton.store, name)\n\n\t\t\t\treturn this as any\n\n\t\t\tcase 'function':\n\t\t\t\tthis.singleton.store = name(this.singleton.store)\n\n\t\t\t\treturn this as any\n\t\t}\n\n\t\tif (!(name in this.singleton.store)) {\n\t\t\t// eslint-disable-next-line no-extra-semi\n\t\t\t;(\n\t\t\t\tthis.singleton.store as Record<\n\t\t\t\t\tstring | number | symbol,\n\t\t\t\t\tunknown\n\t\t\t\t>\n\t\t\t)[name] = value\n\t\t}\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### decorate\n\t * Define custom method to `Context` accessible for all handler\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .decorate('getDate', () => Date.now())\n\t *     .get('/', (({ getDate }) => getDate())\n\t * ```\n\t */\n\tdecorate<const Name extends string, const Value>(\n\t\tname: Name,\n\t\tvalue: Value\n\t): Scoped extends true\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\t{\n\t\t\t\t\tdecorator: Prettify<\n\t\t\t\t\t\tEphemeralSingleton['decorator'] & {\n\t\t\t\t\t\t\t[name in Name]: Value\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\tstore: EphemeralSingleton['store']\n\t\t\t\t\tderive: EphemeralSingleton['derive']\n\t\t\t\t\tresolve: EphemeralSingleton['resolve']\n\t\t\t\t},\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\t\t: Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\t{\n\t\t\t\t\tdecorator: Prettify<\n\t\t\t\t\t\tSingleton['decorator'] & {\n\t\t\t\t\t\t\t[name in Name]: Value\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\tstore: Singleton['store']\n\t\t\t\t\tderive: Singleton['derive']\n\t\t\t\t\tresolve: Singleton['resolve']\n\t\t\t\t},\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\tEphemeralSingleton,\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\n\t/**\n\t * ### decorate\n\t * Define custom method to `Context` accessible for all handler\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .decorate('getDate', () => Date.now())\n\t *     .get('/', (({ getDate }) => getDate())\n\t * ```\n\t */\n\tdecorate<const NewDecorators extends Record<string, unknown>>(\n\t\tdecorators: NewDecorators\n\t): Scoped extends true\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\t{\n\t\t\t\t\tdecorator: Prettify<\n\t\t\t\t\t\tEphemeralSingleton['decorator'] & NewDecorators\n\t\t\t\t\t>\n\t\t\t\t\tstore: EphemeralSingleton['store']\n\t\t\t\t\tderive: EphemeralSingleton['derive']\n\t\t\t\t\tresolve: EphemeralSingleton['resolve']\n\t\t\t\t},\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\t\t: Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\t{\n\t\t\t\t\tdecorator: Prettify<Singleton['decorator'] & NewDecorators>\n\t\t\t\t\tstore: Singleton['store']\n\t\t\t\t\tderive: Singleton['derive']\n\t\t\t\t\tresolve: Singleton['resolve']\n\t\t\t\t},\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\tEphemeralSingleton,\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\n\tdecorate<const NewDecorators extends Record<string, unknown>>(\n\t\tmapper: (\n\t\t\tdecorators: Singleton['decorator'] & EphemeralSingleton['decorator']\n\t\t) => NewDecorators\n\t): Scoped extends true\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\t{\n\t\t\t\t\tdecorator: NewDecorators\n\t\t\t\t\tstore: EphemeralSingleton['store']\n\t\t\t\t\tderive: EphemeralSingleton['derive']\n\t\t\t\t\tresolve: EphemeralSingleton['resolve']\n\t\t\t\t},\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\t\t: Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\t{\n\t\t\t\t\tdecorator: NewDecorators\n\t\t\t\t\tstore: Singleton['store']\n\t\t\t\t\tderive: Singleton['derive']\n\t\t\t\t\tresolve: Singleton['resolve']\n\t\t\t\t},\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\tEphemeralSingleton,\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\n\t/**\n\t * ### decorate\n\t * Define custom method to `Context` accessible for all handler\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .decorate('getDate', () => Date.now())\n\t *     .get('/', (({ getDate }) => getDate())\n\t * ```\n\t */\n\tdecorate(\n\t\tname: string | Record<string, unknown> | Function,\n\t\tvalue?: unknown\n\t) {\n\t\tswitch (typeof name) {\n\t\t\tcase 'object':\n\t\t\t\tthis.singleton.decorator = mergeDeep(\n\t\t\t\t\tthis.singleton.decorator,\n\t\t\t\t\tname\n\t\t\t\t)\n\n\t\t\t\treturn this as any\n\n\t\t\tcase 'function':\n\t\t\t\tthis.singleton.decorator = name(this.singleton.decorator)\n\n\t\t\t\treturn this as any\n\t\t}\n\n\t\tif (!(name in this.singleton.decorator))\n\t\t\tthis.singleton.decorator[name] = value\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * Derive new property for each request with access to `Context`.\n\t *\n\t * If error is thrown, the scope will skip to handling error instead.\n\t *\n\t * ---\n\t * @example\n\t * new Elysia()\n\t *     .state('counter', 1)\n\t *     .derive(({ store }) => ({\n\t *         increase() {\n\t *             store.counter++\n\t *         }\n\t *     }))\n\t */\n\tderive<const Derivative extends Record<string, unknown>>(\n\t\ttransform: (\n\t\t\tcontext: Prettify<\n\t\t\t\tContext<\n\t\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema'],\n\t\t\t\t\tSingleton & EphemeralSingleton\n\t\t\t\t>\n\t\t\t>\n\t\t) => MaybePromise<Derivative>\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tRoutes,\n\t\t{\n\t\t\tdecorator: EphemeralSingleton['decorator']\n\t\t\tstore: EphemeralSingleton['store']\n\t\t\tderive: Prettify<EphemeralSingleton['derive'] & Awaited<Derivative>>\n\t\t\tresolve: EphemeralSingleton['resolve']\n\t\t},\n\t\tEphemeralMetadata\n\t>\n\n\t/**\n\t * Derive new property for each request with access to `Context`.\n\t *\n\t * If error is thrown, the scope will skip to handling error instead.\n\t *\n\t * ---\n\t * @example\n\t * new Elysia()\n\t *     .state('counter', 1)\n\t *     .derive(({ store }) => ({\n\t *         increase() {\n\t *             store.counter++\n\t *         }\n\t *     }))\n\t */\n\tderive<\n\t\tconst Derivative extends Record<string, unknown>,\n\t\tconst Type extends Exclude<LifeCycleType, 'scoped'>\n\t>(\n\t\toptions: { as?: Type },\n\t\ttransform: (\n\t\t\tcontext: Prettify<\n\t\t\t\tContext<\n\t\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema'],\n\t\t\t\t\tSingleton & EphemeralSingleton\n\t\t\t\t>\n\t\t\t>\n\t\t) => MaybePromise<Derivative>\n\t): Type extends 'global'\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\t{\n\t\t\t\t\tdecorator: Singleton['decorator']\n\t\t\t\t\tstore: Singleton['store']\n\t\t\t\t\tderive: Prettify<Singleton['derive'] & Awaited<Derivative>>\n\t\t\t\t\tresolve: Singleton['resolve']\n\t\t\t\t},\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\tEphemeralSingleton,\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\t\t: Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\t{\n\t\t\t\t\tdecorator: EphemeralSingleton['decorator']\n\t\t\t\t\tstore: EphemeralSingleton['store']\n\t\t\t\t\tderive: Prettify<\n\t\t\t\t\t\tEphemeralSingleton['derive'] & Awaited<Derivative>\n\t\t\t\t\t>\n\t\t\t\t\tresolve: EphemeralSingleton['resolve']\n\t\t\t\t},\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\n\tderive(\n\t\toptionsOrTransform: { as?: LifeCycleType } | Function,\n\t\ttransform?: Function\n\t) {\n\t\tif (!transform) {\n\t\t\ttransform = optionsOrTransform as any\n\t\t\toptionsOrTransform = { as: 'local' }\n\t\t}\n\n\t\t// @ts-expect-error\n\t\ttransform.$elysia = 'derive'\n\n\t\treturn this.onTransform(\n\t\t\toptionsOrTransform as any,\n\t\t\ttransform as any\n\t\t) as any\n\t}\n\n\tmodel<const Name extends string, const Model extends TSchema>(\n\t\tname: Name,\n\t\tmodel: Model\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\t{\n\t\t\ttype: Prettify<\n\t\t\t\tDefinitions['type'] & { [name in Name]: Static<Model> }\n\t\t\t>\n\t\t\terror: Definitions['error']\n\t\t},\n\t\tMetadata,\n\t\tRoutes,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t>\n\n\tmodel<const Recorder extends Record<string, TSchema>>(\n\t\trecord: Recorder\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\t{\n\t\t\ttype: Prettify<\n\t\t\t\tDefinitions['type'] & {\n\t\t\t\t\t[key in keyof Recorder]: Static<Recorder[key]>\n\t\t\t\t}\n\t\t\t>\n\t\t\terror: Definitions['error']\n\t\t},\n\t\tMetadata,\n\t\tRoutes,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t>\n\n\tmodel<const NewType extends Record<string, TSchema>>(\n\t\tmapper: (decorators: {\n\t\t\t[type in keyof Definitions['type']]: ReturnType<\n\t\t\t\ttypeof t.Unsafe<Definitions['type'][type]>\n\t\t\t>\n\t\t}) => NewType\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\t{\n\t\t\ttype: { [x in keyof NewType]: Static<NewType[x]> }\n\t\t\terror: Definitions['error']\n\t\t},\n\t\tMetadata,\n\t\tRoutes,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t>\n\n\tmodel(name: string | Record<string, TSchema> | Function, model?: TSchema) {\n\t\tswitch (typeof name) {\n\t\t\tcase 'object':\n\t\t\t\tObject.entries(name).forEach(([key, value]) => {\n\t\t\t\t\tif (!(key in this.definitions.type))\n\t\t\t\t\t\tthis.definitions.type[key] = value as TSchema\n\t\t\t\t})\n\n\t\t\t\treturn this\n\n\t\t\tcase 'function':\n\t\t\t\tthis.definitions.type = name(this.definitions.type)\n\n\t\t\t\treturn this as any\n\t\t}\n\n\t\t;(this.definitions.type as Record<string, TSchema>)[name] = model!\n\n\t\treturn this as any\n\t}\n\n\tmapDerive<const NewDerivative extends Record<string, unknown>>(\n\t\tmapper: (\n\t\t\tcontext: Context<\n\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema'],\n\t\t\t\tSingleton & EphemeralSingleton,\n\t\t\t\tBasePath\n\t\t\t>\n\t\t) => MaybePromise<NewDerivative>\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\tSingleton,\n\t\tDefinitions,\n\t\tMetadata,\n\t\tRoutes,\n\t\t{\n\t\t\tdecorator: EphemeralSingleton['decorator']\n\t\t\tstore: EphemeralSingleton['store']\n\t\t\tderive: NewDerivative\n\t\t\tresolve: EphemeralSingleton['resolve']\n\t\t},\n\t\tEphemeralMetadata\n\t>\n\n\tmapDerive<\n\t\tconst NewDerivative extends Record<string, unknown>,\n\t\tconst Type extends Exclude<LifeCycleType, 'scoped'>\n\t>(\n\t\toptions: { as?: Type },\n\t\tmapper: (\n\t\t\tcontext: Context<\n\t\t\t\tMetadata['schema'] & EphemeralMetadata['schema'],\n\t\t\t\tSingleton & EphemeralSingleton,\n\t\t\t\tBasePath\n\t\t\t>\n\t\t) => MaybePromise<NewDerivative>\n\t): Type extends 'global'\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\t{\n\t\t\t\t\tdecorator: Singleton['decorator']\n\t\t\t\t\tstore: Singleton['store']\n\t\t\t\t\tderive: NewDerivative\n\t\t\t\t\tresolve: Singleton['resolve']\n\t\t\t\t},\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\tEphemeralSingleton,\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\t\t: Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tScoped,\n\t\t\t\tSingleton,\n\t\t\t\tDefinitions,\n\t\t\t\tMetadata,\n\t\t\t\tRoutes,\n\t\t\t\t{\n\t\t\t\t\tdecorator: EphemeralSingleton['decorator']\n\t\t\t\t\tstore: EphemeralSingleton['store']\n\t\t\t\t\tderive: NewDerivative\n\t\t\t\t\tresolve: EphemeralSingleton['resolve']\n\t\t\t\t},\n\t\t\t\tEphemeralMetadata\n\t\t  >\n\n\tmapDerive(\n\t\toptionsOrDerive: { as?: LifeCycleType } | Function,\n\t\tmapper?: Function\n\t) {\n\t\tif (!mapper) {\n\t\t\tmapper = optionsOrDerive as any\n\t\t\toptionsOrDerive = { as: 'local' }\n\t\t}\n\n\t\t// @ts-ignore\n\t\tmapper.$elysia = 'derive'\n\n\t\treturn this.onTransform(optionsOrDerive as any, mapper as any) as any\n\t}\n\n\taffix<\n\t\tconst Base extends 'prefix' | 'suffix',\n\t\tconst Type extends 'all' | 'decorator' | 'state' | 'model' | 'error',\n\t\tconst Word extends string\n\t>(\n\t\tbase: Base,\n\t\ttype: Type,\n\t\tword: Word\n\t): Elysia<\n\t\tBasePath,\n\t\tScoped,\n\t\t{\n\t\t\tdecorator: Type extends 'decorator' | 'all'\n\t\t\t\t? 'prefix' extends Base\n\t\t\t\t\t? Word extends `${string}${'_' | '-' | ' '}`\n\t\t\t\t\t\t? AddPrefix<Word, Singleton['decorator']>\n\t\t\t\t\t\t: AddPrefixCapitalize<Word, Singleton['decorator']>\n\t\t\t\t\t: AddSuffixCapitalize<Word, Singleton['decorator']>\n\t\t\t\t: Singleton['decorator']\n\t\t\tstore: Type extends 'state' | 'all'\n\t\t\t\t? 'prefix' extends Base\n\t\t\t\t\t? Word extends `${string}${'_' | '-' | ' '}`\n\t\t\t\t\t\t? AddPrefix<Word, Singleton['store']>\n\t\t\t\t\t\t: AddPrefixCapitalize<Word, Singleton['store']>\n\t\t\t\t\t: AddSuffix<Word, Singleton['store']>\n\t\t\t\t: Singleton['store']\n\t\t\tderive: Type extends 'decorator' | 'all'\n\t\t\t\t? 'prefix' extends Base\n\t\t\t\t\t? Word extends `${string}${'_' | '-' | ' '}`\n\t\t\t\t\t\t? AddPrefix<Word, Singleton['derive']>\n\t\t\t\t\t\t: AddPrefixCapitalize<Word, Singleton['derive']>\n\t\t\t\t\t: AddSuffixCapitalize<Word, Singleton['derive']>\n\t\t\t\t: Singleton['derive']\n\t\t\tresolve: Type extends 'decorator' | 'all'\n\t\t\t\t? 'prefix' extends Base\n\t\t\t\t\t? Word extends `${string}${'_' | '-' | ' '}`\n\t\t\t\t\t\t? AddPrefix<Word, Singleton['resolve']>\n\t\t\t\t\t\t: AddPrefixCapitalize<Word, Singleton['resolve']>\n\t\t\t\t\t: AddSuffixCapitalize<Word, Singleton['resolve']>\n\t\t\t\t: Singleton['resolve']\n\t\t},\n\t\t{\n\t\t\ttype: Type extends 'model' | 'all'\n\t\t\t\t? 'prefix' extends Base\n\t\t\t\t\t? Word extends `${string}${'_' | '-' | ' '}`\n\t\t\t\t\t\t? AddPrefix<Word, Definitions['type']>\n\t\t\t\t\t\t: AddPrefixCapitalize<Word, Definitions['type']>\n\t\t\t\t\t: AddSuffixCapitalize<Word, Definitions['type']>\n\t\t\t\t: Definitions['type']\n\t\t\terror: Type extends 'error' | 'all'\n\t\t\t\t? 'prefix' extends Base\n\t\t\t\t\t? Word extends `${string}${'_' | '-' | ' '}`\n\t\t\t\t\t\t? AddPrefix<Word, Definitions['error']>\n\t\t\t\t\t\t: AddPrefixCapitalize<Word, Definitions['error']>\n\t\t\t\t\t: AddSuffixCapitalize<Word, Definitions['error']>\n\t\t\t\t: Definitions['error']\n\t\t},\n\t\tMetadata,\n\t\tRoutes,\n\t\tEphemeralSingleton,\n\t\tEphemeralMetadata\n\t> {\n\t\tif (word === '') return this as any\n\n\t\tconst delimieter = ['_', '-', ' ']\n\t\tconst capitalize = (word: string) =>\n\t\t\tword[0].toUpperCase() + word.slice(1)\n\n\t\tconst joinKey =\n\t\t\tbase === 'prefix'\n\t\t\t\t? (prefix: string, word: string) =>\n\t\t\t\t\t\tdelimieter.includes(prefix.at(-1) ?? '')\n\t\t\t\t\t\t\t? prefix + word\n\t\t\t\t\t\t\t: prefix + capitalize(word)\n\t\t\t\t: delimieter.includes(word.at(-1) ?? '')\n\t\t\t\t? (suffix: string, word: string) => word + suffix\n\t\t\t\t: (suffix: string, word: string) => word + capitalize(suffix)\n\n\t\tconst remap = (type: 'decorator' | 'state' | 'model' | 'error') => {\n\t\t\tconst store: Record<string, any> = {}\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 'decorator':\n\t\t\t\t\tfor (const key in this.singleton.decorator) {\n\t\t\t\t\t\tstore[joinKey(word, key)] =\n\t\t\t\t\t\t\tthis.singleton.decorator[key]\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.singleton.decorator = store\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'state':\n\t\t\t\t\tfor (const key in this.singleton.store)\n\t\t\t\t\t\tstore[joinKey(word, key)] = this.singleton.store[key]\n\n\t\t\t\t\tthis.singleton.store = store\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'model':\n\t\t\t\t\tfor (const key in this.definitions.type)\n\t\t\t\t\t\tstore[joinKey(word, key)] = this.definitions.type[key]\n\n\t\t\t\t\tthis.definitions.type = store\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'error':\n\t\t\t\t\tfor (const key in this.definitions.error)\n\t\t\t\t\t\tstore[joinKey(word, key)] = this.definitions.error[key]\n\n\t\t\t\t\tthis.definitions.error = store\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tconst types = Array.isArray(type) ? type : [type]\n\n\t\tfor (const type of types.some((x) => x === 'all')\n\t\t\t? ['decorator', 'state', 'model', 'error']\n\t\t\t: types)\n\t\t\tremap(type as 'decorator')\n\n\t\treturn this as any\n\t}\n\n\tprefix<\n\t\tconst Type extends 'all' | 'decorator' | 'state' | 'model' | 'error',\n\t\tconst Word extends string\n\t>(type: Type, word: Word) {\n\t\treturn this.affix('prefix', type, word)\n\t}\n\n\tsuffix<\n\t\tconst Type extends 'all' | 'decorator' | 'state' | 'model' | 'error',\n\t\tconst Word extends string\n\t>(type: Type, word: Word) {\n\t\treturn this.affix('suffix', type, word)\n\t}\n\n\tcompile() {\n\t\tthis.fetch = this.config.aot\n\t\t\t? composeGeneralHandler(this)\n\t\t\t: createDynamicHandler(this)\n\n\t\tif (typeof this.server?.reload === 'function')\n\t\t\tthis.server.reload({\n\t\t\t\t...(this.server || {}),\n\t\t\t\tfetch: this.fetch\n\t\t\t})\n\n\t\treturn this\n\t}\n\n\thandle = async (request: Request) => this.fetch(request)\n\n\t/**\n\t * Use handle can be either sync or async to save performance.\n\t *\n\t * Beside benchmark purpose, please use 'handle' instead.\n\t */\n\tfetch = (request: Request): MaybePromise<Response> => {\n\t\tif (process.env.NODE_ENV === 'production')\n\t\t\tconsole.warn(\n\t\t\t\t\"Performance degradation found. Please call Elysia.compile() before using 'fetch'\"\n\t\t\t)\n\n\t\treturn (this.fetch = this.config.aot\n\t\t\t? composeGeneralHandler(this)\n\t\t\t: createDynamicHandler(this))(request)\n\t}\n\n\tprivate handleError = async (\n\t\tcontext: Partial<\n\t\t\tContext<\n\t\t\t\tMetadata['schema'] &\n\t\t\t\t\tEphemeralMetadata['schema'] &\n\t\t\t\t\tEphemeralMetadata['schema'],\n\t\t\t\tSingleton & EphemeralSingleton,\n\t\t\t\tBasePath\n\t\t\t>\n\t\t> & {\n\t\t\trequest: Request\n\t\t},\n\t\terror:\n\t\t\t| Error\n\t\t\t| ValidationError\n\t\t\t| ParseError\n\t\t\t| NotFoundError\n\t\t\t| InternalServerError\n\t) =>\n\t\t(this.handleError = this.config.aot\n\t\t\t? composeErrorHandler(this)\n\t\t\t: createDynamicErrorHandler(this))(context, error)\n\n\tprivate outerErrorHandler = (error: Error) =>\n\t\tnew Response(error.message || error.name || 'Error', {\n\t\t\t// @ts-ignore\n\t\t\tstatus: error?.status ?? 500\n\t\t})\n\n\t/**\n\t * ### listen\n\t * Assign current instance to port and start serving\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .get(\"/\", () => 'hi')\n\t *     .listen(8080)\n\t * ```\n\t */\n\tlisten = (\n\t\toptions: string | number | Partial<Serve>,\n\t\tcallback?: ListenCallback\n\t) => {\n\t\tif (typeof Bun === 'undefined')\n\t\t\tthrow new Error(\n\t\t\t\t'.listen() is designed to run on Bun only. If you are running Elysia in other environment please use a dedicated plugin or export the handler via Elysia.fetch'\n\t\t\t)\n\n\t\tthis.compile()\n\n\t\tif (typeof options === 'string') {\n\t\t\tif (!isNumericString(options))\n\t\t\t\tthrow new Error('Port must be a numeric value')\n\n\t\t\toptions = parseInt(options)\n\t\t}\n\n\t\tconst fetch = this.fetch\n\n\t\tconst serve =\n\t\t\ttypeof options === 'object'\n\t\t\t\t? ({\n\t\t\t\t\t\tdevelopment: !isProduction,\n\t\t\t\t\t\treusePort: true,\n\t\t\t\t\t\t...(this.config.serve || {}),\n\t\t\t\t\t\t...(options || {}),\n\t\t\t\t\t\twebsocket: {\n\t\t\t\t\t\t\t...(this.config.websocket || {}),\n\t\t\t\t\t\t\t...(websocket || {})\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfetch,\n\t\t\t\t\t\terror: this.outerErrorHandler\n\t\t\t\t  } as Serve)\n\t\t\t\t: ({\n\t\t\t\t\t\tdevelopment: !isProduction,\n\t\t\t\t\t\treusePort: true,\n\t\t\t\t\t\t...(this.config.serve || {}),\n\t\t\t\t\t\twebsocket: {\n\t\t\t\t\t\t\t...(this.config.websocket || {}),\n\t\t\t\t\t\t\t...(websocket || {})\n\t\t\t\t\t\t},\n\t\t\t\t\t\tport: options,\n\t\t\t\t\t\tfetch,\n\t\t\t\t\t\terror: this.outerErrorHandler\n\t\t\t\t  } as Serve)\n\n\t\tthis.server = Bun?.serve(serve)\n\n\t\tfor (let i = 0; i < this.event.start.length; i++)\n\t\t\tthis.event.start[i](this)\n\n\t\tif (callback) callback(this.server!)\n\n\t\tprocess.on('beforeExit', () => {\n\t\t\tif (this.server) {\n\t\t\t\tthis.server.stop()\n\t\t\t\tthis.server = null\n\n\t\t\t\tfor (let i = 0; i < this.event.stop.length; i++)\n\t\t\t\t\tthis.event.stop[i](this)\n\t\t\t}\n\t\t})\n\n\t\tPromise.all(this.lazyLoadModules).then(() => {\n\t\t\tBun?.gc(false)\n\t\t})\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### stop\n\t * Stop server from serving\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * const app = new Elysia()\n\t *     .get(\"/\", () => 'hi')\n\t *     .listen(8080)\n\t *\n\t * // Sometime later\n\t * app.stop()\n\t * ```\n\t */\n\tstop = async () => {\n\t\tif (!this.server)\n\t\t\tthrow new Error(\n\t\t\t\t\"Elysia isn't running. Call `app.listen` to start the server.\"\n\t\t\t)\n\n\t\tif (this.server) {\n\t\t\tthis.server.stop()\n\t\t\tthis.server = null\n\n\t\t\tif (this.event.stop.length)\n\t\t\t\tfor (let i = 0; i < this.event.stop.length; i++)\n\t\t\t\t\tthis.event.stop[i](this)\n\t\t}\n\t}\n\n\t/**\n\t * Wait until all lazy loaded modules all load is fully\n\t */\n\tget modules() {\n\t\treturn Promise.all(this.lazyLoadModules)\n\t}\n}\n\nexport { Elysia }\n\nexport { mapResponse, mapCompactResponse, mapEarlyResponse } from './handler'\nexport { t } from './type-system'\nexport { Cookie, type CookieOptions } from './cookies'\n\nexport {\n\tgetSchemaValidator,\n\tmergeHook,\n\tmergeObjectArray,\n\tgetResponseSchemaValidator\n} from './utils'\n\nexport {\n\terror,\n\tParseError,\n\tNotFoundError,\n\tValidationError,\n\tInternalServerError,\n\tInvalidCookieSignature\n} from './error'\n\nexport type { Context, PreContext } from './context'\n\nexport type {\n\tElysiaConfig,\n\tSingletonBase,\n\tDefinitionBase,\n\tRouteBase,\n\tHandler,\n\tComposedHandler,\n\tInputSchema,\n\tLocalHook,\n\tMergeSchema,\n\tRouteSchema,\n\tUnwrapRoute,\n\tInternalRoute,\n\tHTTPMethod,\n\tSchemaValidator,\n\tVoidHandler,\n\tPreHandler,\n\tBodyHandler,\n\tOptionalHandler,\n\tErrorHandler,\n\tAfterHandler,\n\tLifeCycleEvent,\n\tTraceEvent,\n\tLifeCycleStore,\n\tMaybePromise,\n\tListenCallback,\n\tUnwrapSchema,\n\tTraceHandler,\n\tTraceProcess,\n\tTraceReporter,\n\tTraceStream,\n\tChecksum\n} from './types'\n\nexport type { Static, TSchema } from '@sinclair/typebox'\n"
  ],
  "mappings": "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",
  "debugId": "2E7226A61C30A60764756e2164756e21",
  "names": []
}