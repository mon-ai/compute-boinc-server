import { IntersectEvaluated } from '../intersect/index.mjs';
import { IndexFromPropertyKeys } from '../indexed/index.mjs';
import { KeyOfPropertyKeys } from '../keyof/index.mjs';
import { Object } from '../object/index.mjs';
import { SetDistinct } from '../sets/index.mjs';
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
import { IsNever } from '../guard/type.mjs';
// prettier-ignore
function CompositeKeys(T) {
    return T.reduce((Acc, L) => {
        return SetDistinct([...Acc, ...KeyOfPropertyKeys(L)]);
    }, []);
}
// prettier-ignore
function FilterNever(T) {
    return T.filter(L => !IsNever(L));
}
// prettier-ignore
function CompositeProperty(T, K) {
    return T.reduce((Acc, L) => {
        return FilterNever([...Acc, ...IndexFromPropertyKeys(L, [K])]);
    }, []);
}
// prettier-ignore
function CompositeProperties(T, K) {
    return K.reduce((Acc, L) => {
        return { ...Acc, [L]: IntersectEvaluated(CompositeProperty(T, L)) };
    }, {});
}
// prettier-ignore
export function Composite(T, options = {}) {
    const K = CompositeKeys(T);
    const P = CompositeProperties(T, K);
    const R = Object(P, options);
    return R;
}
