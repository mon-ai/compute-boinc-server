import { TypeBoxError } from '../../type/error/index.mjs';
import { ValueError } from '../../errors/index.mjs';
import type { TSchema } from '../../type/schema/index.mjs';
export declare class TransformEncodeCheckError extends TypeBoxError {
    readonly schema: TSchema;
    readonly value: unknown;
    readonly error: ValueError;
    constructor(schema: TSchema, value: unknown, error: ValueError);
}
export declare class TransformEncodeError extends TypeBoxError {
    readonly schema: TSchema;
    readonly value: unknown;
    constructor(schema: TSchema, value: unknown, error: any);
}
/**
 * `[Internal]` Encodes the value and returns the result. This function expects the
 * caller to pass a statically checked value. This function does not check the encoded
 * result, meaning the result should be passed to `Check` before use. Refer to the
 * `Value.Encode()` function for implementation details.
 */
export declare function TransformEncode(schema: TSchema, references: TSchema[], value: unknown): unknown;
